"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/tempo-devtools";
exports.ids = ["vendor-chunks/tempo-devtools"];
exports.modules = {

/***/ "(ssr)/./node_modules/tempo-devtools/dist/TempoDevtools.js":
/*!***********************************************************!*\
  !*** ./node_modules/tempo-devtools/dist/TempoDevtools.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TempoDevtools = void 0;\nconst channelMessaging_1 = __webpack_require__(/*! ./channelMessaging */ \"(ssr)/./node_modules/tempo-devtools/dist/channelMessaging/index.js\");\nexports.TempoDevtools = {\n    state: {\n        dependencies: {\n            LzString: null,\n        },\n        env: {},\n    },\n    // Initialization method\n    init: function (customEnv = {}) {\n        if (customEnv) {\n            this.state.env = Object.assign({}, customEnv);\n        }\n        (0, channelMessaging_1.initChannelMessaging)();\n    },\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdGVtcG8tZGV2dG9vbHMvZGlzdC9UZW1wb0RldnRvb2xzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHFCQUFxQjtBQUNyQiwyQkFBMkIsbUJBQU8sQ0FBQyw4RkFBb0I7QUFDdkQscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxlQUFlO0FBQ2YsS0FBSztBQUNMO0FBQ0Esa0NBQWtDO0FBQ2xDO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0E7QUFDQSxLQUFLO0FBQ0wiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcc3lhaGlcXE9uZURyaXZlXFzYs9i32K0g2KfZhNmF2YPYqtioXFxHYXNzaW1cXGhlYWRzaG90bWFrZXJhaXByb1xcbm9kZV9tb2R1bGVzXFx0ZW1wby1kZXZ0b29sc1xcZGlzdFxcVGVtcG9EZXZ0b29scy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuVGVtcG9EZXZ0b29scyA9IHZvaWQgMDtcbmNvbnN0IGNoYW5uZWxNZXNzYWdpbmdfMSA9IHJlcXVpcmUoXCIuL2NoYW5uZWxNZXNzYWdpbmdcIik7XG5leHBvcnRzLlRlbXBvRGV2dG9vbHMgPSB7XG4gICAgc3RhdGU6IHtcbiAgICAgICAgZGVwZW5kZW5jaWVzOiB7XG4gICAgICAgICAgICBMelN0cmluZzogbnVsbCxcbiAgICAgICAgfSxcbiAgICAgICAgZW52OiB7fSxcbiAgICB9LFxuICAgIC8vIEluaXRpYWxpemF0aW9uIG1ldGhvZFxuICAgIGluaXQ6IGZ1bmN0aW9uIChjdXN0b21FbnYgPSB7fSkge1xuICAgICAgICBpZiAoY3VzdG9tRW52KSB7XG4gICAgICAgICAgICB0aGlzLnN0YXRlLmVudiA9IE9iamVjdC5hc3NpZ24oe30sIGN1c3RvbUVudik7XG4gICAgICAgIH1cbiAgICAgICAgKDAsIGNoYW5uZWxNZXNzYWdpbmdfMS5pbml0Q2hhbm5lbE1lc3NhZ2luZykoKTtcbiAgICB9LFxufTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/tempo-devtools/dist/TempoDevtools.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/tempo-devtools/dist/channelMessaging/changeItemFunctions.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/tempo-devtools/dist/channelMessaging/changeItemFunctions.js ***!
  \**********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.updateCodebaseIds = exports.applyChangeItemToDocument = exports.TEMPORARY_STYLING_CLASS_NAME = exports.ADD_CLASS_INSTANT_UPDATE_QUEUE = exports.ADD_JSX_PREFIX = exports.DUPLICATE_PLACEHOLDER_PREFIX = exports.WRAP_IN_DIV_PLACEHOLDER_CODEBASE_ID = void 0;\nconst jquery_1 = __importDefault(__webpack_require__(/*! jquery */ \"(ssr)/./node_modules/jquery/dist/jquery.js\"));\nconst identifierUtils_1 = __webpack_require__(/*! ./identifierUtils */ \"(ssr)/./node_modules/tempo-devtools/dist/channelMessaging/identifierUtils.js\");\nconst changeLedgerTypes_1 = __webpack_require__(/*! ./changeLedgerTypes */ \"(ssr)/./node_modules/tempo-devtools/dist/channelMessaging/changeLedgerTypes.js\");\nconst constantsAndTypes_1 = __webpack_require__(/*! ./constantsAndTypes */ \"(ssr)/./node_modules/tempo-devtools/dist/channelMessaging/constantsAndTypes.js\");\nconst cssRuleUtils_1 = __webpack_require__(/*! ./cssRuleUtils */ \"(ssr)/./node_modules/tempo-devtools/dist/channelMessaging/cssRuleUtils.js\");\nconst sessionStorageUtils_1 = __webpack_require__(/*! ./sessionStorageUtils */ \"(ssr)/./node_modules/tempo-devtools/dist/channelMessaging/sessionStorageUtils.js\");\nconst tempoElement_1 = __webpack_require__(/*! ./tempoElement */ \"(ssr)/./node_modules/tempo-devtools/dist/channelMessaging/tempoElement.js\");\nconst uuid_1 = __webpack_require__(/*! uuid */ \"(ssr)/./node_modules/uuid/dist/esm-node/index.js\");\n// These constants match what tempo-api has\nexports.WRAP_IN_DIV_PLACEHOLDER_CODEBASE_ID = 'tempo-wrap-in-div-placeholder';\nexports.DUPLICATE_PLACEHOLDER_PREFIX = 'tempo-duplicate-placeholder-';\nexports.ADD_JSX_PREFIX = 'tempo-add-jsx-placeholder-';\n// Stored in memory storage, used to keep track of some possible add class instant\n// updates that need to be re-applied after a hot reload\n// (e.g. when the additional) instant updates happened during flushing\nexports.ADD_CLASS_INSTANT_UPDATE_QUEUE = 'ADD_CLASS_INSTANT_UPDATE_QUEUE';\nexports.TEMPORARY_STYLING_CLASS_NAME = 'arb89-temp-styling';\nconst getTopLevelCodebaseIdForComponent = (componentId) => {\n    let topLevelCodebaseId = null;\n    let minNumberParents = Infinity;\n    (0, jquery_1.default)(`.component-${componentId}`).each((index, element) => {\n        if ((0, jquery_1.default)(element).parents().length < minNumberParents) {\n            minNumberParents = (0, jquery_1.default)(element).parents().length;\n            topLevelCodebaseId = (0, identifierUtils_1.getCodebaseIdFromNode)(element);\n        }\n    });\n    return topLevelCodebaseId;\n};\nconst makeid = (length) => {\n    let result = '';\n    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    const charactersLength = characters.length;\n    let counter = 0;\n    while (counter < length) {\n        result += characters.charAt(Math.floor(Math.random() * charactersLength));\n        counter += 1;\n    }\n    return result;\n};\nconst addOrEditCSSRule = (selector, rules, id) => {\n    var styleEl = document.createElement('style');\n    if (id) {\n        const existingElement = document.getElementById(id);\n        if (existingElement) {\n            existingElement.remove();\n        }\n        styleEl.id = id;\n    }\n    // Append <style> element to <head>\n    document.head.appendChild(styleEl);\n    var styleSheet = styleEl.sheet;\n    if (styleSheet.insertRule) {\n        // All browsers, except IE before version 9\n        styleSheet.insertRule(selector + '{' + rules + '}', styleSheet.cssRules.length);\n    }\n    else if (styleSheet.addRule) {\n        // IE before version 9\n        styleSheet.addRule(selector, rules, styleSheet.rules.length);\n    }\n};\nconst applyChangeItemToDocument = (parentPort, storyboardId, plainChangeItem) => {\n    var _a;\n    if (!plainChangeItem || !plainChangeItem.type) {\n        return { sendNewNavTree: false, instantUpdateSuccessful: false };\n    }\n    const changeItem = (0, changeLedgerTypes_1.reconstructChangeLedgerClass)(plainChangeItem);\n    let extraInstantUpdateData = {};\n    let instantUpdateSuccessful = false;\n    // The display: none rule is needed for a lot of instant updates, so create it if it doesn't exist\n    if (!document.getElementById(identifierUtils_1.TEMPO_DISPLAY_NONE_UNTIL_REFRESH_CLASS)) {\n        addOrEditCSSRule(`.${identifierUtils_1.TEMPO_DISPLAY_NONE_UNTIL_REFRESH_CLASS}`, 'display: none !important', identifierUtils_1.TEMPO_DISPLAY_NONE_UNTIL_REFRESH_CLASS);\n    }\n    let sendNewNavTree = false;\n    if (changeItem.type === changeLedgerTypes_1.ChangeType.ADD_JSX) {\n        const castChangeItem = changeItem;\n        const changeFields = castChangeItem.changeFields;\n        const newAddedIds = [];\n        if (changeFields.htmlForInstantUpdate) {\n            const elementToAdd = (0, jquery_1.default)(changeFields.htmlForInstantUpdate);\n            elementToAdd.attr(identifierUtils_1.TEMPO_DELETE_AFTER_REFRESH, 'true');\n            elementToAdd.attr(identifierUtils_1.TEMPO_INSTANT_UPDATE, 'true'); // So that the DOM tree refresh doesn't get triggered\n            elementToAdd.attr(identifierUtils_1.TEMPO_OUTLINE_UNTIL_REFESH, 'true');\n            const ID_FOR_ELEMENT = `${exports.ADD_JSX_PREFIX}${(0, uuid_1.v4)()}`;\n            elementToAdd.attr(identifierUtils_1.TEMPO_ELEMENT_ID, ID_FOR_ELEMENT);\n            elementToAdd.addClass(ID_FOR_ELEMENT);\n            newAddedIds.push(ID_FOR_ELEMENT);\n            (0, jquery_1.default)(`.${changeFields.codebaseIdToAddTo}`).each((index, item) => {\n                if (changeFields.afterCodebaseId) {\n                    const afterElement = (0, jquery_1.default)(`.${changeFields.afterCodebaseId}`);\n                    if (!(afterElement === null || afterElement === void 0 ? void 0 : afterElement.length)) {\n                        return;\n                    }\n                    elementToAdd.insertAfter(afterElement.first());\n                }\n                else if (changeFields.beforeCodebaseId) {\n                    const beforeElement = (0, jquery_1.default)(`.${changeFields.beforeCodebaseId}`);\n                    if (!(beforeElement === null || beforeElement === void 0 ? void 0 : beforeElement.length)) {\n                        return;\n                    }\n                    elementToAdd.insertBefore(beforeElement.first());\n                }\n                else {\n                    (0, jquery_1.default)(item).append(elementToAdd);\n                }\n                sendNewNavTree = true;\n                instantUpdateSuccessful = true;\n            });\n        }\n        extraInstantUpdateData['newAddedIds'] = newAddedIds;\n    }\n    else if (changeItem.type === changeLedgerTypes_1.ChangeType.MOVE_JSX) {\n        const castChangeItem = changeItem;\n        // Find each element that matches the jsxCodebaseId\n        const sourceElements = [];\n        // See if direct matches work first\n        if ((0, jquery_1.default)(`.${castChangeItem.changeFields.codebaseIdToMove}`).length > 0) {\n            (0, jquery_1.default)(`.${castChangeItem.changeFields.codebaseIdToMove}`).each((index, element) => {\n                sourceElements.push((0, jquery_1.default)(element));\n            });\n        }\n        else {\n            // Try to find it by the component ID\n            let topLevelCodebaseId = getTopLevelCodebaseIdForComponent(castChangeItem.changeFields.codebaseIdToMove || '');\n            if (topLevelCodebaseId) {\n                (0, jquery_1.default)(`.${topLevelCodebaseId}`).each((index, element) => {\n                    sourceElements.push((0, jquery_1.default)(element));\n                });\n            }\n        }\n        // If the container is a component, drop into the codebaseId of the top-most child div\n        let containerCodebaseId = getTopLevelCodebaseIdForComponent(castChangeItem.changeFields.codebaseIdToMoveTo || '') || castChangeItem.changeFields.codebaseIdToMoveTo;\n        // For each source element, find the new matching parent element\n        const newParentElements = [];\n        sourceElements.forEach((element) => {\n            let newParentElement = null;\n            // For each parent, try to see if it either matches or contains the new parent\n            let parentElement = element.parent();\n            while (parentElement.length) {\n                // If the parent directly matches, this is it\n                if (parentElement.hasClass(containerCodebaseId)) {\n                    newParentElement = parentElement;\n                    break;\n                }\n                // Check children that match the codebase ID to drop into\n                const matchingChildren = parentElement.find(`.${containerCodebaseId}`);\n                if (matchingChildren.length) {\n                    // TODO: What if this matches more than one?\n                    newParentElement = matchingChildren.first();\n                    break;\n                }\n                parentElement = parentElement.parent();\n            }\n            if (!newParentElement) {\n                newParentElements.push(null);\n                return;\n            }\n            newParentElements.push(newParentElement);\n        });\n        // For each child/parentElement pair, move the child to the new parent\n        sourceElements.forEach((element, index) => {\n            const newParentElement = newParentElements[index];\n            if (!newParentElement.length) {\n                console.log('Could not find new parent element for instant update');\n                return;\n            }\n            sendNewNavTree = true;\n            instantUpdateSuccessful = true;\n            element.attr(identifierUtils_1.TEMPO_INSTANT_UPDATE, 'true');\n            // If the parent hasn't changed, just move it, otherwise clone it and create a new one in the new spot\n            let useClone = !newParentElement.is(element.parent());\n            // So that nextjs hot reloading works, simply hide the element and clone it into the new spot\n            let cloneElement;\n            if (useClone) {\n                cloneElement = element.clone();\n                cloneElement.attr(identifierUtils_1.TEMPO_DELETE_AFTER_REFRESH, 'true');\n                element.addClass(identifierUtils_1.TEMPO_DISPLAY_NONE_UNTIL_REFRESH_CLASS);\n                element.attr(identifierUtils_1.TEMPO_DO_NOT_SHOW_IN_NAV_UNTIL_REFRESH, 'true');\n            }\n            if (castChangeItem.changeFields.afterCodebaseId) {\n                const afterIdToUse = getTopLevelCodebaseIdForComponent(castChangeItem.changeFields.afterCodebaseId) || castChangeItem.changeFields.afterCodebaseId;\n                const afterElement = newParentElement.children(`.${afterIdToUse}`);\n                if (afterElement.length) {\n                    if (useClone && cloneElement) {\n                        cloneElement.insertAfter(afterElement.first());\n                    }\n                    else {\n                        element.insertAfter(afterElement.first());\n                    }\n                    return;\n                }\n            }\n            if (castChangeItem.changeFields.beforeCodebaseId) {\n                const beforeIdToUse = getTopLevelCodebaseIdForComponent(castChangeItem.changeFields.beforeCodebaseId) || castChangeItem.changeFields.beforeCodebaseId;\n                const beforeElement = newParentElement.children(`.${beforeIdToUse}`);\n                if (beforeElement.length) {\n                    if (useClone && cloneElement) {\n                        cloneElement.insertBefore(beforeElement.first());\n                    }\n                    else {\n                        element.insertBefore(beforeElement.first());\n                    }\n                    return;\n                }\n            }\n            if (useClone && cloneElement) {\n                cloneElement.appendTo(newParentElement);\n            }\n            else {\n                element.appendTo(newParentElement);\n            }\n        });\n    }\n    else if (changeItem.type === changeLedgerTypes_1.ChangeType.REMOVE_JSX) {\n        const castChangeItem = changeItem;\n        const parentToElementKeysRemoved = {};\n        castChangeItem.changeFields.codebaseIdsToRemove.forEach((codebaseId) => {\n            // See if direct matches work first\n            let codebaseIdToRemove;\n            if ((0, jquery_1.default)(`.${codebaseId}`).length > 0) {\n                codebaseIdToRemove = codebaseId;\n            }\n            else {\n                // Try to find it by the component ID\n                let topLevelCodebaseId = getTopLevelCodebaseIdForComponent(codebaseId || '');\n                if (!topLevelCodebaseId) {\n                    console.log('Could not find component element for instant update');\n                    return false;\n                }\n                codebaseIdToRemove = topLevelCodebaseId;\n            }\n            // For each item that is removed, save the inner HTML in case it gets deleted and we want to undo\n            (0, jquery_1.default)(`.${codebaseIdToRemove}`).each((index, item) => {\n                const elementKeyRemoved = (0, identifierUtils_1.getElementKeyFromNode)(item);\n                const parentElementKey = (0, identifierUtils_1.getElementKeyFromNode)(item.parentElement);\n                if (elementKeyRemoved && parentElementKey) {\n                    if (!parentToElementKeysRemoved[parentElementKey]) {\n                        parentToElementKeysRemoved[parentElementKey] = [];\n                    }\n                    parentToElementKeysRemoved[parentElementKey].push({\n                        outerHTML: item.outerHTML,\n                        elementKeyRemoved,\n                    });\n                }\n                item.classList.add(identifierUtils_1.TEMPO_DISPLAY_NONE_UNTIL_REFRESH_CLASS);\n                item.setAttribute(identifierUtils_1.TEMPO_DO_NOT_SHOW_IN_NAV_UNTIL_REFRESH, 'true');\n                sendNewNavTree = true;\n                instantUpdateSuccessful = true;\n            });\n        });\n        extraInstantUpdateData.parentToElementKeysRemoved =\n            parentToElementKeysRemoved;\n    }\n    else if (changeItem.type === changeLedgerTypes_1.ChangeType.ADD_CLASS ||\n        changeItem.type === changeLedgerTypes_1.ChangeType.STYLING) {\n        let className, cssEquivalent, codebaseIdToAddClass, temporaryClass, codebaseClassName, modifiers;\n        if (changeItem.type === changeLedgerTypes_1.ChangeType.ADD_CLASS) {\n            const castChangeItem = changeItem;\n            codebaseClassName = castChangeItem.changeFields.className;\n            className = castChangeItem.changeFields.className;\n            cssEquivalent = castChangeItem.changeFields.cssEquivalent;\n            codebaseIdToAddClass = castChangeItem.changeFields.codebaseIdToAddClass;\n            temporaryClass = castChangeItem.changeFields.temporaryOnly;\n            modifiers = castChangeItem.changeFields.modifiers;\n            if (temporaryClass) {\n                className = exports.TEMPORARY_STYLING_CLASS_NAME;\n            }\n        }\n        else {\n            // As of March 6, 2024 we only support tailwind STYLING changes, so treat them as adding a class\n            const castChangeItem = changeItem.changeFields;\n            className = '';\n            cssEquivalent = Object.keys(castChangeItem.stylingChanges)\n                .map((key) => {\n                if (castChangeItem.stylingChanges[key] === constantsAndTypes_1.DELETE_STYLE_CONSTANT) {\n                    return `${(0, cssRuleUtils_1.camelToSnakeCase)(key)}: unset !important;`;\n                }\n                return `${(0, cssRuleUtils_1.camelToSnakeCase)(key)}: ${castChangeItem.stylingChanges[key]};`;\n            })\n                .join('');\n            codebaseIdToAddClass = castChangeItem.codebaseId;\n            modifiers = castChangeItem.modifiers;\n        }\n        const SAFE_CLASSNAME_REGEX = /[^A-Za-z0-9_-]/g;\n        // Escape any custom classes\n        let classToAdd = (className || '')\n            .replace(SAFE_CLASSNAME_REGEX, '-') // Replace any non-alphanumeric characters with '-'\n            .replace(/^\\d/, '-$&'); // If the class starts with a digit, prepend with '-'\n        // Instead of adding the class name, generate a new class and set the\n        // css equivalent values inside it\n        // This class will be deleted after a hot reload\n        // Note - for temporary classes we want to explicitly use the same class\n        if (cssEquivalent && !temporaryClass) {\n            const msSinceJan1 = Date.now() - 1704067200000;\n            classToAdd = `${identifierUtils_1.TEMPO_INSTANT_UPDATE_STYLING_PREFIX}${msSinceJan1}-${classToAdd}`;\n        }\n        if (classToAdd) {\n            if (!temporaryClass) {\n                // Clear the temporary class on this element if it has it\n                (0, jquery_1.default)(`.${codebaseIdToAddClass}`).removeClass(exports.TEMPORARY_STYLING_CLASS_NAME);\n            }\n            if (cssEquivalent) {\n                if (modifiers && modifiers.length > 0) {\n                    const CSS_PSEUDO_MODIFIERS = [\n                        'hover',\n                        'required',\n                        'focus',\n                        'active',\n                        'invalid',\n                        'disabled',\n                    ];\n                    const pseudoModifiers = modifiers.filter((modifier) => CSS_PSEUDO_MODIFIERS.includes(modifier));\n                    const pseudoModifiersSuffix = pseudoModifiers.join(':');\n                    if (pseudoModifiers.length > 0) {\n                        const modifierClass = `${classToAdd}:${pseudoModifiersSuffix}`;\n                        addOrEditCSSRule(`.${modifierClass}`, cssEquivalent, modifierClass);\n                    }\n                    else {\n                        addOrEditCSSRule(`.${classToAdd}`, cssEquivalent, classToAdd);\n                    }\n                    const forceClasses = modifiers\n                        .map((modifier) => `.tempo-force-${modifier}`)\n                        .join('');\n                    const instantUpdateForForceClass = `${classToAdd}${forceClasses}`;\n                    addOrEditCSSRule(`.${instantUpdateForForceClass}`, cssEquivalent, instantUpdateForForceClass);\n                }\n                else {\n                    addOrEditCSSRule(`.${classToAdd}`, cssEquivalent, classToAdd);\n                }\n            }\n            const currentAddClassValues = (0, sessionStorageUtils_1.getMemoryStorageItem)(exports.ADD_CLASS_INSTANT_UPDATE_QUEUE) || [];\n            // See if direct matches work first\n            if ((0, jquery_1.default)(`.${codebaseIdToAddClass}`).length > 0) {\n                (0, jquery_1.default)(`.${codebaseIdToAddClass}`).addClass(classToAdd);\n                instantUpdateSuccessful = true;\n                currentAddClassValues.push({\n                    codebaseId: codebaseIdToAddClass,\n                    className: classToAdd,\n                });\n            }\n            else {\n                // Try to find it by the component ID\n                let topLevelCodebaseId = getTopLevelCodebaseIdForComponent(codebaseIdToAddClass || '');\n                if (topLevelCodebaseId && (0, jquery_1.default)(`.${topLevelCodebaseId}`).length > 0) {\n                    instantUpdateSuccessful = true;\n                    (0, jquery_1.default)(`.${topLevelCodebaseId}`).addClass(classToAdd);\n                    currentAddClassValues.push({\n                        codebaseId: topLevelCodebaseId,\n                        className: classToAdd,\n                    });\n                }\n            }\n            (0, sessionStorageUtils_1.setMemoryStorageItem)(exports.ADD_CLASS_INSTANT_UPDATE_QUEUE, currentAddClassValues);\n            extraInstantUpdateData.addedClass = classToAdd;\n            extraInstantUpdateData.codebaseAddedClass = codebaseClassName;\n        }\n    }\n    else if (changeItem.type === changeLedgerTypes_1.ChangeType.REMOVE_CLASS) {\n        const removeClassChangeFields = changeItem.changeFields;\n        // See if direct matches work first\n        if ((0, jquery_1.default)(`.${removeClassChangeFields.codebaseIdToRemoveClass}`).length > 0) {\n            (0, jquery_1.default)(`.${removeClassChangeFields.codebaseIdToRemoveClass}`).removeClass(removeClassChangeFields.className);\n            instantUpdateSuccessful = true;\n        }\n        else {\n            // Try to find it by the component ID\n            let topLevelCodebaseId = getTopLevelCodebaseIdForComponent(removeClassChangeFields.codebaseIdToRemoveClass || '');\n            if (topLevelCodebaseId && (0, jquery_1.default)(`.${topLevelCodebaseId}`).length > 0) {\n                instantUpdateSuccessful = true;\n                (0, jquery_1.default)(`.${topLevelCodebaseId}`).removeClass(removeClassChangeFields.className);\n            }\n        }\n    }\n    else if (changeItem.type === changeLedgerTypes_1.ChangeType.WRAP_DIV) {\n        const changeFields = changeItem.changeFields;\n        const codebaseIdsToWrap = changeFields.codebaseIdsToWrap;\n        const firstCodebaseId = codebaseIdsToWrap[0];\n        // We assume the other codebase IDs are siblings of this codebase ID, so we\n        // find each instance of the first one and include the other items that match in it\n        // If the other items aren't all found, we do not wrap and let hot reload handle it\n        (0, jquery_1.default)(`.${firstCodebaseId}`).each((index, item) => {\n            const otherCodebaseIds = codebaseIdsToWrap.slice(1);\n            // For each codebase ID in otherCodebaseIds, retrieve the element that is a sibling of item\n            const siblings = (0, jquery_1.default)(item).siblings();\n            const allItemsToAddToNewDiv = [item];\n            let earliestItem = item;\n            let earliestIndex = (0, jquery_1.default)(item).index();\n            otherCodebaseIds.forEach((codebaseId) => {\n                const foundSibling = siblings.filter(`.${codebaseId}`).get(0);\n                if (foundSibling) {\n                    allItemsToAddToNewDiv.push(foundSibling);\n                    const index = (0, jquery_1.default)(foundSibling).index();\n                    if (index < earliestIndex) {\n                        earliestItem = foundSibling;\n                        earliestIndex = index;\n                    }\n                }\n            });\n            // TODO: What to do if they all can't be found?\n            if (allItemsToAddToNewDiv.length !== codebaseIdsToWrap.length) {\n                // For now, just add the ones that were found\n            }\n            // Create a div with a clone of the item, while hiding the item\n            // When the hot reload happens the clone gets deleted and the item is shown again\n            const newDiv = document.createElement('div');\n            newDiv.className = exports.WRAP_IN_DIV_PLACEHOLDER_CODEBASE_ID;\n            newDiv.setAttribute(identifierUtils_1.TEMPO_INSTANT_UPDATE, 'true'); // So that the DOM tree refresh doesn't get triggered\n            newDiv.setAttribute('tempoelementid', exports.WRAP_IN_DIV_PLACEHOLDER_CODEBASE_ID);\n            newDiv.setAttribute('data-testid', exports.WRAP_IN_DIV_PLACEHOLDER_CODEBASE_ID);\n            newDiv.setAttribute(identifierUtils_1.TEMPO_DELETE_AFTER_REFRESH, 'true');\n            allItemsToAddToNewDiv.forEach((elem) => {\n                newDiv.appendChild(elem.cloneNode(true));\n                elem.classList.add(identifierUtils_1.TEMPO_DISPLAY_NONE_UNTIL_REFRESH_CLASS);\n                elem.setAttribute(identifierUtils_1.TEMPO_DO_NOT_SHOW_IN_NAV_UNTIL_REFRESH, 'true');\n            });\n            // Insert the new div right before the first item\n            earliestItem.insertAdjacentElement('beforebegin', newDiv);\n            sendNewNavTree = true;\n            instantUpdateSuccessful = true;\n        });\n    }\n    else if (changeItem.type === changeLedgerTypes_1.ChangeType.DUPLICATE) {\n        const changeFileds = changeItem.changeFields;\n        const codebaseIdsToDuplicate = changeFileds.codebaseIdsToDuplicate;\n        codebaseIdsToDuplicate.forEach((codebaseIdToDuplicate) => {\n            (0, jquery_1.default)(`.${codebaseIdToDuplicate}`).each((index, item) => {\n                const clonedNode = item.cloneNode(true);\n                clonedNode.setAttribute(identifierUtils_1.TEMPO_DELETE_AFTER_REFRESH, 'true');\n                clonedNode.setAttribute(identifierUtils_1.TEMPO_INSTANT_UPDATE, 'true'); // So that the DOM tree refresh doesn't get triggered\n                // Set up all the correct duplicated codebase IDs\n                clonedNode.setAttribute('tempoelementid', `${exports.DUPLICATE_PLACEHOLDER_PREFIX}${codebaseIdToDuplicate}`);\n                clonedNode.setAttribute('data-testid', `${exports.DUPLICATE_PLACEHOLDER_PREFIX}${codebaseIdToDuplicate}`);\n                clonedNode.classList.add(exports.DUPLICATE_PLACEHOLDER_PREFIX + codebaseIdToDuplicate);\n                clonedNode.classList.remove(codebaseIdToDuplicate);\n                let children = Array.from(clonedNode.children);\n                while (children.length) {\n                    const child = children.pop();\n                    if (!child) {\n                        continue;\n                    }\n                    const codebaseId = child.getAttribute('tempoelementid') ||\n                        child.getAttribute('data-testid');\n                    if (!codebaseId) {\n                        continue;\n                    }\n                    child.setAttribute('tempoelementid', `${exports.DUPLICATE_PLACEHOLDER_PREFIX}${codebaseId}`);\n                    child.setAttribute('data-testid', `${exports.DUPLICATE_PLACEHOLDER_PREFIX}${codebaseId}`);\n                    child.classList.remove(codebaseId);\n                    child.classList.add(exports.DUPLICATE_PLACEHOLDER_PREFIX + codebaseId);\n                    child.setAttribute(identifierUtils_1.TEMPO_INSTANT_UPDATE, 'true');\n                    children.push(...Array.from(child.children));\n                }\n                // Add the clones node right after the found node\n                item.insertAdjacentElement('afterend', clonedNode);\n                sendNewNavTree = true;\n                instantUpdateSuccessful = true;\n            });\n        });\n    }\n    else if (changeItem.type === changeLedgerTypes_1.ChangeType.CHANGE_TAG) {\n        const changeFields = changeItem.changeFields;\n        (0, jquery_1.default)(`.${changeFields.codebaseIdToChange}`).each((index, item) => {\n            const $newElement = (0, jquery_1.default)('<' + changeFields.newTagName + '></' + changeFields.newTagName + '>');\n            $newElement.attr(identifierUtils_1.TEMPO_INSTANT_UPDATE, 'true'); // So that the DOM tree refresh doesn't get triggered\n            $newElement.attr(identifierUtils_1.TEMPO_DELETE_AFTER_REFRESH, 'true');\n            const $item = (0, jquery_1.default)(item);\n            // Copy all attributes from the original element to the new element\n            jquery_1.default.each($item[0].attributes, function () {\n                $newElement.attr(this.name, this.value);\n            });\n            $item.contents().clone(true, true).appendTo($newElement);\n            // Add right before the cloned item so the unique path stays the same\n            $item.before($newElement);\n            // Hide the original item\n            $item.addClass(identifierUtils_1.TEMPO_DISPLAY_NONE_UNTIL_REFRESH_CLASS);\n            $item.attr(identifierUtils_1.TEMPO_DO_NOT_SHOW_IN_NAV_UNTIL_REFRESH, 'true');\n            sendNewNavTree = true;\n            instantUpdateSuccessful = true;\n        });\n    }\n    else if (changeItem.type === changeLedgerTypes_1.ChangeType.UNDO) {\n        const { sendNewNavTree: _sendNewNavTree, instantUpdateSuccessful: _instantUpdateSuccessful, } = applyUndoChangeItemToDocument(parentPort, changeItem);\n        sendNewNavTree = _sendNewNavTree;\n        instantUpdateSuccessful = _instantUpdateSuccessful;\n    }\n    else if (changeItem.type === changeLedgerTypes_1.ChangeType.REDO) {\n        const changeFields = changeItem.changeFields;\n        const changeToRedo = changeFields.changeToRedo;\n        if (changeLedgerTypes_1.CHANGE_TYPES_WITH_INSTANT_UNDO.includes(changeToRedo.type)) {\n            const { sendNewNavTree: _sendNewNavTree, instantUpdateSuccessful: _instantUpdateSuccessful, } = (0, exports.applyChangeItemToDocument)(parentPort, storyboardId, changeToRedo);\n            sendNewNavTree = _sendNewNavTree;\n            instantUpdateSuccessful = _instantUpdateSuccessful;\n            if (changeToRedo.prevIdToNewIdMap) {\n                (0, exports.updateCodebaseIds)(parentPort, changeToRedo.prevIdToNewIdMap, true);\n            }\n        }\n    }\n    // Immediately set the new selected element keys to prevent any delay in the outlines updating\n    let elementKeyToSelectAfterInstantUpdate = changeItem.getElementKeyToSelectAfterInstantUpdate();\n    let elementKeysToMultiselectAfterInstantUpdate = changeItem.getElementKeysToMultiselectAfterInstantUpdate();\n    if (changeItem.type === changeLedgerTypes_1.ChangeType.UNDO) {\n        elementKeyToSelectAfterInstantUpdate = changeItem.changeFields.changeToUndo.getElementKeyToSelectAfterUndoInstantUpdate();\n        elementKeysToMultiselectAfterInstantUpdate = changeItem.changeFields.changeToUndo.getElementKeysToMultiselectAfterUndoInstantUpdate();\n    }\n    if (elementKeyToSelectAfterInstantUpdate !== undefined) {\n        (0, sessionStorageUtils_1.setMemoryStorageItem)(sessionStorageUtils_1.SELECTED_ELEMENT_KEY, elementKeyToSelectAfterInstantUpdate);\n        parentPort.postMessage({\n            id: constantsAndTypes_1.FIXED_IFRAME_MESSAGE_IDS.SELECTED_ELEMENT_KEY,\n            elementKey: elementKeyToSelectAfterInstantUpdate,\n            outerHTML: (_a = (0, jquery_1.default)(`.${identifierUtils_1.ELEMENT_KEY_PREFIX}${elementKeyToSelectAfterInstantUpdate}`).get(0)) === null || _a === void 0 ? void 0 : _a.outerHTML,\n        });\n    }\n    if (elementKeysToMultiselectAfterInstantUpdate !== undefined) {\n        (0, sessionStorageUtils_1.setMemoryStorageItem)(sessionStorageUtils_1.MULTI_SELECTED_ELEMENT_KEYS, elementKeysToMultiselectAfterInstantUpdate);\n        parentPort.postMessage({\n            id: constantsAndTypes_1.FIXED_IFRAME_MESSAGE_IDS.MULTI_SELECTED_ELEMENT_KEYS,\n            elementKeys: elementKeysToMultiselectAfterInstantUpdate,\n            outerHTMLs: elementKeysToMultiselectAfterInstantUpdate === null || elementKeysToMultiselectAfterInstantUpdate === void 0 ? void 0 : elementKeysToMultiselectAfterInstantUpdate.map((elementKey) => { var _a; return (_a = (0, jquery_1.default)(`.${identifierUtils_1.ELEMENT_KEY_PREFIX}${elementKey}`).get(0)) === null || _a === void 0 ? void 0 : _a.outerHTML; }),\n        });\n    }\n    if (instantUpdateSuccessful) {\n        // Delete any elements that need to be deleted after instant updates\n        (0, jquery_1.default)(`*[${identifierUtils_1.TEMPO_DELETE_AFTER_INSTANT_UPDATE}=true]`).remove();\n    }\n    parentPort.postMessage({\n        id: constantsAndTypes_1.FIXED_IFRAME_MESSAGE_IDS.INSTANT_UPDATE_DONE,\n        changeItem: plainChangeItem,\n        instantUpdateData: extraInstantUpdateData,\n        instantUpdateSuccessful,\n    });\n    return { sendNewNavTree, instantUpdateSuccessful };\n};\nexports.applyChangeItemToDocument = applyChangeItemToDocument;\nconst applyUndoChangeItemToDocument = (parentPort, changeItem) => {\n    const changeFields = changeItem.changeFields;\n    const changeToUndo = changeFields.changeToUndo;\n    if (!changeLedgerTypes_1.CHANGE_TYPES_WITH_INSTANT_UNDO.includes(changeToUndo.type)) {\n        return { sendNewNavTree: false, instantUpdateSuccessful: false };\n    }\n    let sendNewNavTree = false;\n    let instantUpdateSuccessful = false;\n    // API has completed and the IDs have been updated, reverse this change\n    if (changeToUndo.prevIdToNewIdMap) {\n        const undoCodebaseIdChanges = {};\n        Object.keys(changeToUndo.prevIdToNewIdMap).forEach((prevId) => {\n            const newId = changeToUndo.prevIdToNewIdMap[prevId];\n            undoCodebaseIdChanges[newId] = prevId;\n        });\n        // If undoing do not update the codebase IDs backwards if there are codebase IDs to set after\n        // the undo instant update is done\n        const selectedElementSpecifiedAfterUndo = changeToUndo.getElementKeyToSelectAfterUndoInstantUpdate() !== undefined;\n        (0, exports.updateCodebaseIds)(parentPort, undoCodebaseIdChanges, !selectedElementSpecifiedAfterUndo);\n    }\n    // Then undo the actual change\n    if (changeToUndo.type === changeLedgerTypes_1.ChangeType.REMOVE_JSX) {\n        // Re-add the removed JSX\n        const innerChangeFields = changeToUndo.changeFields;\n        const codebaseIdsToReadd = innerChangeFields.codebaseIdsToRemove;\n        // If it has been flushed, re-create the html elements from the saved inner HTML\n        if (changeFields.matchingActivityFlushed) {\n            const instantUpdateData = changeToUndo.getInstantUpdateData();\n            const parentToElementKeysRemoved = instantUpdateData.parentToElementKeysRemoved || {};\n            Object.entries(parentToElementKeysRemoved).forEach(([parentElementKey, itemsRemoved]) => {\n                // Sort the removed entries in order of unique path\n                const sortedItemsRemoved = Object.values(itemsRemoved).sort((a, b) => {\n                    const aElementKey = tempoElement_1.TempoElement.fromKey(a.elementKeyRemoved);\n                    const bElementKey = tempoElement_1.TempoElement.fromKey(b.elementKeyRemoved);\n                    return aElementKey.uniquePath.localeCompare(bElementKey.uniquePath);\n                });\n                // Find the parent element\n                const parentElement = (0, jquery_1.default)(`.${identifierUtils_1.ELEMENT_KEY_PREFIX}${parentElementKey}`).get(0);\n                if (parentElement) {\n                    // Add the removed elements back in order\n                    sortedItemsRemoved.forEach((item) => {\n                        const { elementKeyRemoved, outerHTML } = item;\n                        const element = tempoElement_1.TempoElement.fromKey(elementKeyRemoved);\n                        const indexInParent = Number(element.uniquePath.split('-').pop());\n                        const newElementFromHtml = (0, jquery_1.default)(outerHTML).get(0);\n                        // Add to the parent in the index\n                        if (newElementFromHtml) {\n                            newElementFromHtml.setAttribute(identifierUtils_1.TEMPO_DELETE_AFTER_REFRESH, 'true');\n                            newElementFromHtml.setAttribute(identifierUtils_1.TEMPO_INSTANT_UPDATE, 'true');\n                            parentElement.insertBefore(newElementFromHtml, parentElement.children[indexInParent] || null);\n                            instantUpdateSuccessful = true;\n                            sendNewNavTree = true;\n                        }\n                    });\n                }\n            });\n        }\n        else {\n            // Not flushed yet so can just re-add\n            codebaseIdsToReadd.forEach((codebaseIdToReadd) => {\n                (0, jquery_1.default)(`.${codebaseIdToReadd}`).each((index, item) => {\n                    item.classList.remove(identifierUtils_1.TEMPO_DISPLAY_NONE_UNTIL_REFRESH_CLASS);\n                    item.removeAttribute(identifierUtils_1.TEMPO_DO_NOT_SHOW_IN_NAV_UNTIL_REFRESH);\n                    sendNewNavTree = true;\n                    instantUpdateSuccessful = true;\n                });\n            });\n        }\n    }\n    else if (changeToUndo.type === changeLedgerTypes_1.ChangeType.ADD_CLASS ||\n        changeToUndo.type === changeLedgerTypes_1.ChangeType.STYLING) {\n        const instantUpdateData = changeToUndo.getInstantUpdateData();\n        const innerChangeFields = changeToUndo.changeFields;\n        const addedClass = instantUpdateData === null || instantUpdateData === void 0 ? void 0 : instantUpdateData.addedClass;\n        if (addedClass) {\n            (0, jquery_1.default)(`.${innerChangeFields.codebaseIdToAddClass}`).each((index, item) => {\n                if ((0, jquery_1.default)(item).hasClass(addedClass)) {\n                    (0, jquery_1.default)(item).removeClass(addedClass);\n                    instantUpdateSuccessful = true;\n                }\n            });\n        }\n        const codebaseAddedClass = instantUpdateData === null || instantUpdateData === void 0 ? void 0 : instantUpdateData.codebaseAddedClass;\n        if (codebaseAddedClass) {\n            (0, jquery_1.default)(`.${innerChangeFields.codebaseIdToAddClass}`).each((index, item) => {\n                if ((0, jquery_1.default)(item).hasClass(codebaseAddedClass)) {\n                    (0, jquery_1.default)(item).removeClass(codebaseAddedClass);\n                    instantUpdateSuccessful = true;\n                }\n            });\n        }\n    }\n    else if (changeToUndo.type === changeLedgerTypes_1.ChangeType.ADD_JSX) {\n        const instantUpdateData = changeToUndo.getInstantUpdateData();\n        const addedIds = instantUpdateData === null || instantUpdateData === void 0 ? void 0 : instantUpdateData.addedIds;\n        addedIds === null || addedIds === void 0 ? void 0 : addedIds.forEach((addedId) => {\n            (0, jquery_1.default)(`.${addedId}`).remove();\n            instantUpdateSuccessful = true;\n        });\n        sendNewNavTree = true;\n    }\n    return { sendNewNavTree, instantUpdateSuccessful };\n};\n/**\n * After a change is processed on the backend, we need to update the codebase ids in the document.\n */\nconst updateCodebaseIds = (parentPort, prevIdToNewIdMap, updateElementKeys) => {\n    // Update codebase ids in the document\n    const changes = [];\n    Object.entries(prevIdToNewIdMap).forEach(([prevCodebaseId, newCodebaseId]) => {\n        (0, jquery_1.default)(`.${prevCodebaseId}`).each((index, item) => {\n            changes.push({\n                item,\n                prevCodebaseId,\n                newCodebaseId,\n            });\n        });\n    });\n    // Codebase Ids can swap, so we have to apply the changes after looking all elements up\n    changes.forEach((change) => {\n        const $item = (0, jquery_1.default)(change.item);\n        const newClass = ($item.attr('class') || '').replace(new RegExp(`${change.prevCodebaseId}`, 'g'), change.newCodebaseId);\n        $item.attr('class', newClass);\n        change.item.setAttribute('tempoelementid', change.newCodebaseId);\n        change.item.setAttribute('data-testid', change.newCodebaseId);\n    });\n    if (!updateElementKeys) {\n        return Boolean(changes.length);\n    }\n    const keysToCheck = [\n        {\n            key: sessionStorageUtils_1.SELECTED_ELEMENT_KEY,\n            messageId: constantsAndTypes_1.FIXED_IFRAME_MESSAGE_IDS.SELECTED_ELEMENT_KEY,\n        },\n        {\n            key: sessionStorageUtils_1.HOVERED_ELEMENT_KEY,\n            messageId: constantsAndTypes_1.FIXED_IFRAME_MESSAGE_IDS.HOVERED_ELEMENT_KEY,\n        },\n    ];\n    keysToCheck.forEach(({ key, messageId }) => {\n        var _a;\n        const elementKey = (0, sessionStorageUtils_1.getMemoryStorageItem)(key);\n        const tempoElement = tempoElement_1.TempoElement.fromKey(elementKey);\n        if (prevIdToNewIdMap[tempoElement.codebaseId]) {\n            const newElement = new tempoElement_1.TempoElement(prevIdToNewIdMap[tempoElement.codebaseId], tempoElement.storyboardId, tempoElement.uniquePath);\n            (0, sessionStorageUtils_1.setMemoryStorageItem)(key, newElement.getKey());\n            parentPort.postMessage({\n                id: messageId,\n                elementKey: newElement.getKey(),\n                outerHTML: (_a = (0, jquery_1.default)(`.${identifierUtils_1.ELEMENT_KEY_PREFIX}${newElement.getKey()}`).get(0)) === null || _a === void 0 ? void 0 : _a.outerHTML,\n            });\n        }\n    });\n    // Also update the multiselected element keys\n    const multiselectedElementKeys = (0, sessionStorageUtils_1.getMemoryStorageItem)(sessionStorageUtils_1.MULTI_SELECTED_ELEMENT_KEYS);\n    if (multiselectedElementKeys === null || multiselectedElementKeys === void 0 ? void 0 : multiselectedElementKeys.length) {\n        const newMultiselectedElementKeys = [];\n        multiselectedElementKeys.forEach((elementKey) => {\n            const tempoElement = tempoElement_1.TempoElement.fromKey(elementKey);\n            if (prevIdToNewIdMap[tempoElement.codebaseId]) {\n                const newElement = new tempoElement_1.TempoElement(prevIdToNewIdMap[tempoElement.codebaseId], tempoElement.storyboardId, tempoElement.uniquePath);\n                newMultiselectedElementKeys.push(newElement.getKey());\n            }\n            else {\n                newMultiselectedElementKeys.push(elementKey);\n            }\n        });\n        (0, sessionStorageUtils_1.setMemoryStorageItem)(sessionStorageUtils_1.MULTI_SELECTED_ELEMENT_KEYS, newMultiselectedElementKeys);\n        parentPort.postMessage({\n            id: constantsAndTypes_1.FIXED_IFRAME_MESSAGE_IDS.MULTI_SELECTED_ELEMENT_KEYS,\n            elementKeys: newMultiselectedElementKeys,\n            outerHTMLs: newMultiselectedElementKeys === null || newMultiselectedElementKeys === void 0 ? void 0 : newMultiselectedElementKeys.map((elementKey) => { var _a; return (_a = (0, jquery_1.default)(`.${identifierUtils_1.ELEMENT_KEY_PREFIX}${elementKey}`).get(0)) === null || _a === void 0 ? void 0 : _a.outerHTML; }),\n        });\n    }\n    return Boolean(changes.length);\n};\nexports.updateCodebaseIds = updateCodebaseIds;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/tempo-devtools/dist/channelMessaging/changeItemFunctions.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/tempo-devtools/dist/channelMessaging/changeLedgerTypes.js":
/*!********************************************************************************!*\
  !*** ./node_modules/tempo-devtools/dist/channelMessaging/changeLedgerTypes.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.reconstructChangeLedgerClass = exports.UnknownChange = exports.RedoChange = exports.UndoChange = exports.EditTextChange = exports.RemoveClassChange = exports.AddClassChange = exports.ChangeTagChange = exports.DuplicateChange = exports.WrapDivChange = exports.ChangePropChange = exports.RemoveJsxChange = exports.MoveJsxChange = exports.AddJsxChange = exports.StylingChange = exports.ChangeLedgerItem = exports.CHANGE_TYPES_WITH_INSTANT_UNDO = exports.ChangeType = exports.StylingFramework = void 0;\nconst tempoElement_1 = __webpack_require__(/*! ./tempoElement */ \"(ssr)/./node_modules/tempo-devtools/dist/channelMessaging/tempoElement.js\");\nconst uuid_1 = __webpack_require__(/*! uuid */ \"(ssr)/./node_modules/uuid/dist/esm-node/index.js\");\n// Matches the file in tempo-devtools\nvar StylingFramework;\n(function (StylingFramework) {\n    StylingFramework[\"INLINE\"] = \"Inline\";\n    StylingFramework[\"CSS\"] = \"CSS\";\n    StylingFramework[\"TAILWIND\"] = \"Tailwind\";\n})(StylingFramework || (exports.StylingFramework = StylingFramework = {}));\nvar ChangeType;\n(function (ChangeType) {\n    ChangeType[\"STYLING\"] = \"STYLING\";\n    ChangeType[\"ADD_JSX\"] = \"ADD_JSX\";\n    ChangeType[\"MOVE_JSX\"] = \"MOVE_JSX\";\n    ChangeType[\"REMOVE_JSX\"] = \"REMOVE_JSX\";\n    ChangeType[\"CHANGE_PROP\"] = \"CHANGE_PROP\";\n    ChangeType[\"ADD_CLASS\"] = \"ADD_CLASS\";\n    ChangeType[\"REMOVE_CLASS\"] = \"REMOVE_CLASS\";\n    ChangeType[\"EDIT_TEXT\"] = \"EDIT_TEXT\";\n    ChangeType[\"WRAP_DIV\"] = \"WRAP_DIV\";\n    ChangeType[\"CHANGE_TAG\"] = \"CHANGE_TAG\";\n    ChangeType[\"DUPLICATE\"] = \"DUPLICATE\";\n    ChangeType[\"UNDO\"] = \"UNDO\";\n    ChangeType[\"REDO\"] = \"REDO\";\n    ChangeType[\"UNKNOWN\"] = \"UNKNOWN\";\n})(ChangeType || (exports.ChangeType = ChangeType = {}));\n// Make sure to match this in both tempo-devtools & ** tempo-api ** (in the undo/redo file)\nexports.CHANGE_TYPES_WITH_INSTANT_UNDO = [\n    ChangeType.REMOVE_JSX,\n    ChangeType.ADD_CLASS,\n    ChangeType.STYLING,\n];\nclass ChangeLedgerItem {\n    constructor(type, changeName, changeFields, id) {\n        this.prevIdToNewIdMap = {};\n        this.id = id || (0, uuid_1.v4)();\n        this.type = type;\n        this.changeFields = changeFields;\n        this.changeName = changeName;\n        this._consumed = false;\n        this._failed = false;\n        this._instantUpdateSent = false;\n        this._instantUpdateFinished = false;\n        this._instantUpdateSuccessful = false;\n        this._sendInstantUpdate = true;\n        this.canInstantUpdateWhileFlushing = false;\n        this._apiPromise = new Promise((resolve, reject) => {\n            this._resolveApi = resolve;\n            this._rejectApi = reject;\n        });\n    }\n    resolveApi(data) {\n        var _a;\n        (_a = this._resolveApi) === null || _a === void 0 ? void 0 : _a.call(this, data);\n    }\n    rejectApi(reason) {\n        var _a;\n        if (this._apiRejectionAdded) {\n            (_a = this._rejectApi) === null || _a === void 0 ? void 0 : _a.call(this, reason);\n        }\n    }\n    needsToSendInstantUpdate() {\n        return !this._instantUpdateSent && this._sendInstantUpdate;\n    }\n    markInstantUpdateSent() {\n        this._instantUpdateSent = true;\n    }\n    markInstantUpdateFinished(instantUpdateData, instantUpdateSuccessful) {\n        this._instantUpdateFinished = true;\n        this._instantUpdateSuccessful = instantUpdateSuccessful;\n        this._instantUpdateData = instantUpdateData;\n    }\n    getInstantUpdateData() {\n        return this._instantUpdateData;\n    }\n    wasInstantUpdateSuccessful() {\n        return this._instantUpdateSuccessful;\n    }\n    isInstantUpdateFinished() {\n        return this._instantUpdateFinished;\n    }\n    markProcessedSucceeded() {\n        this._consumed = true;\n    }\n    markProcessedFailed() {\n        this._failed = true;\n        this._consumed = true;\n    }\n    isFailed() {\n        return this._failed;\n    }\n    needToProcessChange() {\n        return !this._consumed;\n    }\n    onApiResolve(onFulfilled) {\n        return this._apiPromise.then(onFulfilled);\n    }\n    onApiReject(onRejected) {\n        this._apiRejectionAdded = true;\n        return this._apiPromise.catch(onRejected);\n    }\n    doNotSendInstantUpdate() {\n        this._sendInstantUpdate = false;\n    }\n    // For selecting/deslecting new elements after instant updates\n    clearSelectedElementsAfterInstantUpdate() {\n        this.elementKeyToSelectAfterInstantUpdate = null;\n        this.elementKeysToMultiselectAfterInstantUpdate = null;\n    }\n    setSelectedElementsAfterInstantUpdate(selectedElementKey, multiselectedElementKeys) {\n        this.elementKeyToSelectAfterInstantUpdate = selectedElementKey;\n        this.elementKeysToMultiselectAfterInstantUpdate = multiselectedElementKeys;\n    }\n    clearSelectedElementsAfterUndoInstantUpdate() {\n        this.elementKeyToSelectAfterUndoInstantUpdate = null;\n        this.elementKeysToMultiselectAfterUndoInstantUpdate = null;\n    }\n    setSelectedElementsAfterUndoInstantUpdate(selectedElementKey, multiselectedElementKeys) {\n        this.elementKeyToSelectAfterUndoInstantUpdate = selectedElementKey;\n        this.elementKeysToMultiselectAfterUndoInstantUpdate =\n            multiselectedElementKeys;\n    }\n    getElementKeyToSelectAfterInstantUpdate() {\n        return this.elementKeyToSelectAfterInstantUpdate;\n    }\n    getElementKeysToMultiselectAfterInstantUpdate() {\n        return this.elementKeysToMultiselectAfterInstantUpdate;\n    }\n    getElementKeyToSelectAfterUndoInstantUpdate() {\n        return this.elementKeyToSelectAfterUndoInstantUpdate;\n    }\n    getElementKeysToMultiselectAfterUndoInstantUpdate() {\n        return this.elementKeysToMultiselectAfterUndoInstantUpdate;\n    }\n    applyAllCodebaseIdChanges(prevIdToNewIdMap) {\n        var _a, _b;\n        const getNewKey = (prevKey) => {\n            if (!prevKey) {\n                return null;\n            }\n            const tempoElement = tempoElement_1.TempoElement.fromKey(prevKey);\n            const codebaseId = tempoElement.codebaseId;\n            const newCodebaseId = prevIdToNewIdMap[codebaseId];\n            if (newCodebaseId) {\n                return new tempoElement_1.TempoElement(newCodebaseId, tempoElement.storyboardId, tempoElement.uniquePath).getKey();\n            }\n            return null;\n        };\n        /*\n         * Instant update fields\n         */\n        if (this.elementKeyToSelectAfterInstantUpdate) {\n            const newElementKey = getNewKey(this.elementKeyToSelectAfterInstantUpdate);\n            this.elementKeyToSelectAfterInstantUpdate =\n                newElementKey || this.elementKeyToSelectAfterInstantUpdate;\n        }\n        if (this.elementKeysToMultiselectAfterInstantUpdate) {\n            this.elementKeysToMultiselectAfterInstantUpdate =\n                (_a = this.elementKeysToMultiselectAfterInstantUpdate) === null || _a === void 0 ? void 0 : _a.map((key) => {\n                    const newKey = getNewKey(key);\n                    return newKey || key;\n                });\n        }\n        /*\n         * Undo instant update fields\n         */\n        if (this.elementKeyToSelectAfterUndoInstantUpdate) {\n            const newElementKey = getNewKey(this.elementKeyToSelectAfterUndoInstantUpdate);\n            this.elementKeyToSelectAfterUndoInstantUpdate =\n                newElementKey || this.elementKeyToSelectAfterUndoInstantUpdate;\n        }\n        if (this.elementKeysToMultiselectAfterUndoInstantUpdate) {\n            this.elementKeysToMultiselectAfterUndoInstantUpdate =\n                (_b = this.elementKeysToMultiselectAfterUndoInstantUpdate) === null || _b === void 0 ? void 0 : _b.map((key) => {\n                    const newKey = getNewKey(key);\n                    return newKey || key;\n                });\n        }\n        this.applyCodebaseIdChanges(prevIdToNewIdMap);\n    }\n}\nexports.ChangeLedgerItem = ChangeLedgerItem;\nclass StylingChange extends ChangeLedgerItem {\n    constructor(changeFields, id) {\n        super(ChangeType.STYLING, 'Styling', changeFields, id);\n        // Allow instant updates while flushing\n        this.canInstantUpdateWhileFlushing = true;\n    }\n    prepareApiRequest(canvasId, treeElementLookup, activeCanvas) {\n        const { codebaseId, stylingChanges, stylingFramework, modifiers, customProperties, } = this.changeFields;\n        return {\n            urlPath: `canvases/${canvasId}/parseAndMutate/mutate/styling`,\n            body: {\n                reactElement: treeElementLookup[codebaseId],\n                styling: stylingChanges,\n                stylingFramework,\n                modifiers,\n                customProperties,\n            },\n        };\n    }\n    applyCodebaseIdChanges(prevIdToNewIdMap) {\n        const newCodebaseId = prevIdToNewIdMap[this.changeFields.codebaseId];\n        if (newCodebaseId) {\n            this.changeFields.codebaseId = newCodebaseId;\n        }\n    }\n}\nexports.StylingChange = StylingChange;\nclass AddJsxChange extends ChangeLedgerItem {\n    constructor(changeFields, id) {\n        super(ChangeType.ADD_JSX, 'Add Element', changeFields, id);\n    }\n    prepareApiRequest(canvasId, treeElementLookup, activeCanvas) {\n        const { codebaseIdToAddTo, beforeCodebaseId, afterCodebaseId, addCodebaseId, addNativeTag, fileContentsToSourceFrom, fileContentsSourceFilename, propsToSet, deletedStoryboardId, htmlForInstantUpdate, } = this.changeFields;\n        const body = {\n            destinationElement: treeElementLookup[codebaseIdToAddTo],\n            beforeElement: treeElementLookup[beforeCodebaseId || ''],\n            afterElement: treeElementLookup[afterCodebaseId || ''],\n            newElement: {},\n            canvasId: activeCanvas.id,\n            deletedStoryboardId,\n            fileContentsToSourceFrom,\n            fileContentsSourceFilename,\n        };\n        if (addCodebaseId) {\n            body.newElement = Object.assign({}, treeElementLookup[addCodebaseId]);\n        }\n        else if (addNativeTag) {\n            body.newElement['type'] = 'native';\n            body.newElement['nativeTag'] = addNativeTag;\n            body.newElement['componentName'] = addNativeTag;\n        }\n        if (propsToSet) {\n            body.newElement['propsToSet'] = propsToSet;\n        }\n        if (!Object.keys(body.newElement).length) {\n            delete body.newElement;\n        }\n        const hasInstantUpdate = Boolean(htmlForInstantUpdate);\n        body['hasInstantUpdate'] = hasInstantUpdate;\n        return {\n            urlPath: `canvases/${canvasId}/parseAndMutate/mutate/addJsxElement`,\n            body,\n            // Only show the success message if we do not have instant updates\n            successToastMessage: hasInstantUpdate ? undefined : 'Successfully added',\n        };\n    }\n    applyCodebaseIdChanges(prevIdToNewIdMap) {\n        const fieldsToApply = [\n            'codebaseIdToAddTo',\n            'beforeCodebaseId',\n            'afterCodebaseId',\n            'addCodebaseId',\n        ];\n        fieldsToApply.forEach((field) => {\n            // @ts-ignore\n            const newCodebaseId = prevIdToNewIdMap[this.changeFields[field]];\n            if (newCodebaseId) {\n                // @ts-ignore\n                this.changeFields[field] = newCodebaseId;\n            }\n        });\n    }\n}\nexports.AddJsxChange = AddJsxChange;\nclass MoveJsxChange extends ChangeLedgerItem {\n    constructor(changeFields, id) {\n        super(ChangeType.MOVE_JSX, 'Move Element', changeFields, id);\n    }\n    prepareApiRequest(canvasId, treeElementLookup, activeCanvas) {\n        const { codebaseIdToMoveTo, codebaseIdToMove, afterCodebaseId, beforeCodebaseId, expectedCurrentParentCodebaseId, } = this.changeFields;\n        return {\n            urlPath: `canvases/${canvasId}/parseAndMutate/mutate/moveJsxElement`,\n            body: {\n                elementToMove: treeElementLookup[codebaseIdToMove],\n                newContainerElement: treeElementLookup[codebaseIdToMoveTo],\n                afterElement: treeElementLookup[afterCodebaseId || ''],\n                beforeElement: treeElementLookup[beforeCodebaseId || ''],\n                expectedCurrentParent: treeElementLookup[expectedCurrentParentCodebaseId || ''],\n            },\n        };\n    }\n    applyCodebaseIdChanges(prevIdToNewIdMap) {\n        const fieldsToApply = [\n            'codebaseIdToMoveTo',\n            'codebaseIdToMove',\n            'afterCodebaseId',\n            'beforeCodebaseId',\n            'expectedCurrentParentCodebaseId',\n        ];\n        fieldsToApply.forEach((field) => {\n            // @ts-ignore\n            const newCodebaseId = prevIdToNewIdMap[this.changeFields[field]];\n            if (newCodebaseId) {\n                // @ts-ignore\n                this.changeFields[field] = newCodebaseId;\n            }\n        });\n    }\n}\nexports.MoveJsxChange = MoveJsxChange;\nclass RemoveJsxChange extends ChangeLedgerItem {\n    constructor(changeFields, id) {\n        // Deduplicate the codebaseIdsToRemove\n        changeFields.codebaseIdsToRemove = Array.from(new Set(changeFields.codebaseIdsToRemove));\n        super(ChangeType.REMOVE_JSX, 'Delete Element', changeFields, id);\n    }\n    prepareApiRequest(canvasId, treeElementLookup, activeCanvas) {\n        const { codebaseIdsToRemove } = this.changeFields;\n        return {\n            urlPath: `canvases/${canvasId}/parseAndMutate/mutate/removeJsxElement`,\n            body: {\n                elementsToRemove: codebaseIdsToRemove\n                    .map((codebaseId) => treeElementLookup[codebaseId])\n                    .filter((element) => element),\n            },\n        };\n    }\n    applyCodebaseIdChanges(prevIdToNewIdMap) {\n        this.changeFields.codebaseIdsToRemove =\n            this.changeFields.codebaseIdsToRemove.map((codebaseId) => {\n                const newCodebaseId = prevIdToNewIdMap[codebaseId];\n                if (newCodebaseId) {\n                    return newCodebaseId;\n                }\n                return codebaseId;\n            });\n    }\n}\nexports.RemoveJsxChange = RemoveJsxChange;\nclass ChangePropChange extends ChangeLedgerItem {\n    constructor(changeFields, id) {\n        super(ChangeType.CHANGE_PROP, 'Change Prop', changeFields, id);\n    }\n    prepareApiRequest(canvasId, treeElementLookup, activeCanvas) {\n        const { codebaseIdToChange, propName, propValue } = this.changeFields;\n        return {\n            urlPath: `canvases/${canvasId}/parseAndMutate/mutate/changePropValue`,\n            body: {\n                elementToModify: treeElementLookup[codebaseIdToChange],\n                propName,\n                propValue,\n            },\n            successToastMessage: 'Prop changed',\n        };\n    }\n    applyCodebaseIdChanges(prevIdToNewIdMap) {\n        const newCodebaseId = prevIdToNewIdMap[this.changeFields.codebaseIdToChange];\n        if (newCodebaseId) {\n            this.changeFields.codebaseIdToChange = newCodebaseId;\n        }\n    }\n}\nexports.ChangePropChange = ChangePropChange;\nclass WrapDivChange extends ChangeLedgerItem {\n    constructor(changeFields, id) {\n        // Deduplicate the codebaseIdsToWrap\n        changeFields.codebaseIdsToWrap = Array.from(new Set(changeFields.codebaseIdsToWrap));\n        super(ChangeType.WRAP_DIV, 'Wrap In Div', changeFields, id);\n    }\n    prepareApiRequest(canvasId, treeElementLookup, activeCanvas) {\n        const { codebaseIdsToWrap } = this.changeFields;\n        return {\n            urlPath: `canvases/${canvasId}/parseAndMutate/mutate/wrapInDiv`,\n            body: {\n                reactElements: codebaseIdsToWrap.map((codebaseId) => treeElementLookup[codebaseId]),\n            },\n        };\n    }\n    applyCodebaseIdChanges(prevIdToNewIdMap) {\n        this.changeFields.codebaseIdsToWrap =\n            this.changeFields.codebaseIdsToWrap.map((codebaseId) => {\n                const newCodebaseId = prevIdToNewIdMap[codebaseId];\n                if (newCodebaseId) {\n                    return newCodebaseId;\n                }\n                return codebaseId;\n            });\n    }\n}\nexports.WrapDivChange = WrapDivChange;\nclass DuplicateChange extends ChangeLedgerItem {\n    constructor(changeFields, id) {\n        // Deduplicate the codebaseIdsToDuplicate\n        changeFields.codebaseIdsToDuplicate = Array.from(new Set(changeFields.codebaseIdsToDuplicate));\n        super(ChangeType.DUPLICATE, 'Duplicate', changeFields, id);\n    }\n    prepareApiRequest(canvasId, treeElementLookup, activeCanvas) {\n        const { codebaseIdsToDuplicate } = this.changeFields;\n        return {\n            urlPath: `canvases/${canvasId}/parseAndMutate/mutate/duplicate`,\n            body: {\n                reactElements: codebaseIdsToDuplicate.map((codebaseId) => treeElementLookup[codebaseId]),\n            },\n        };\n    }\n    applyCodebaseIdChanges(prevIdToNewIdMap) {\n        this.changeFields.codebaseIdsToDuplicate =\n            this.changeFields.codebaseIdsToDuplicate.map((codebaseId) => {\n                const newCodebaseId = prevIdToNewIdMap[codebaseId];\n                if (newCodebaseId) {\n                    return newCodebaseId;\n                }\n                return codebaseId;\n            });\n    }\n}\nexports.DuplicateChange = DuplicateChange;\nclass ChangeTagChange extends ChangeLedgerItem {\n    constructor(changeFields, id) {\n        super(ChangeType.CHANGE_TAG, 'Change Tag Name', changeFields, id);\n    }\n    prepareApiRequest(canvasId, treeElementLookup, activeCanvas) {\n        const { codebaseIdToChange, newTagName } = this.changeFields;\n        return {\n            urlPath: `canvases/${canvasId}/parseAndMutate/mutate/changeElementTag`,\n            body: {\n                elementToModify: treeElementLookup[codebaseIdToChange],\n                newTag: newTagName,\n            },\n        };\n    }\n    applyCodebaseIdChanges(prevIdToNewIdMap) {\n        const newCodebaseId = prevIdToNewIdMap[this.changeFields.codebaseIdToChange];\n        if (newCodebaseId) {\n            this.changeFields.codebaseIdToChange = newCodebaseId;\n        }\n    }\n}\nexports.ChangeTagChange = ChangeTagChange;\nclass AddClassChange extends ChangeLedgerItem {\n    constructor(changeFields, id) {\n        super(ChangeType.ADD_CLASS, 'Add Class', changeFields, id);\n        this.canInstantUpdateWhileFlushing = true;\n    }\n    prepareApiRequest(canvasId, treeElementLookup, activeCanvas) {\n        const { codebaseIdToAddClass, className, addingTailwindClass, modifiers, customProperties, } = this.changeFields;\n        return {\n            urlPath: `canvases/${canvasId}/parseAndMutate/mutate/addClass`,\n            body: {\n                reactElement: treeElementLookup[codebaseIdToAddClass],\n                className,\n                stylingFramework: addingTailwindClass\n                    ? StylingFramework.TAILWIND\n                    : null,\n                modifiers,\n                customProperties,\n            },\n        };\n    }\n    applyCodebaseIdChanges(prevIdToNewIdMap) {\n        const newCodebaseId = prevIdToNewIdMap[this.changeFields.codebaseIdToAddClass];\n        if (newCodebaseId) {\n            this.changeFields.codebaseIdToAddClass = newCodebaseId;\n        }\n    }\n}\nexports.AddClassChange = AddClassChange;\nclass RemoveClassChange extends ChangeLedgerItem {\n    constructor(changeFields, id) {\n        super(ChangeType.REMOVE_CLASS, 'Remove Class', changeFields, id);\n    }\n    prepareApiRequest(canvasId, treeElementLookup, activeCanvas) {\n        const { codebaseIdToRemoveClass, className } = this.changeFields;\n        return {\n            urlPath: `canvases/${canvasId}/parseAndMutate/mutate/removeClass`,\n            body: {\n                reactElement: treeElementLookup[codebaseIdToRemoveClass],\n                className,\n            },\n        };\n    }\n    applyCodebaseIdChanges(prevIdToNewIdMap) {\n        const newCodebaseId = prevIdToNewIdMap[this.changeFields.codebaseIdToRemoveClass];\n        if (newCodebaseId) {\n            this.changeFields.codebaseIdToRemoveClass = newCodebaseId;\n        }\n    }\n}\nexports.RemoveClassChange = RemoveClassChange;\nclass EditTextChange extends ChangeLedgerItem {\n    constructor(changeFields, id) {\n        super(ChangeType.EDIT_TEXT, 'Edit Text', changeFields, id);\n    }\n    prepareApiRequest(canvasId, treeElementLookup, activeCanvas) {\n        const { codebaseIdToEditText, newText, oldText } = this.changeFields;\n        return {\n            urlPath: `canvases/${canvasId}/parseAndMutate/mutate/editText`,\n            body: {\n                element: treeElementLookup[codebaseIdToEditText],\n                newText,\n                oldText,\n            },\n        };\n    }\n    applyCodebaseIdChanges(prevIdToNewIdMap) {\n        const newCodebaseId = prevIdToNewIdMap[this.changeFields.codebaseIdToEditText];\n        if (newCodebaseId) {\n            this.changeFields.codebaseIdToEditText = newCodebaseId;\n        }\n    }\n}\nexports.EditTextChange = EditTextChange;\nclass UndoChange extends ChangeLedgerItem {\n    constructor(changeFields, id) {\n        var _a;\n        super(ChangeType.UNDO, 'Undo', changeFields, id);\n        if ((_a = changeFields.changeToUndo) === null || _a === void 0 ? void 0 : _a.canInstantUpdateWhileFlushing) {\n            this.canInstantUpdateWhileFlushing = true;\n        }\n    }\n    prepareApiRequest(canvasId, treeElementLookup, activeCanvas) {\n        const { changeToUndo } = this.changeFields;\n        return {\n            urlPath: `canvases/${canvasId}/parseAndMutate/activities/undoChangeToFiles`,\n            body: {\n                latestUuid: changeToUndo.activityId,\n            },\n        };\n    }\n    applyCodebaseIdChanges(prevIdToNewIdMap) {\n        // Do nothing\n    }\n}\nexports.UndoChange = UndoChange;\nclass RedoChange extends ChangeLedgerItem {\n    constructor(changeFields, id) {\n        var _a;\n        super(ChangeType.REDO, 'Redo', changeFields, id);\n        if ((_a = changeFields.changeToRedo) === null || _a === void 0 ? void 0 : _a.canInstantUpdateWhileFlushing) {\n            this.canInstantUpdateWhileFlushing = true;\n        }\n    }\n    prepareApiRequest(canvasId, treeElementLookup, activeCanvas) {\n        const { changeToRedo } = this.changeFields;\n        return {\n            urlPath: `canvases/${canvasId}/parseAndMutate/activities/redoChangeToFiles`,\n            body: {\n                changeToRedoId: changeToRedo.activityId,\n            },\n        };\n    }\n    applyCodebaseIdChanges(prevIdToNewIdMap) {\n        // Do nothing\n    }\n}\nexports.RedoChange = RedoChange;\nclass UnknownChange extends ChangeLedgerItem {\n    constructor(changeFields, id) {\n        super(ChangeType.UNKNOWN, '', changeFields, id);\n        // Do not process unknown changes\n        this.markProcessedSucceeded();\n        this.doNotSendInstantUpdate();\n    }\n    prepareApiRequest(canvasId, treeElementLookup, activeCanvas) {\n        throw Error('Unsupported operation');\n        // For typing\n        return {\n            urlPath: ``,\n            body: {},\n        };\n    }\n    applyCodebaseIdChanges(prevIdToNewIdMap) {\n        // Do nothing\n    }\n}\nexports.UnknownChange = UnknownChange;\n/**\n * When serializing a change ledger item to a plain JS object, the class functions\n * are lost. This recreates the change item that was lost\n */\nconst reconstructChangeLedgerClass = (plainJsObject) => {\n    if (!plainJsObject || !plainJsObject.type) {\n        return null;\n    }\n    const changeType = plainJsObject.type;\n    const changeFields = plainJsObject.changeFields;\n    const id = plainJsObject.id;\n    const getChangeForType = () => {\n        switch (changeType) {\n            case ChangeType.STYLING:\n                return new StylingChange(changeFields, id);\n            case ChangeType.ADD_JSX:\n                return new AddJsxChange(changeFields, id);\n            case ChangeType.REMOVE_JSX:\n                return new RemoveJsxChange(changeFields, id);\n            case ChangeType.MOVE_JSX:\n                return new MoveJsxChange(changeFields, id);\n            case ChangeType.CHANGE_PROP:\n                return new ChangePropChange(changeFields, id);\n            case ChangeType.ADD_CLASS:\n                return new AddClassChange(changeFields, id);\n            case ChangeType.REMOVE_CLASS:\n                return new RemoveClassChange(changeFields, id);\n            case ChangeType.WRAP_DIV:\n                return new WrapDivChange(changeFields, id);\n            case ChangeType.CHANGE_TAG:\n                return new ChangeTagChange(changeFields, id);\n            case ChangeType.DUPLICATE:\n                return new DuplicateChange(changeFields, id);\n            case ChangeType.EDIT_TEXT:\n                return new EditTextChange(changeFields, id);\n            case ChangeType.UNDO:\n                changeFields.changeToUndo = (0, exports.reconstructChangeLedgerClass)(changeFields.changeToUndo);\n                return new UndoChange(changeFields, id);\n            case ChangeType.REDO:\n                changeFields.changeToRedo = (0, exports.reconstructChangeLedgerClass)(changeFields.changeToRedo);\n                return new RedoChange(changeFields, id);\n            case ChangeType.UNKNOWN:\n                return new UnknownChange(changeFields, id);\n            default:\n                throw new Error(`Unknown change type: ${changeType}`);\n        }\n    };\n    // Set all the other fields on the change object\n    const change = getChangeForType();\n    Object.keys(plainJsObject).forEach((key) => {\n        if (['type', 'changeFields', 'id'].includes(key)) {\n            return;\n        }\n        // @ts-ignore\n        change[key] = plainJsObject[key];\n    });\n    return change;\n};\nexports.reconstructChangeLedgerClass = reconstructChangeLedgerClass;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/tempo-devtools/dist/channelMessaging/changeLedgerTypes.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/tempo-devtools/dist/channelMessaging/channelMessagingFunctions.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/tempo-devtools/dist/channelMessaging/channelMessagingFunctions.js ***!
  \****************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.initChannelMessagingFunctions = void 0;\nconst identifierUtils_1 = __webpack_require__(/*! ./identifierUtils */ \"(ssr)/./node_modules/tempo-devtools/dist/channelMessaging/identifierUtils.js\");\nconst sessionStorageUtils_1 = __webpack_require__(/*! ./sessionStorageUtils */ \"(ssr)/./node_modules/tempo-devtools/dist/channelMessaging/sessionStorageUtils.js\");\nconst navTreeUtils_1 = __webpack_require__(/*! ./navTreeUtils */ \"(ssr)/./node_modules/tempo-devtools/dist/channelMessaging/navTreeUtils.js\");\n// @ts-ignore\nconst jquery_1 = __importDefault(__webpack_require__(/*! jquery */ \"(ssr)/./node_modules/jquery/dist/jquery.js\"));\nconst lodash_1 = __importDefault(__webpack_require__(/*! lodash */ \"(ssr)/./node_modules/lodash/lodash.js\"));\nconst outlineUtils_1 = __webpack_require__(/*! ./outlineUtils */ \"(ssr)/./node_modules/tempo-devtools/dist/channelMessaging/outlineUtils.js\");\nconst cssFunctions_1 = __webpack_require__(/*! ./cssFunctions */ \"(ssr)/./node_modules/tempo-devtools/dist/channelMessaging/cssFunctions.js\");\nconst constantsAndTypes_1 = __webpack_require__(/*! ./constantsAndTypes */ \"(ssr)/./node_modules/tempo-devtools/dist/channelMessaging/constantsAndTypes.js\");\nconst changeItemFunctions_1 = __webpack_require__(/*! ./changeItemFunctions */ \"(ssr)/./node_modules/tempo-devtools/dist/channelMessaging/changeItemFunctions.js\");\nconst resqUtils_1 = __webpack_require__(/*! ./resqUtils */ \"(ssr)/./node_modules/tempo-devtools/dist/channelMessaging/resqUtils.js\");\nconst tempoElement_1 = __webpack_require__(/*! ./tempoElement */ \"(ssr)/./node_modules/tempo-devtools/dist/channelMessaging/tempoElement.js\");\nconst editTextUtils_1 = __webpack_require__(/*! ./editTextUtils */ \"(ssr)/./node_modules/tempo-devtools/dist/channelMessaging/editTextUtils.js\");\nconst PIXELS_TO_MOVE_BEFORE_DRAG = 20;\nconst IMMEDIATELY_REMOVE_POINTER_LOCK = 'IMMEDIATELY_REMOVE_POINTER_LOCK';\nconst LAST_NAV_TREE_REFRESH_TIME = 'LAST_NAV_TREE_REFRESH_TIME';\n// TODO: Change all of this to be a react wrapper library\nconst initChannelMessagingFunctions = () => {\n    // @ts-ignore\n    String.prototype.hashCode = function () {\n        var hash = 0, i, chr;\n        if (this.length === 0)\n            return hash;\n        for (i = 0; i < this.length; i++) {\n            chr = this.charCodeAt(i);\n            hash = (hash << 5) - hash + chr;\n            hash |= 0; // Convert to 32bit integer\n        }\n        return hash;\n    };\n    // We want to make event listeners non-passive, and to do so have to check\n    // that browsers support EventListenerOptions in the first place.\n    // https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support\n    let passiveSupported = false;\n    const makePassiveEventOption = () => {\n        try {\n            const options = {\n                get passive() {\n                    // This function will be called when the browser\n                    //   attempts to access the passive property.\n                    passiveSupported = true;\n                    return false;\n                },\n            };\n            return options;\n        }\n        catch (err) {\n            passiveSupported = false;\n            return passiveSupported;\n        }\n    };\n    /**\n     * Taken from: https://stackoverflow.com/questions/3219758/detect-changes-in-the-dom\n     *\n     * Returns the function to disconnect the observer\n     */\n    const observeDOM = (function () {\n        // @ts-ignore\n        var MutationObserver = \n        // @ts-ignore\n        window.MutationObserver || window.WebKitMutationObserver;\n        return function (obj, callback) {\n            if (!obj || obj.nodeType !== 1)\n                return () => { };\n            if (MutationObserver) {\n                // define a new observer\n                var mutationObserver = new MutationObserver(callback);\n                // have the observer observe foo for changes in children\n                mutationObserver.observe(obj, {\n                    childList: true,\n                    subtree: true,\n                    attributes: true,\n                });\n                return () => {\n                    mutationObserver.disconnect();\n                };\n            }\n            // browser support fallback\n            // @ts-ignore\n            else if (window.addEventListener) {\n                obj.addEventListener('DOMNodeInserted', callback, false);\n                obj.addEventListener('DOMNodeRemoved', callback, false);\n                return () => {\n                    obj.removeEventListener('DOMNodeInserted', callback, false);\n                    obj.removeEventListener('DOMNodeRemoved', callback, false);\n                };\n            }\n            return () => { };\n        };\n    })();\n    /**\n     * When selecting in normal mode (not meta key), can select one level down, a sibling\n     * or a parent of the selected element\n     */\n    const getSelectableNavNode = (e) => {\n        const selectedElementKey = (0, sessionStorageUtils_1.getMemoryStorageItem)(sessionStorageUtils_1.SELECTED_ELEMENT_KEY);\n        const selectedElement = tempoElement_1.TempoElement.fromKey(selectedElementKey);\n        const elementKeyToNavNode = (0, sessionStorageUtils_1.getMemoryStorageItem)(sessionStorageUtils_1.ELEMENT_KEY_TO_NAV_NODE);\n        // Move up the tree until you find the first valid nav node\n        let firstNavNode = null;\n        let searchNode = e.target;\n        while (searchNode && !firstNavNode) {\n            firstNavNode =\n                elementKeyToNavNode[(0, identifierUtils_1.getElementKeyFromNode)(searchNode) || ''];\n            searchNode = searchNode.parentElement;\n        }\n        if (!firstNavNode) {\n            return constantsAndTypes_1.SELECT_OR_HOVER_STORYBOARD;\n        }\n        const isNavNodeMatch = (navTreeNode) => {\n            var _a, _b, _c, _d;\n            if (selectedElement.isEmpty()) {\n                // This function cannot be called if there is no selected element, see code logic below the function\n                throw Error('No selected element when isNavNodeMatch called');\n            }\n            if (!navTreeNode) {\n                return false;\n            }\n            // If there is no codebase ID it should not be selectable as there is nothing we can do with it\n            if (!navTreeNode.tempoElement.codebaseId.startsWith('tempo-') ||\n                navTreeNode.tempoElement.codebaseId === navTreeUtils_1.SKIP_ROOT_CODEBASE_ID) {\n                return false;\n            }\n            // If it matches, we already passed all possible children, so re-select it\n            if (selectedElement.isEqual(navTreeNode.tempoElement)) {\n                return true;\n            }\n            // Any parent is ok to select\n            if (navTreeNode.tempoElement.isParentOf(selectedElement)) {\n                return true;\n            }\n            // Check parents\n            // Pick the first parent with a codebase ID\n            let parent = navTreeNode.parent;\n            while (parent && !parent.tempoElement.codebaseId.startsWith('tempo-')) {\n                parent = parent.parent;\n            }\n            // One level down\n            if ((_a = parent === null || parent === void 0 ? void 0 : parent.tempoElement) === null || _a === void 0 ? void 0 : _a.isEqual(selectedElement)) {\n                return true;\n            }\n            // Sibling of any parent\n            const selectedNode = elementKeyToNavNode[selectedElement.getKey()];\n            if (selectedNode &&\n                ((_d = (_c = (_b = navTreeNode.parent) === null || _b === void 0 ? void 0 : _b.children) === null || _c === void 0 ? void 0 : _c.includes) === null || _d === void 0 ? void 0 : _d.call(_c, selectedNode))) {\n                return true;\n            }\n            return false;\n        };\n        let foundNavNode = null;\n        let searchNavNode = firstNavNode;\n        while (searchNavNode) {\n            if (!selectedElement.isEmpty() && !selectedElement.isStoryboard()) {\n                // If there is a selected element key loop from this element up the stack to find the element that is the direct child\n                // of the expected selected element, so that you can only hover one level deeper than you've selected\n                if (isNavNodeMatch(searchNavNode)) {\n                    foundNavNode = searchNavNode;\n                    // Exit the loop as we found the node that matches\n                    break;\n                }\n            }\n            else {\n                // If there is no selected element key, or the selection is the storyboard itself, loop up to the top-most element with a codebase ID\n                if (searchNavNode.tempoElement.codebaseId &&\n                    searchNavNode.tempoElement.codebaseId.startsWith('tempo-')) {\n                    foundNavNode = searchNavNode;\n                    // Note: we do not exit the loop here as we want to keep searching for the top-most element\n                }\n            }\n            searchNavNode = searchNavNode.parent;\n        }\n        return foundNavNode || null;\n    };\n    const onPointerOver = (e, parentPort, storyboardId, selectBottomMostElement) => {\n        const passedThrough = passThroughEventsIfNeeded(e, parentPort, storyboardId);\n        const editingTextInfo = (0, editTextUtils_1.getEditingInfo)();\n        // Allow on pointer over events if editing (so we can click out)\n        if (e.altKey || (passedThrough && !editingTextInfo)) {\n            return;\n        }\n        if ((0, sessionStorageUtils_1.getMemoryStorageItem)('mouseDragContext')) {\n            return;\n        }\n        const currentHoveredKey = (0, sessionStorageUtils_1.getMemoryStorageItem)(sessionStorageUtils_1.HOVERED_ELEMENT_KEY);\n        const elementKeyToNavNode = (0, sessionStorageUtils_1.getMemoryStorageItem)(sessionStorageUtils_1.ELEMENT_KEY_TO_NAV_NODE) || {};\n        let hoveredNavNode;\n        if (e.metaKey || e.ctrlKey || selectBottomMostElement) {\n            const elementKey = (0, identifierUtils_1.getElementKeyFromNode)(e.target);\n            hoveredNavNode = elementKeyToNavNode[elementKey];\n            // Special case -> this is the top-most node so it should trigger a hover on the storyboard\n            if (!hoveredNavNode && e.target.parentNode === document.body) {\n                hoveredNavNode = constantsAndTypes_1.SELECT_OR_HOVER_STORYBOARD;\n            }\n        }\n        else {\n            hoveredNavNode = getSelectableNavNode(e);\n        }\n        const currentSelectedKey = (0, sessionStorageUtils_1.getMemoryStorageItem)(sessionStorageUtils_1.SELECTED_ELEMENT_KEY);\n        const currentSelectedElement = tempoElement_1.TempoElement.fromKey(currentSelectedKey);\n        // If the user is holding shift, only allow selecting siblings\n        if (e.shiftKey && hoveredNavNode && currentSelectedKey) {\n            // Trying to select the entire storyboard, allow only if the other selected element is also a storyboard\n            if (typeof hoveredNavNode === 'string' &&\n                !currentSelectedElement.isStoryboard()) {\n                hoveredNavNode = null;\n            }\n            if (typeof hoveredNavNode !== 'string' &&\n                !(hoveredNavNode === null || hoveredNavNode === void 0 ? void 0 : hoveredNavNode.tempoElement.isSiblingOf(currentSelectedElement))) {\n                hoveredNavNode = null;\n            }\n        }\n        if (!hoveredNavNode) {\n            if (currentHoveredKey !== null) {\n                (0, sessionStorageUtils_1.setMemoryStorageItem)(sessionStorageUtils_1.HOVERED_ELEMENT_KEY, null);\n                parentPort.postMessage({\n                    id: constantsAndTypes_1.FIXED_IFRAME_MESSAGE_IDS.HOVERED_ELEMENT_KEY,\n                    elementKey: null,\n                });\n                (0, outlineUtils_1.updateOutlines)(parentPort, storyboardId);\n            }\n            return;\n        }\n        if (typeof hoveredNavNode === 'string') {\n            if (hoveredNavNode === constantsAndTypes_1.SELECT_OR_HOVER_STORYBOARD) {\n                const storyboardKey = tempoElement_1.TempoElement.forStoryboard(storyboardId).getKey();\n                if (currentHoveredKey !== storyboardKey) {\n                    (0, sessionStorageUtils_1.setMemoryStorageItem)(sessionStorageUtils_1.HOVERED_ELEMENT_KEY, storyboardKey);\n                    parentPort.postMessage({\n                        id: constantsAndTypes_1.FIXED_IFRAME_MESSAGE_IDS.HOVERED_ELEMENT_KEY,\n                        elementKey: storyboardKey,\n                    });\n                    (0, outlineUtils_1.updateOutlines)(parentPort, storyboardId);\n                }\n            }\n            return;\n        }\n        const tempoElementKey = hoveredNavNode.tempoElement.getKey();\n        if (currentHoveredKey !== tempoElementKey) {\n            parentPort.postMessage({\n                id: constantsAndTypes_1.FIXED_IFRAME_MESSAGE_IDS.HOVERED_ELEMENT_KEY,\n                elementKey: tempoElementKey,\n            });\n            (0, sessionStorageUtils_1.setMemoryStorageItem)(sessionStorageUtils_1.HOVERED_ELEMENT_KEY, tempoElementKey);\n            (0, outlineUtils_1.updateOutlines)(parentPort, storyboardId);\n        }\n    };\n    const clearHoveredElements = (parentPort, storyboardId) => {\n        const currentHoveredKey = (0, sessionStorageUtils_1.getMemoryStorageItem)(sessionStorageUtils_1.HOVERED_ELEMENT_KEY);\n        if (!currentHoveredKey) {\n            return;\n        }\n        parentPort.postMessage({\n            id: constantsAndTypes_1.FIXED_IFRAME_MESSAGE_IDS.HOVERED_ELEMENT_KEY,\n            elementKey: null,\n        });\n        (0, sessionStorageUtils_1.setMemoryStorageItem)(sessionStorageUtils_1.HOVERED_ELEMENT_KEY, null);\n        (0, outlineUtils_1.updateOutlines)(parentPort, storyboardId);\n    };\n    const onPointerMove = (e, parentPort, storyboardId) => __awaiter(void 0, void 0, void 0, function* () {\n        var _a;\n        passThroughEventsIfNeeded(e, parentPort, storyboardId);\n        // If no buttons are pressed the drag end event may not have correctly triggered\n        // reset the drag state\n        let mouseDragData = (0, sessionStorageUtils_1.getMemoryStorageItem)('mouseDragContext');\n        if (!e.buttons && mouseDragData) {\n            (0, sessionStorageUtils_1.setMemoryStorageItem)('mouseDragContext', null);\n            if (mouseDragData === null || mouseDragData === void 0 ? void 0 : mouseDragData.dragging) {\n                parentPort.postMessage({\n                    id: constantsAndTypes_1.FIXED_IFRAME_MESSAGE_IDS.DRAG_CANCEL_EVENT,\n                    event: {},\n                });\n            }\n            mouseDragData = null;\n        }\n        const importantFields = {\n            pageX: e.pageX,\n            pageY: e.pageY,\n            clientX: e.clientX,\n            clientY: e.clientY,\n        };\n        (0, sessionStorageUtils_1.setMemoryStorageItem)('mousePos', importantFields);\n        parentPort.postMessage({\n            id: constantsAndTypes_1.FIXED_IFRAME_MESSAGE_IDS.MOUSE_MOVE_EVENT,\n            event: importantFields,\n        });\n        if (mouseDragData && !mouseDragData.dragging) {\n            const zoomPerc = (0, sessionStorageUtils_1.getMemoryStorageItem)('zoomPerc') || 1;\n            const totalMovementPixels = Math.abs(mouseDragData.pageX - e.pageX) +\n                Math.abs(mouseDragData.pageY - e.pageY);\n            // Start the drag event if the user has moved enough\n            if (totalMovementPixels >= PIXELS_TO_MOVE_BEFORE_DRAG / zoomPerc) {\n                // Reselect the parent if there was one to select\n                if (mouseDragData.parentSelectedElementKey) {\n                    const elementKeyToNavNode = (0, sessionStorageUtils_1.getMemoryStorageItem)(sessionStorageUtils_1.ELEMENT_KEY_TO_NAV_NODE) || {};\n                    const navNodeToSelect = elementKeyToNavNode[mouseDragData.parentSelectedElementKey];\n                    if (navNodeToSelect) {\n                        parentPort.postMessage({\n                            id: constantsAndTypes_1.FIXED_IFRAME_MESSAGE_IDS.SELECTED_ELEMENT_KEY,\n                            elementKey: mouseDragData.parentSelectedElementKey,\n                            outerHTML: (_a = (0, jquery_1.default)(`.${identifierUtils_1.ELEMENT_KEY_PREFIX}${mouseDragData.parentSelectedElementKey}`).get(0)) === null || _a === void 0 ? void 0 : _a.outerHTML,\n                        });\n                        (0, sessionStorageUtils_1.setMemoryStorageItem)(sessionStorageUtils_1.SELECTED_ELEMENT_KEY, mouseDragData.parentSelectedElementKey);\n                    }\n                }\n                const aiContextSelection = (0, sessionStorageUtils_1.getMemoryStorageItem)('aiContext');\n                // Don't enable dragging if the AI context is enabled\n                if (!aiContextSelection) {\n                    (0, sessionStorageUtils_1.setMemoryStorageItem)('mouseDragContext', Object.assign(Object.assign({}, mouseDragData), { dragging: true }));\n                    const selectedElementKey = (0, sessionStorageUtils_1.getMemoryStorageItem)(sessionStorageUtils_1.SELECTED_ELEMENT_KEY);\n                    const selectedElement = (0, jquery_1.default)(`.${identifierUtils_1.ELEMENT_KEY_PREFIX}${selectedElementKey}`).get(0);\n                    // Trigger the drag start event\n                    parentPort.postMessage({\n                        id: constantsAndTypes_1.FIXED_IFRAME_MESSAGE_IDS.DRAG_START_EVENT,\n                        event: mouseDragData,\n                        outerHTML: selectedElement === null || selectedElement === void 0 ? void 0 : selectedElement.outerHTML,\n                    });\n                    const bodyObject = (0, jquery_1.default)('body').get(0);\n                    // HACK: March 8, 2024\n                    // Without this workaround events stay inside the iframe so it's not possible to\n                    // track mouse movements outside the iframe when clicking & dragging.\n                    // Set the pointer lock and immediately remove it so that\n                    // the events start to propagate upwards in the outer application.\n                    (0, sessionStorageUtils_1.setMemoryStorageItem)(IMMEDIATELY_REMOVE_POINTER_LOCK, true);\n                    yield (bodyObject === null || bodyObject === void 0 ? void 0 : bodyObject.requestPointerLock());\n                }\n            }\n        }\n        if ((0, sessionStorageUtils_1.getMemoryStorageItem)('mouseDragContext')) {\n            (0, outlineUtils_1.updateOutlines)(parentPort, storyboardId);\n        }\n    });\n    const getParentDomElementForNavNode = (navNode) => {\n        if (!navNode) {\n            return null;\n        }\n        if (!(navNode === null || navNode === void 0 ? void 0 : navNode.isComponent)) {\n            const childDomElement = (0, jquery_1.default)(`.${identifierUtils_1.ELEMENT_KEY_PREFIX}${navNode.tempoElement.getKey()}`).get(0);\n            return childDomElement === null || childDomElement === void 0 ? void 0 : childDomElement.parentElement;\n        }\n        // This is the list of real DOM elements that are at the top level of this component\n        const elementKeyToLookupList = (0, sessionStorageUtils_1.getMemoryStorageItem)(sessionStorageUtils_1.ELEMENT_KEY_TO_LOOKUP_LIST) || {};\n        const lookupList = elementKeyToLookupList[navNode.tempoElement.getKey()] || [];\n        let childDomElement;\n        lookupList.forEach((lookupElementKey) => {\n            if (childDomElement) {\n                return;\n            }\n            childDomElement = (0, jquery_1.default)(`.${identifierUtils_1.ELEMENT_KEY_PREFIX}${lookupElementKey}`).get(0);\n        });\n        return childDomElement === null || childDomElement === void 0 ? void 0 : childDomElement.parentElement;\n    };\n    const onPointerDown = (e, parentPort, storyboardId) => {\n        // This variable determines which button was used\n        // 1 -> left, 2 -> middle, 3 -> right\n        if (e.which !== 1) {\n            return;\n        }\n        // Allow the edit dynamic text button to be clicked\n        if ((0, identifierUtils_1.hasClass)(e.target, identifierUtils_1.EDIT_TEXT_BUTTON)) {\n            return;\n        }\n        const passedThrough = passThroughEventsIfNeeded(e, parentPort, storyboardId);\n        if (passedThrough) {\n            return;\n        }\n        const selectedElementKey = (0, sessionStorageUtils_1.getMemoryStorageItem)(sessionStorageUtils_1.SELECTED_ELEMENT_KEY);\n        const selectedElement = tempoElement_1.TempoElement.fromKey(selectedElementKey);\n        const selectedNavNode = onSelectElement(e, parentPort, storyboardId);\n        const useSelectedIfDragging = !selectedElement.isEmpty() &&\n            selectedElement.isParentOf(selectedNavNode === null || selectedNavNode === void 0 ? void 0 : selectedNavNode.tempoElement);\n        let offsetX, offsetY;\n        if (selectedNavNode === null || selectedNavNode === void 0 ? void 0 : selectedNavNode.pageBoundingBox) {\n            offsetX =\n                selectedNavNode.pageBoundingBox.pageX +\n                    selectedNavNode.pageBoundingBox.width / 2 -\n                    e.pageX;\n            offsetY =\n                selectedNavNode.pageBoundingBox.pageY +\n                    selectedNavNode.pageBoundingBox.height / 2 -\n                    e.pageY;\n        }\n        const importantFields = {\n            pageX: e.pageX,\n            pageY: e.pageY,\n            // The difference between where the user clicked and the center of the element\n            offsetX,\n            offsetY,\n            // Used to reselect the parent if the user starts to move\n            parentSelectedElementKey: useSelectedIfDragging\n                ? selectedElementKey\n                : null,\n        };\n        const elementKeyToNavNode = (0, sessionStorageUtils_1.getMemoryStorageItem)(sessionStorageUtils_1.ELEMENT_KEY_TO_NAV_NODE) || {};\n        // Get the parent element (actual DOM element) that this node is being dragged inside\n        // To do this pick one child element that is being dragged (can be multiple children if the node being dragged is a component),\n        // and get its parent in the DOM\n        const navNodeToUseForDragging = useSelectedIfDragging\n            ? elementKeyToNavNode[selectedElementKey]\n            : selectedNavNode;\n        const parentDomElement = getParentDomElementForNavNode(navNodeToUseForDragging);\n        if (parentDomElement) {\n            importantFields['selectedParentDisplay'] = (0, cssFunctions_1.cssEval)(parentDomElement, 'display');\n            importantFields['selectedParentFlexDirection'] = (0, cssFunctions_1.cssEval)(parentDomElement, 'flex-direction');\n        }\n        const aiContextSelection = (0, sessionStorageUtils_1.getMemoryStorageItem)('aiContext');\n        // Don't enable dragging if the AI context is enabled\n        if (!aiContextSelection) {\n            (0, sessionStorageUtils_1.setMemoryStorageItem)('mouseDragContext', importantFields);\n        }\n        (0, outlineUtils_1.updateOutlines)(parentPort, storyboardId);\n    };\n    const onPointerUp = (e, parentPort, storyboardId) => {\n        passThroughEventsIfNeeded(e, parentPort, storyboardId);\n        const mouseDragData = (0, sessionStorageUtils_1.getMemoryStorageItem)('mouseDragContext');\n        (0, sessionStorageUtils_1.setMemoryStorageItem)('mouseDragContext', null);\n        if (mouseDragData === null || mouseDragData === void 0 ? void 0 : mouseDragData.dragging) {\n            parentPort.postMessage({\n                id: constantsAndTypes_1.FIXED_IFRAME_MESSAGE_IDS.DRAG_END_EVENT,\n                event: {},\n            });\n        }\n        (0, outlineUtils_1.updateOutlines)(parentPort, storyboardId);\n    };\n    const onSelectElement = (e, parentPort, storyboardId) => {\n        var _a, _b, _c;\n        const driveModeEnabled = !!(0, sessionStorageUtils_1.getSessionStorageItem)('driveModeEnabled', storyboardId);\n        if (driveModeEnabled) {\n            return null;\n        }\n        const elementKeyToNavNode = (0, sessionStorageUtils_1.getMemoryStorageItem)(sessionStorageUtils_1.ELEMENT_KEY_TO_NAV_NODE) || {};\n        let selectedNavNode;\n        if (e.metaKey || e.ctrlKey) {\n            const elementKey = (0, identifierUtils_1.getElementKeyFromNode)(e.target);\n            selectedNavNode = elementKeyToNavNode[elementKey];\n            // Special case -> this is the top-most node so it should trigger a select on the storyboard\n            if (!selectedNavNode && e.target.parentNode === document.body) {\n                selectedNavNode = constantsAndTypes_1.SELECT_OR_HOVER_STORYBOARD;\n            }\n        }\n        else {\n            selectedNavNode = getSelectableNavNode(e);\n        }\n        const currentSelectedElementKey = (0, sessionStorageUtils_1.getMemoryStorageItem)(sessionStorageUtils_1.SELECTED_ELEMENT_KEY);\n        // If this is not a valid nav node, it's not something we track - deselect all\n        if (!selectedNavNode) {\n            if (currentSelectedElementKey) {\n                parentPort.postMessage({\n                    id: constantsAndTypes_1.FIXED_IFRAME_MESSAGE_IDS.SELECTED_ELEMENT_KEY,\n                    elementKey: null,\n                });\n                (0, sessionStorageUtils_1.setMemoryStorageItem)(sessionStorageUtils_1.SELECTED_ELEMENT_KEY, null);\n                (0, outlineUtils_1.updateOutlines)(parentPort, storyboardId);\n            }\n            return null;\n        }\n        const currentSelectedElement = tempoElement_1.TempoElement.fromKey(currentSelectedElementKey);\n        const currentMultiSelectedKeys = (0, sessionStorageUtils_1.getMemoryStorageItem)(sessionStorageUtils_1.MULTI_SELECTED_ELEMENT_KEYS) || [];\n        let newSelectedElement = typeof selectedNavNode === 'string'\n            ? tempoElement_1.TempoElement.forStoryboard(storyboardId)\n            : selectedNavNode.tempoElement;\n        let newMultiSelectKeys = [];\n        // If the user is holding shift, check if we can multi-select (something has to be already selected)\n        // Note: this logic generally matches the logic in the iframe slice on tempo-web\n        if (e.shiftKey && currentSelectedElementKey) {\n            // First check if we are deselecting\n            const elementToDeselect = currentMultiSelectedKeys\n                .map((elementKey) => tempoElement_1.TempoElement.fromKey(elementKey))\n                .find((element) => {\n                return (element.isParentOf(newSelectedElement) ||\n                    element.isEqual(newSelectedElement));\n            });\n            if (elementToDeselect) {\n                newMultiSelectKeys = currentMultiSelectedKeys.filter((elementKey) => {\n                    return elementKey !== elementToDeselect.getKey();\n                });\n                // Pick a new element to be the main selected element\n                // Note, if the length is 1, there is logic further down to handle that case explicitly (to exit multiselect mode)\n                if (elementToDeselect.isEqual(currentSelectedElement) &&\n                    newMultiSelectKeys.length > 1) {\n                    parentPort.postMessage({\n                        id: constantsAndTypes_1.FIXED_IFRAME_MESSAGE_IDS.SELECTED_ELEMENT_KEY,\n                        elementKey: newMultiSelectKeys[0],\n                        outerHTML: (_a = (0, jquery_1.default)(`.${identifierUtils_1.ELEMENT_KEY_PREFIX}${newMultiSelectKeys[0]}`).get(0)) === null || _a === void 0 ? void 0 : _a.outerHTML,\n                    });\n                    (0, sessionStorageUtils_1.setMemoryStorageItem)(sessionStorageUtils_1.SELECTED_ELEMENT_KEY, newMultiSelectKeys[0]);\n                }\n                // Check if we can add this element\n            }\n            else if (currentSelectedElement.isSiblingOf(newSelectedElement)) {\n                if (currentMultiSelectedKeys === null || currentMultiSelectedKeys === void 0 ? void 0 : currentMultiSelectedKeys.length) {\n                    newMultiSelectKeys = currentMultiSelectedKeys.concat([\n                        newSelectedElement.getKey(),\n                    ]);\n                }\n                else {\n                    newMultiSelectKeys = [\n                        currentSelectedElementKey,\n                        newSelectedElement.getKey(),\n                    ];\n                }\n            }\n            else {\n                // This case the user is trying to multiselect but it's not something that's allowed, just return but don't make any changes\n                return null;\n            }\n        }\n        // In multiselect mode, set the necessary values\n        if (newMultiSelectKeys.length > 1) {\n            parentPort.postMessage({\n                id: constantsAndTypes_1.FIXED_IFRAME_MESSAGE_IDS.MULTI_SELECTED_ELEMENT_KEYS,\n                elementKeys: newMultiSelectKeys,\n                outerHTMLs: newMultiSelectKeys === null || newMultiSelectKeys === void 0 ? void 0 : newMultiSelectKeys.map((elementKey) => { var _a; return (_a = (0, jquery_1.default)(`.${identifierUtils_1.ELEMENT_KEY_PREFIX}${elementKey}`).get(0)) === null || _a === void 0 ? void 0 : _a.outerHTML; }),\n            });\n            (0, sessionStorageUtils_1.setMemoryStorageItem)(sessionStorageUtils_1.MULTI_SELECTED_ELEMENT_KEYS, newMultiSelectKeys);\n            (0, outlineUtils_1.updateOutlines)(parentPort, storyboardId);\n            (0, editTextUtils_1.teardownEditableText)(parentPort, storyboardId);\n            return null; // Cannot perform regular actions on any particular node\n        }\n        // Special case - multiselecting but deselecting down to 1, stop the multiselect mode\n        if (newMultiSelectKeys.length === 1) {\n            newSelectedElement = tempoElement_1.TempoElement.fromKey(newMultiSelectKeys[0]);\n        }\n        const clearMultiSelectState = () => {\n            // Not multi-selecting, so clear the multiselect state\n            // Want to do this after setting the selected element to prevent flashing\n            parentPort.postMessage({\n                id: constantsAndTypes_1.FIXED_IFRAME_MESSAGE_IDS.MULTI_SELECTED_ELEMENT_KEYS,\n                elementKeys: [],\n                outerHTMLs: [],\n            });\n            (0, sessionStorageUtils_1.setMemoryStorageItem)(sessionStorageUtils_1.MULTI_SELECTED_ELEMENT_KEYS, null);\n        };\n        // Selecting the storyboard from within\n        if (newSelectedElement.isStoryboard()) {\n            if (newSelectedElement.getKey() !== currentSelectedElementKey) {\n                parentPort.postMessage({\n                    id: constantsAndTypes_1.FIXED_IFRAME_MESSAGE_IDS.SELECTED_ELEMENT_KEY,\n                    elementKey: newSelectedElement.getKey(),\n                    outerHTML: (_b = (0, jquery_1.default)(`.${identifierUtils_1.ELEMENT_KEY_PREFIX}${newSelectedElement.getKey()}`).get(0)) === null || _b === void 0 ? void 0 : _b.outerHTML,\n                });\n                (0, sessionStorageUtils_1.setMemoryStorageItem)(sessionStorageUtils_1.SELECTED_ELEMENT_KEY, newSelectedElement.getKey());\n                (0, outlineUtils_1.updateOutlines)(parentPort, storyboardId);\n            }\n            (0, editTextUtils_1.teardownEditableText)(parentPort, storyboardId);\n            clearMultiSelectState();\n            return null;\n        }\n        if ((0, editTextUtils_1.currentlyEditing)()) {\n            const editingInfo = (0, editTextUtils_1.getEditingInfo)();\n            if ((editingInfo === null || editingInfo === void 0 ? void 0 : editingInfo.key) !== currentSelectedElementKey) {\n                (0, editTextUtils_1.teardownEditableText)(parentPort, storyboardId);\n            }\n            clearMultiSelectState();\n            return null;\n        }\n        e.preventDefault();\n        e.stopPropagation();\n        if ((0, editTextUtils_1.canEditText)(newSelectedElement) &&\n            newSelectedElement.getKey() === currentSelectedElementKey) {\n            (0, editTextUtils_1.setupEditableText)(newSelectedElement, parentPort, storyboardId);\n        }\n        if (newSelectedElement.getKey() === currentSelectedElementKey) {\n            clearMultiSelectState();\n            return selectedNavNode;\n        }\n        parentPort.postMessage({\n            id: constantsAndTypes_1.FIXED_IFRAME_MESSAGE_IDS.SELECTED_ELEMENT_KEY,\n            elementKey: newSelectedElement.getKey(),\n            outerHTML: (_c = (0, jquery_1.default)(`.${identifierUtils_1.ELEMENT_KEY_PREFIX}${newSelectedElement.getKey()}`).get(0)) === null || _c === void 0 ? void 0 : _c.outerHTML,\n        });\n        (0, sessionStorageUtils_1.setMemoryStorageItem)(sessionStorageUtils_1.SELECTED_ELEMENT_KEY, newSelectedElement.getKey());\n        (0, outlineUtils_1.updateOutlines)(parentPort, storyboardId);\n        clearMultiSelectState();\n        return selectedNavNode;\n    };\n    /**\n     * Returns if events were passed through\n     */\n    const passThroughEventsIfNeeded = (e, parentPort, storyboardId) => {\n        var _a, _b;\n        const driveModeEnabled = !!(0, sessionStorageUtils_1.getSessionStorageItem)('driveModeEnabled', storyboardId);\n        const editingTextInfo = (0, editTextUtils_1.getEditingInfo)();\n        if (driveModeEnabled || editingTextInfo) {\n            return true;\n        }\n        (_a = e === null || e === void 0 ? void 0 : e.preventDefault) === null || _a === void 0 ? void 0 : _a.call(e);\n        (_b = e === null || e === void 0 ? void 0 : e.stopPropagation) === null || _b === void 0 ? void 0 : _b.call(e);\n        return false;\n    };\n    const onClickElementContextMenu = (e, parentPort, storyboardId) => {\n        var _a;\n        const passedThrough = passThroughEventsIfNeeded(e, parentPort, storyboardId);\n        if (passedThrough) {\n            return;\n        }\n        e.preventDefault();\n        e.stopPropagation();\n        // Mouse down is called when a user clicks the context menu, but not mouse up, so clear the mouse down\n        (0, sessionStorageUtils_1.setMemoryStorageItem)('mouseDragContext', null);\n        const elementKeyToNavNode = (0, sessionStorageUtils_1.getMemoryStorageItem)(sessionStorageUtils_1.ELEMENT_KEY_TO_NAV_NODE) || {};\n        let requestedNavNode;\n        if (e.metaKey || e.ctrlKey) {\n            const elementKey = (0, identifierUtils_1.getElementKeyFromNode)(e.target);\n            requestedNavNode = elementKeyToNavNode[elementKey];\n            // Special case -> this is the top-most node so it should trigger a context menu on the storyboard\n            if (!requestedNavNode && e.target.parentNode === document.body) {\n                requestedNavNode = constantsAndTypes_1.SELECT_OR_HOVER_STORYBOARD;\n            }\n        }\n        else {\n            requestedNavNode = getSelectableNavNode(e);\n        }\n        const currentSelectedElementKey = (0, sessionStorageUtils_1.getMemoryStorageItem)(sessionStorageUtils_1.SELECTED_ELEMENT_KEY);\n        const currentMultiSelectedKeys = (0, sessionStorageUtils_1.getMemoryStorageItem)(sessionStorageUtils_1.MULTI_SELECTED_ELEMENT_KEYS);\n        if (!requestedNavNode || typeof requestedNavNode === 'string') {\n            if (requestedNavNode === constantsAndTypes_1.SELECT_OR_HOVER_STORYBOARD &&\n                !(currentMultiSelectedKeys === null || currentMultiSelectedKeys === void 0 ? void 0 : currentMultiSelectedKeys.length)) {\n                const storyboardKey = tempoElement_1.TempoElement.forStoryboard(storyboardId).getKey();\n                if (currentSelectedElementKey === storyboardKey) {\n                    return;\n                }\n                parentPort.postMessage({\n                    id: constantsAndTypes_1.FIXED_IFRAME_MESSAGE_IDS.SELECTED_ELEMENT_KEY,\n                    elementKey: storyboardKey,\n                });\n                (0, sessionStorageUtils_1.setMemoryStorageItem)(sessionStorageUtils_1.SELECTED_ELEMENT_KEY, storyboardKey);\n                (0, outlineUtils_1.updateOutlines)(parentPort, storyboardId);\n            }\n            return;\n        }\n        let contextRequestedElementKey = null;\n        const selectedElementKey = (0, sessionStorageUtils_1.getMemoryStorageItem)(sessionStorageUtils_1.SELECTED_ELEMENT_KEY);\n        const selectedElement = tempoElement_1.TempoElement.fromKey(selectedElementKey);\n        // Don't select any children as the user might be right clicking a node they selected\n        if (!requestedNavNode.tempoElement.isEqual(selectedElement) &&\n            !selectedElement.isParentOf(requestedNavNode.tempoElement) &&\n            !(currentMultiSelectedKeys === null || currentMultiSelectedKeys === void 0 ? void 0 : currentMultiSelectedKeys.length) // Also don't select anything new if in multiselect mode\n        ) {\n            contextRequestedElementKey = requestedNavNode.tempoElement.getKey();\n            parentPort.postMessage({\n                id: constantsAndTypes_1.FIXED_IFRAME_MESSAGE_IDS.SELECTED_ELEMENT_KEY,\n                elementKey: contextRequestedElementKey,\n                outerHTML: (_a = (0, jquery_1.default)(`.${identifierUtils_1.ELEMENT_KEY_PREFIX}${contextRequestedElementKey}`).get(0)) === null || _a === void 0 ? void 0 : _a.outerHTML,\n            });\n            (0, sessionStorageUtils_1.setMemoryStorageItem)(sessionStorageUtils_1.SELECTED_ELEMENT_KEY, contextRequestedElementKey);\n            (0, outlineUtils_1.updateOutlines)(parentPort, storyboardId);\n        }\n        const importantFields = {\n            clientX: e.clientX,\n            clientY: e.clientY,\n        };\n        parentPort.postMessage({\n            id: constantsAndTypes_1.FIXED_IFRAME_MESSAGE_IDS.CONTEXT_REQUESTED,\n            event: importantFields,\n        });\n    };\n    const buildAndSendNavTree = (parentPort, storyboardId, treeElementLookup, scopeLookup, storyboardComponentElement) => {\n        let treeElements = treeElementLookup;\n        if (!treeElements) {\n            treeElements = (0, sessionStorageUtils_1.getMemoryStorageItem)(sessionStorageUtils_1.TREE_ELEMENT_LOOKUP) || {};\n        }\n        let scopes = scopeLookup;\n        if (!scopes) {\n            scopes = (0, sessionStorageUtils_1.getMemoryStorageItem)(sessionStorageUtils_1.SCOPE_LOOKUP) || {};\n        }\n        let storyboardComponent = storyboardComponentElement;\n        if (storyboardComponentElement === 'EXPLICIT_NONE') {\n            storyboardComponent = null;\n        }\n        else if (!storyboardComponent) {\n            storyboardComponent = (0, sessionStorageUtils_1.getMemoryStorageItem)(sessionStorageUtils_1.STORYBOARD_COMPONENT) || {};\n        }\n        const rootReactElement = (0, resqUtils_1.getRootReactElement)();\n        const reactTree = (0, resqUtils_1.buildNodeTree)(rootReactElement, null);\n        const lookupIdToReactTreeMap = {};\n        (0, resqUtils_1.buildTreeLookupMap)(reactTree, lookupIdToReactTreeMap);\n        const knownComponentNames = new Set();\n        const knownComponentInstanceNames = new Set();\n        if (treeElements) {\n            Object.values(treeElements).forEach((treeElement) => {\n                if (treeElement.type === 'component' ||\n                    treeElement.type === 'storybook-component') {\n                    knownComponentNames.add(treeElement.componentName);\n                }\n                if (treeElement.type === 'component-instance') {\n                    knownComponentInstanceNames.add(treeElement.componentName);\n                }\n            });\n        }\n        const elementKeyToLookupList = {};\n        const elementKeyToNavNode = {};\n        const builtNavTree = (0, navTreeUtils_1.buildNavForNode)(storyboardId, undefined, (0, jquery_1.default)('body').get(0), '', 'root', scopes, treeElements, lookupIdToReactTreeMap, knownComponentNames, knownComponentInstanceNames, elementKeyToLookupList, elementKeyToNavNode);\n        (0, sessionStorageUtils_1.setMemoryStorageItem)(sessionStorageUtils_1.ELEMENT_KEY_TO_LOOKUP_LIST, elementKeyToLookupList);\n        (0, sessionStorageUtils_1.setMemoryStorageItem)(sessionStorageUtils_1.CURRENT_NAV_TREE, builtNavTree);\n        (0, sessionStorageUtils_1.setMemoryStorageItem)(sessionStorageUtils_1.ELEMENT_KEY_TO_NAV_NODE, elementKeyToNavNode);\n        (0, resqUtils_1.clearLookupsFromTree)(reactTree);\n        parentPort.postMessage({\n            id: constantsAndTypes_1.FIXED_IFRAME_MESSAGE_IDS.NAV_TREE,\n            navTree: builtNavTree,\n            outerHtml: document.documentElement.outerHTML,\n        });\n        // Run callbacks\n        (0, navTreeUtils_1.runNavTreeBuiltCallbacks)();\n    };\n    const onFlushStart = () => {\n        // Find all instant update styling classes to delete\n        const classesToDelete = [];\n        (0, jquery_1.default)(`*[class*=${identifierUtils_1.TEMPO_INSTANT_UPDATE_STYLING_PREFIX}]`).each((i, element) => {\n            const classes = (element.getAttribute('class') || '').split(' ');\n            classes.forEach((className) => {\n                if (className.startsWith(identifierUtils_1.TEMPO_INSTANT_UPDATE_STYLING_PREFIX)) {\n                    classesToDelete.push(className);\n                }\n            });\n        });\n        (0, jquery_1.default)(`*[${identifierUtils_1.TEMPO_DELETE_AFTER_REFRESH}=true]`).attr(identifierUtils_1.TEMPO_QUEUE_DELETE_AFTER_HOT_RELOAD, 'true');\n        // Clear the add class instant update queue as those items will be applied in the hot reload\n        (0, sessionStorageUtils_1.setMemoryStorageItem)(changeItemFunctions_1.ADD_CLASS_INSTANT_UPDATE_QUEUE, []);\n        (0, sessionStorageUtils_1.setMemoryStorageItem)('POST_HOT_RELOAD_CLEAR', {\n            classesToDelete,\n        });\n    };\n    const clearInstantUpdatesAndSendNavTree = (parentPort, storyboardId) => {\n        (0, sessionStorageUtils_1.setMemoryStorageItem)(LAST_NAV_TREE_REFRESH_TIME, new Date());\n        const { classesToDelete } = (0, sessionStorageUtils_1.getMemoryStorageItem)('POST_HOT_RELOAD_CLEAR') || {};\n        // Delete all instant update changed elements\n        (0, jquery_1.default)(`*[${identifierUtils_1.TEMPO_QUEUE_DELETE_AFTER_HOT_RELOAD}=true]`).remove();\n        // Clear the added display nones\n        (0, jquery_1.default)(`.${identifierUtils_1.TEMPO_DISPLAY_NONE_UNTIL_REFRESH_CLASS}`).removeClass(identifierUtils_1.TEMPO_DISPLAY_NONE_UNTIL_REFRESH_CLASS);\n        (0, jquery_1.default)(`*[${identifierUtils_1.TEMPO_INSTANT_UPDATE}=true]`).removeAttr(identifierUtils_1.TEMPO_INSTANT_UPDATE);\n        (0, jquery_1.default)(`*[${identifierUtils_1.TEMPO_DO_NOT_SHOW_IN_NAV_UNTIL_REFRESH}=true]`).removeAttr(identifierUtils_1.TEMPO_DO_NOT_SHOW_IN_NAV_UNTIL_REFRESH);\n        (0, jquery_1.default)(`.${changeItemFunctions_1.TEMPORARY_STYLING_CLASS_NAME}`).removeClass(changeItemFunctions_1.TEMPORARY_STYLING_CLASS_NAME);\n        // Any classes marked to delete before the hot reload\n        classesToDelete === null || classesToDelete === void 0 ? void 0 : classesToDelete.forEach((cls) => {\n            (0, jquery_1.default)(`.${cls}`).removeClass(cls);\n        });\n        const newAddClassQueue = (0, sessionStorageUtils_1.getMemoryStorageItem)(changeItemFunctions_1.ADD_CLASS_INSTANT_UPDATE_QUEUE) || [];\n        // Any attributes that start with the styling prefix leftover mean that the class needs to be re-applied\n        // these are classes that were added in instant updates while the hot reload was in progress\n        newAddClassQueue.forEach((item) => {\n            if (!item) {\n                return;\n            }\n            const { codebaseId, className } = item;\n            if (codebaseId && className) {\n                (0, jquery_1.default)(`.${codebaseId}`).attr(identifierUtils_1.TEMPO_INSTANT_UPDATE, 'true');\n                (0, jquery_1.default)(`.${codebaseId}`).addClass(className);\n            }\n        });\n        // Rebuild the nav tree on DOM changed after some time has passed\n        // this gives the react fiber time to be fully reconciled\n        try {\n            setTimeout(() => {\n                buildAndSendNavTree(parentPort, storyboardId);\n                (0, outlineUtils_1.updateOutlines)(parentPort, storyboardId);\n            }, 300);\n        }\n        catch (e) {\n            console.error('ERROR: Could not re-create nav tree on DOM change, ' + e);\n        }\n    };\n    const onDOMChanged = (mutations, parentPort, storyboardId, \n    // If set to true this is called from the shadow root for the nextjs build watcher (the spinning triangle)\n    fromNextJsLoader) => {\n        var _a;\n        // Udpate the href in the parent container\n        if ((0, sessionStorageUtils_1.getMemoryStorageItem)('href') !== window.location.href) {\n            parentPort.postMessage({\n                id: constantsAndTypes_1.FIXED_IFRAME_MESSAGE_IDS.LATEST_HREF,\n                href: window.location.href,\n            });\n            (0, sessionStorageUtils_1.setMemoryStorageItem)('href', window.location.href);\n        }\n        // Check if we should refresh the nav tree\n        let refreshNavTree = false;\n        if (fromNextJsLoader) {\n            // From the nextjs loader, refresh when the loader gets hidden (means refresh is done)\n            const mutationTarget = (_a = mutations === null || mutations === void 0 ? void 0 : mutations[0]) === null || _a === void 0 ? void 0 : _a.target;\n            if (mutationTarget && mutationTarget.id === 'container') {\n                const currentlyHotReloading = (0, sessionStorageUtils_1.getMemoryStorageItem)(sessionStorageUtils_1.HOT_RELOADING);\n                if (mutationTarget.classList.contains('visible')) {\n                    (0, sessionStorageUtils_1.setMemoryStorageItem)(sessionStorageUtils_1.HOT_RELOADING, true);\n                }\n                else {\n                    (0, sessionStorageUtils_1.setMemoryStorageItem)(sessionStorageUtils_1.HOT_RELOADING, false);\n                    refreshNavTree = true;\n                }\n            }\n        }\n        else {\n            mutations.forEach((e) => {\n                // If the class attribute has changed on an element we have to reparse the nav tree to add the element key\n                if (e.type === 'attributes' &&\n                    e.attributeName === 'class' &&\n                    e.target &&\n                    !(0, outlineUtils_1.isNodeOutline)(e.target) &&\n                    !(0, identifierUtils_1.isMovingElement)(e.target) &&\n                    // And not a script\n                    // Bug found on Oct 8, 2024, for some reason the script kept triggering a reload\n                    !e.target.tagName.toLowerCase().includes('script')) {\n                    const elementKey = (0, identifierUtils_1.getElementKeyFromNode)(e.target);\n                    const uniqueLookup = (0, identifierUtils_1.getUniqueLookupFromNode)(e.target);\n                    // An element which doesn't have an element key has changed\n                    if (!elementKey && !uniqueLookup && !(0, identifierUtils_1.isElementInSvg)(e.target)) {\n                        refreshNavTree = true;\n                    }\n                    return;\n                }\n                [e.addedNodes, e.removedNodes].forEach((nodeList) => {\n                    if (!nodeList) {\n                        return;\n                    }\n                    nodeList.forEach((node) => {\n                        if (!(0, outlineUtils_1.isNodeOutline)(node) && !(0, identifierUtils_1.isMovingElement)(node)) {\n                            refreshNavTree = true;\n                        }\n                    });\n                });\n            });\n        }\n        if (!refreshNavTree) {\n            return;\n        }\n        // In these cases we don't want to trigger a nav tree refresh right away\n        // since the hot reload may not have happened yet. So we set a timeout and only\n        // trigger a nav tree refresh if another one hasn't happened in between\n        if (fromNextJsLoader) {\n            const triggerTime = new Date();\n            setTimeout(() => {\n                const lastRefreshTime = (0, sessionStorageUtils_1.getMemoryStorageItem)(LAST_NAV_TREE_REFRESH_TIME);\n                // Don't re-clear and send if another refresh has happened in the meantime\n                if (!lastRefreshTime || lastRefreshTime < triggerTime) {\n                    clearInstantUpdatesAndSendNavTree(parentPort, storyboardId);\n                }\n            }, 1000);\n            return;\n        }\n        clearInstantUpdatesAndSendNavTree(parentPort, storyboardId);\n    };\n    const onWheel = (e, parentPort, storyboardId) => {\n        const passedThrough = passThroughEventsIfNeeded(e, parentPort, storyboardId);\n        const isScrollShortcut = e.altKey;\n        const isZoomShortcut = e.ctrlKey || e.metaKey;\n        // If the user wants to scroll (either by being in drive mode, or by holding alt)\n        // and they aren't trying to zoom, fallback to default behaviour.\n        if (!isZoomShortcut && (passedThrough || isScrollShortcut)) {\n            return;\n        }\n        e.preventDefault();\n        e.stopPropagation();\n        const importantFields = {\n            deltaX: e.deltaX,\n            deltaY: e.deltaY,\n            wheelDelta: e.wheelDelta,\n            x: e.x,\n            y: e.y,\n            altKey: e.altKey,\n            ctrlKey: e.ctrlKey,\n            shiftKey: e.shiftKey,\n            metaKey: e.metaKey,\n        };\n        parentPort.postMessage({\n            id: constantsAndTypes_1.FIXED_IFRAME_MESSAGE_IDS.WHEEL_EVENT,\n            event: importantFields,\n        });\n    };\n    const activeElementMetadata = () => {\n        const activeElement = document.activeElement;\n        let tagName, isContentEditable, elementType;\n        if (activeElement) {\n            tagName = activeElement.tagName;\n            if (activeElement instanceof HTMLElement) {\n                isContentEditable = activeElement.isContentEditable;\n            }\n            if (activeElement instanceof HTMLInputElement) {\n                elementType = activeElement.type;\n            }\n        }\n        return {\n            tagName: tagName,\n            isContentEditable: isContentEditable,\n            elementType: elementType,\n        };\n    };\n    const onKeyDown = (e, parentPort) => {\n        parentPort.postMessage({\n            id: constantsAndTypes_1.FIXED_IFRAME_MESSAGE_IDS.KEY_DOWN_EVENT,\n            event: {\n                key: e.key,\n                metaKey: e.metaKey,\n                shiftKey: e.shiftKey,\n                ctrlKey: e.ctrlKey,\n                activeElement: Object.assign({}, activeElementMetadata()),\n            },\n        });\n    };\n    const onKeyUp = (e, parentPort) => {\n        parentPort.postMessage({\n            id: constantsAndTypes_1.FIXED_IFRAME_MESSAGE_IDS.KEY_UP_EVENT,\n            event: {\n                key: e.key,\n                metaKey: e.metaKey,\n                shiftKey: e.shiftKey,\n                ctrlKey: e.ctrlKey,\n                activeElement: Object.assign({}, activeElementMetadata()),\n            },\n        });\n    };\n    const throttledUpdateOutlines = lodash_1.default.throttle((parentPort, storyboardId) => (0, outlineUtils_1.updateOutlines)(parentPort, storyboardId), 15);\n    const onScroll = (e, parentPort, storyboardId) => {\n        throttledUpdateOutlines(parentPort, storyboardId);\n    };\n    // Need to register functions on the window for channel messaging to use them\n    // @ts-ignore\n    window.initProject = (parentPort, storyboardId, treeElementLookup, scopeLookup, storyboardComponentElement, options = {}, storyboardType, savedComponentFilename, originalStoryboardUrl) => {\n        const passive = makePassiveEventOption();\n        passive['capture'] = true;\n        const body$ = (0, jquery_1.default)('body');\n        (0, sessionStorageUtils_1.setMemoryStorageItem)(sessionStorageUtils_1.TREE_ELEMENT_LOOKUP, treeElementLookup);\n        (0, sessionStorageUtils_1.setMemoryStorageItem)(sessionStorageUtils_1.SCOPE_LOOKUP, scopeLookup);\n        if (storyboardComponentElement) {\n            (0, sessionStorageUtils_1.setMemoryStorageItem)(sessionStorageUtils_1.STORYBOARD_COMPONENT, storyboardComponentElement);\n        }\n        (0, sessionStorageUtils_1.setMemoryStorageItem)(sessionStorageUtils_1.STORYBOARD_TYPE, storyboardType);\n        (0, sessionStorageUtils_1.setMemoryStorageItem)(sessionStorageUtils_1.SAVED_STORYBOARD_COMPONENT_FILENAME, savedComponentFilename);\n        // The URL that was originally loaded for this storyboard, it may be different from href\n        // if the user navigated away to a new route\n        if (originalStoryboardUrl) {\n            (0, sessionStorageUtils_1.setMemoryStorageItem)(sessionStorageUtils_1.ORIGINAL_STORYBOARD_URL, originalStoryboardUrl);\n        }\n        // Clear iframe outlines\n        (0, sessionStorageUtils_1.removeMemoryStorageItem)(sessionStorageUtils_1.SELECTED_ELEMENT_KEY);\n        (0, sessionStorageUtils_1.removeMemoryStorageItem)(sessionStorageUtils_1.HOVERED_ELEMENT_KEY);\n        (0, outlineUtils_1.updateOutlines)(parentPort, storyboardId);\n        // Register event listeners\n        const bodyObject = body$.get(0);\n        bodyObject === null || bodyObject === void 0 ? void 0 : bodyObject.addEventListener('click', (e) => {\n            passThroughEventsIfNeeded(e, parentPort, storyboardId);\n        }, passive);\n        bodyObject === null || bodyObject === void 0 ? void 0 : bodyObject.addEventListener('pointerover', (e) => {\n            onPointerOver(e, parentPort, storyboardId);\n        }, passive);\n        bodyObject === null || bodyObject === void 0 ? void 0 : bodyObject.addEventListener('pointerdown', (e) => {\n            onPointerDown(e, parentPort, storyboardId);\n        }, passive);\n        bodyObject === null || bodyObject === void 0 ? void 0 : bodyObject.addEventListener('pointerup', (e) => {\n            onPointerUp(e, parentPort, storyboardId);\n        }, passive);\n        bodyObject === null || bodyObject === void 0 ? void 0 : bodyObject.addEventListener('pointermove', (e) => {\n            onPointerMove(e, parentPort, storyboardId);\n        }, passive);\n        bodyObject === null || bodyObject === void 0 ? void 0 : bodyObject.addEventListener('pointerleave', (e) => {\n            passThroughEventsIfNeeded(e, parentPort, storyboardId);\n        }, passive);\n        bodyObject === null || bodyObject === void 0 ? void 0 : bodyObject.addEventListener('contextmenu', (e) => {\n            onClickElementContextMenu(e, parentPort, storyboardId);\n        }, passive);\n        bodyObject === null || bodyObject === void 0 ? void 0 : bodyObject.addEventListener('dblclick', (e) => {\n            passThroughEventsIfNeeded(e, parentPort, storyboardId);\n        }, passive);\n        bodyObject === null || bodyObject === void 0 ? void 0 : bodyObject.addEventListener('mouseover', (e) => {\n            passThroughEventsIfNeeded(e, parentPort, storyboardId);\n        }, passive);\n        bodyObject === null || bodyObject === void 0 ? void 0 : bodyObject.addEventListener('mouseout', (e) => {\n            passThroughEventsIfNeeded(e, parentPort, storyboardId);\n        }, passive);\n        bodyObject === null || bodyObject === void 0 ? void 0 : bodyObject.addEventListener('mousemove', (e) => {\n            passThroughEventsIfNeeded(e, parentPort, storyboardId);\n        }, passive);\n        bodyObject === null || bodyObject === void 0 ? void 0 : bodyObject.addEventListener('mousedown', (e) => {\n            passThroughEventsIfNeeded(e, parentPort, storyboardId);\n        }, passive);\n        bodyObject === null || bodyObject === void 0 ? void 0 : bodyObject.addEventListener('mouseup', (e) => {\n            passThroughEventsIfNeeded(e, parentPort, storyboardId);\n        }, passive);\n        bodyObject === null || bodyObject === void 0 ? void 0 : bodyObject.addEventListener('wheel', (e) => {\n            onWheel(e, parentPort, storyboardId);\n        }, passive);\n        bodyObject === null || bodyObject === void 0 ? void 0 : bodyObject.addEventListener('keydown', (e) => {\n            onKeyDown(e, parentPort);\n        }, passive);\n        bodyObject === null || bodyObject === void 0 ? void 0 : bodyObject.addEventListener('keyup', (e) => {\n            onKeyUp(e, parentPort);\n        }, passive);\n        window.addEventListener('scroll', (e) => {\n            onScroll(e, parentPort, storyboardId);\n        }, passive);\n        // Hack: this is used to\n        document.addEventListener('pointerlockchange', () => {\n            if (document.pointerLockElement &&\n                (0, sessionStorageUtils_1.getMemoryStorageItem)(IMMEDIATELY_REMOVE_POINTER_LOCK)) {\n                document.exitPointerLock();\n                (0, sessionStorageUtils_1.setMemoryStorageItem)(IMMEDIATELY_REMOVE_POINTER_LOCK, false);\n            }\n        }, false);\n        observeDOM(bodyObject, (e) => {\n            onDOMChanged(e, parentPort, storyboardId);\n        });\n        // If this is NextJS, also listen to the shadow root of the __next-build-watcher\n        // This triggeres the onDOMChanged when the hot reload symbol shows up\n        const nextBuildWatcher = document.getElementById('__next-build-watcher');\n        if (nextBuildWatcher && nextBuildWatcher.shadowRoot) {\n            Array.from(nextBuildWatcher.shadowRoot.children).forEach((child) => {\n                observeDOM(child, (e) => {\n                    onDOMChanged(e, parentPort, storyboardId, true);\n                });\n            });\n        }\n        if (options.driveModeEnabled) {\n            enableDriveMode(parentPort, storyboardId);\n        }\n        else {\n            disableDriveMode(parentPort, storyboardId);\n        }\n        if (options.aiContextSelection) {\n            (0, sessionStorageUtils_1.setMemoryStorageItem)('aiContext', true);\n            (0, outlineUtils_1.updateOutlines)(parentPort, storyboardId);\n        }\n        else {\n            (0, sessionStorageUtils_1.setMemoryStorageItem)('aiContext', false);\n            (0, outlineUtils_1.updateOutlines)(parentPort, storyboardId);\n        }\n        // Build the Nav Tree and send it back\n        try {\n            buildAndSendNavTree(parentPort, storyboardId, treeElementLookup, scopeLookup, storyboardComponentElement || 'EXPLICIT_NONE');\n        }\n        catch (e) {\n            console.log(e);\n            console.error('Error building nav tree: ' + e);\n        }\n    };\n    const enableDriveMode = (parentPort, storyboardId) => {\n        // @ts-ignore\n        if (!(0, sessionStorageUtils_1.getSessionStorageItem)('driveModeEnabled', storyboardId)) {\n            // @ts-ignore\n            (0, sessionStorageUtils_1.setSessionStorageItem)('driveModeEnabled', 'enabled', storyboardId);\n            clearHoveredElements(parentPort, storyboardId);\n            (0, outlineUtils_1.clearAllOutlines)();\n        }\n        (0, jquery_1.default)('body').css('cursor', '');\n    };\n    const disableDriveMode = (parentPort, storyboardId) => {\n        // @ts-ignore\n        if ((0, sessionStorageUtils_1.getSessionStorageItem)('driveModeEnabled', storyboardId)) {\n            // @ts-ignore\n            (0, sessionStorageUtils_1.removeSessionStorageItem)('driveModeEnabled', storyboardId);\n            (0, outlineUtils_1.updateOutlines)(parentPort, storyboardId);\n            clearHoveredElements(parentPort, storyboardId);\n        }\n        (0, jquery_1.default)('body').attr('style', function (i, s) {\n            return (s || '') + 'cursor: default !important;';\n        });\n    };\n    // @ts-ignore\n    window.enableDriveMode = (parentPort, storyboardId) => {\n        enableDriveMode(parentPort, storyboardId);\n    };\n    // @ts-ignore\n    window.disableDriveMode = (parentPort, storyboardId) => {\n        disableDriveMode(parentPort, storyboardId);\n    };\n    // @ts-ignore\n    window.setNewLookups = (parentPort, storyboardId, treeElementLookup, scopeLookup) => {\n        const prevTreeElemntLookup = (0, sessionStorageUtils_1.getMemoryStorageItem)(sessionStorageUtils_1.TREE_ELEMENT_LOOKUP) || {};\n        const prevScopeLookup = (0, sessionStorageUtils_1.getMemoryStorageItem)(sessionStorageUtils_1.SCOPE_LOOKUP) || {};\n        const newTreeElements = Object.assign({}, prevTreeElemntLookup);\n        // Delete any tree elements that were set to nul\n        Object.keys(treeElementLookup).forEach((key) => {\n            if (treeElementLookup[key]) {\n                newTreeElements[key] = treeElementLookup[key];\n            }\n            else if (newTreeElements[key]) {\n                delete newTreeElements[key];\n            }\n        });\n        const newScopes = Object.assign({}, prevScopeLookup);\n        // Delete any scopes that were set to nul\n        Object.keys(scopeLookup).forEach((key) => {\n            if (scopeLookup[key]) {\n                newScopes[key] = scopeLookup[key];\n            }\n            else if (newScopes[key]) {\n                delete newScopes[key];\n            }\n        });\n        (0, sessionStorageUtils_1.setMemoryStorageItem)(sessionStorageUtils_1.TREE_ELEMENT_LOOKUP, newTreeElements);\n        (0, sessionStorageUtils_1.setMemoryStorageItem)(sessionStorageUtils_1.SCOPE_LOOKUP, newScopes);\n    };\n    // @ts-ignore\n    window.setHoveredElement = (parentPort, storyboardId, elementKey) => {\n        const driveModeEnabled = !!(0, sessionStorageUtils_1.getSessionStorageItem)('driveModeEnabled', storyboardId);\n        if (driveModeEnabled) {\n            return;\n        }\n        const prevHoveredElementKey = (0, sessionStorageUtils_1.getMemoryStorageItem)(sessionStorageUtils_1.HOVERED_ELEMENT_KEY);\n        if (prevHoveredElementKey === elementKey) {\n            return;\n        }\n        if (elementKey) {\n            (0, sessionStorageUtils_1.setMemoryStorageItem)(sessionStorageUtils_1.HOVERED_ELEMENT_KEY, elementKey);\n        }\n        else {\n            (0, sessionStorageUtils_1.removeMemoryStorageItem)(sessionStorageUtils_1.HOVERED_ELEMENT_KEY);\n        }\n        (0, outlineUtils_1.updateOutlines)(parentPort, storyboardId);\n    };\n    // @ts-ignore\n    window.setSelectedElement = (parentPort, storyboardId, elementKey) => {\n        var _a, _b;\n        const prevSelectedElementKey = (0, sessionStorageUtils_1.getMemoryStorageItem)(sessionStorageUtils_1.SELECTED_ELEMENT_KEY);\n        if (prevSelectedElementKey === elementKey) {\n            return;\n        }\n        if (elementKey) {\n            const tempoElement = tempoElement_1.TempoElement.fromKey(elementKey);\n            let elementKeyToExtract = elementKey;\n            if (tempoElement.isStoryboard(storyboardId)) {\n                // Pass back the outerHTML of the top level node\n                const topLevelNode = (0, sessionStorageUtils_1.getMemoryStorageItem)(sessionStorageUtils_1.CURRENT_NAV_TREE);\n                const topLevelElementKey = (_a = topLevelNode === null || topLevelNode === void 0 ? void 0 : topLevelNode.tempoElement) === null || _a === void 0 ? void 0 : _a.getKey();\n                if (topLevelElementKey) {\n                    elementKeyToExtract = topLevelElementKey;\n                }\n            }\n            // Send back the message just to set the outerHTML only\n            parentPort.postMessage({\n                id: constantsAndTypes_1.FIXED_IFRAME_MESSAGE_IDS.SELECTED_ELEMENT_KEY,\n                doNotSetElementKey: true,\n                outerHTML: (_b = (0, jquery_1.default)(`.${identifierUtils_1.ELEMENT_KEY_PREFIX}${elementKeyToExtract}`).get(0)) === null || _b === void 0 ? void 0 : _b.outerHTML,\n            });\n            (0, sessionStorageUtils_1.setMemoryStorageItem)(sessionStorageUtils_1.SELECTED_ELEMENT_KEY, elementKey);\n        }\n        else {\n            parentPort.postMessage({\n                id: constantsAndTypes_1.FIXED_IFRAME_MESSAGE_IDS.SELECTED_ELEMENT_KEY,\n                doNotSetElementKey: true,\n                outerHTML: null,\n            });\n            (0, sessionStorageUtils_1.removeMemoryStorageItem)(sessionStorageUtils_1.SELECTED_ELEMENT_KEY);\n        }\n        (0, outlineUtils_1.updateOutlines)(parentPort, storyboardId);\n    };\n    // @ts-ignore\n    window.setMultiselectedElementKeys = (parentPort, storyboardId, elementKeys) => {\n        const prevMultiSelectedElementKeys = (0, sessionStorageUtils_1.getMemoryStorageItem)(sessionStorageUtils_1.MULTI_SELECTED_ELEMENT_KEYS);\n        const prevSet = new Set(prevMultiSelectedElementKeys || []);\n        const newSet = new Set(elementKeys || []);\n        const setsEqual = prevSet.size === newSet.size &&\n            [...prevSet].every((value) => newSet.has(value));\n        if (setsEqual) {\n            return;\n        }\n        if (elementKeys) {\n            (0, sessionStorageUtils_1.setMemoryStorageItem)(sessionStorageUtils_1.MULTI_SELECTED_ELEMENT_KEYS, elementKeys);\n            parentPort.postMessage({\n                id: constantsAndTypes_1.FIXED_IFRAME_MESSAGE_IDS.MULTI_SELECTED_ELEMENT_KEYS,\n                doNotSetElementKeys: true,\n                outerHTMLs: elementKeys === null || elementKeys === void 0 ? void 0 : elementKeys.map((elementKey) => { var _a; return (_a = (0, jquery_1.default)(`.${identifierUtils_1.ELEMENT_KEY_PREFIX}${elementKey}`).get(0)) === null || _a === void 0 ? void 0 : _a.outerHTML; }),\n            });\n        }\n        else {\n            (0, sessionStorageUtils_1.removeMemoryStorageItem)(sessionStorageUtils_1.MULTI_SELECTED_ELEMENT_KEYS);\n            parentPort.postMessage({\n                id: constantsAndTypes_1.FIXED_IFRAME_MESSAGE_IDS.MULTI_SELECTED_ELEMENT_KEYS,\n                doNotSetElementKeys: true,\n                outerHTMLs: [],\n            });\n        }\n        (0, outlineUtils_1.updateOutlines)(parentPort, storyboardId);\n    };\n    // @ts-ignore\n    window.processRulesForSelectedElement = (parentPort, storyboardId, cssElementLookup, selectedElementKey) => {\n        (0, cssFunctions_1.processRulesForSelectedElement)(parentPort, cssElementLookup, selectedElementKey);\n    };\n    // @ts-ignore\n    window.setModifiersForSelectedElement = (parentPort, storyboardId, modifiers, selectedElementKey) => {\n        (0, cssFunctions_1.setModifiersForSelectedElement)(parentPort, modifiers, selectedElementKey);\n    };\n    // @ts-ignore\n    window.getCssEvals = (parentPort, storyboardId, selectedElementKey) => {\n        (0, cssFunctions_1.getCssEvals)(parentPort, selectedElementKey);\n    };\n    // @ts-ignore\n    window.ruleMatchesElement = (parentPort, storyboardId, messageId, rule, selectedElementKey) => {\n        (0, cssFunctions_1.ruleMatchesElement)(parentPort, messageId, rule, selectedElementKey);\n    };\n    // @ts-ignore\n    window.getElementClassList = (parentPort, storyboardId, selectedElementKey) => {\n        (0, cssFunctions_1.getElementClassList)(parentPort, selectedElementKey);\n    };\n    // @ts-ignore\n    window.applyChangeItemToDocument = (parentPort, storyboardId, changeItem) => __awaiter(void 0, void 0, void 0, function* () {\n        const { sendNewNavTree } = (0, changeItemFunctions_1.applyChangeItemToDocument)(parentPort, storyboardId, changeItem);\n        // Update the nav tree & outlines\n        if (sendNewNavTree) {\n            buildAndSendNavTree(parentPort, storyboardId);\n        }\n        (0, outlineUtils_1.updateOutlines)(parentPort, storyboardId);\n    });\n    // @ts-ignore\n    window.updateCodebaseIds = (parentPort, storyboardId, prevIdToNewIdMap, newTreeElementLookup, newScopeLookup) => {\n        const sendNewNavTree = (0, changeItemFunctions_1.updateCodebaseIds)(parentPort, prevIdToNewIdMap, true);\n        if (sendNewNavTree) {\n            buildAndSendNavTree(parentPort, storyboardId, newTreeElementLookup, newScopeLookup);\n        }\n        (0, outlineUtils_1.updateOutlines)(parentPort, storyboardId);\n    };\n    // @ts-ignore\n    window.dispatchEvent = (parentPort, storyboardId, eventName, eventDetails) => {\n        const event = new CustomEvent(eventName, Object.assign({}, eventDetails));\n        document.dispatchEvent(event);\n    };\n    // @ts-ignore\n    window.updateOutlines = (parentPort, storyboardId) => {\n        (0, outlineUtils_1.updateOutlines)(parentPort, storyboardId);\n    };\n    // @ts-ignore\n    window.goBack = (parentPort, storyboardId) => {\n        if (document.referrer !== '') {\n            window.history.back();\n        }\n    };\n    // @ts-ignore\n    window.goForward = (parentPort, storyboardId) => {\n        window.history.forward();\n    };\n    // @ts-ignore\n    window.refresh = (parentPort, storyboardId) => {\n        window.location.reload();\n    };\n    // @ts-ignore\n    window.syntheticMouseOver = (parentPort, storyboardId, coords, dontHoverInsideSelected, selectBottomMostElement) => {\n        const target = document.elementFromPoint(coords.x, coords.y);\n        // If this is true we don't want to trigger a hover event inside a selected element, instead just set hovering on the selected element\n        if (dontHoverInsideSelected) {\n            const selectedElementKey = (0, sessionStorageUtils_1.getMemoryStorageItem)(sessionStorageUtils_1.SELECTED_ELEMENT_KEY);\n            const selectedElement = tempoElement_1.TempoElement.fromKey(selectedElementKey);\n            if (!selectedElement.isEmpty()) {\n                const selectedDomElement = document.querySelector(`.${identifierUtils_1.ELEMENT_KEY_PREFIX}${selectedElementKey}`);\n                if (selectedDomElement === null || selectedDomElement === void 0 ? void 0 : selectedDomElement.contains(target)) {\n                    onPointerOver({ target: selectedDomElement }, parentPort, storyboardId);\n                    return;\n                }\n            }\n        }\n        onPointerOver({ target }, parentPort, storyboardId, selectBottomMostElement);\n    };\n    // @ts-ignore\n    window.syntheticMouseMove = (parentPort, storyboardId, syntheticEvent) => {\n        const eventWithClient = Object.assign(Object.assign({}, syntheticEvent), { pageX: syntheticEvent.clientX +\n                (document.documentElement.scrollLeft || document.body.scrollLeft), pageY: syntheticEvent.clientY +\n                (document.documentElement.scrollTop || document.body.scrollTop) });\n        onPointerMove(eventWithClient, parentPort, storyboardId);\n    };\n    // @ts-ignore\n    window.syntheticMouseUp = (parentPort, storyboardId, syntheticEvent) => {\n        onPointerUp(syntheticEvent, parentPort, storyboardId);\n    };\n    // @ts-ignore\n    window.clearHoveredOutlines = (parentPort, storyboardId) => {\n        if ((0, sessionStorageUtils_1.getMemoryStorageItem)(sessionStorageUtils_1.HOVERED_ELEMENT_KEY)) {\n            clearHoveredElements(parentPort, storyboardId);\n        }\n    };\n    // @ts-ignore\n    window.setZoomPerc = (parentPort, storyboardId, zoomPerc) => {\n        (0, sessionStorageUtils_1.setMemoryStorageItem)('zoomPerc', zoomPerc.toString());\n        (0, outlineUtils_1.updateOutlines)(parentPort, storyboardId);\n    };\n    // @ts-ignore\n    window.setAiContext = (parentPort, storyboardId, aiContext) => {\n        (0, sessionStorageUtils_1.setMemoryStorageItem)('aiContext', !!aiContext);\n        (0, outlineUtils_1.updateOutlines)(parentPort, storyboardId);\n    };\n    // @ts-ignore\n    window.tempMoveElement = (parentPort, storyboardId, nodeToMoveElementKey, newIndex) => {\n        var _a, _b, _c, _d, _e;\n        const elementKeyToNavNode = (0, sessionStorageUtils_1.getMemoryStorageItem)(sessionStorageUtils_1.ELEMENT_KEY_TO_NAV_NODE) || {};\n        const navNodeToMove = elementKeyToNavNode[nodeToMoveElementKey];\n        if (!navNodeToMove) {\n            return;\n        }\n        const nodeToMoveElement = tempoElement_1.TempoElement.fromKey(nodeToMoveElementKey);\n        const domElementsToMove = [];\n        // In components, there may be multiple elements that need to be moved, the eleemntKeyToLookupList\n        // are all the real DOM elements in a component\n        // For non-components, the eleemntKeyToLookupList points to a list of itself\n        const elementKeyToLookupList = (0, sessionStorageUtils_1.getMemoryStorageItem)(sessionStorageUtils_1.ELEMENT_KEY_TO_LOOKUP_LIST) || {};\n        const lookupList = elementKeyToLookupList[navNodeToMove.tempoElement.getKey()] || [];\n        lookupList.forEach((lookupElementKey) => {\n            domElementsToMove.push((0, jquery_1.default)('body').find(`.${identifierUtils_1.ELEMENT_KEY_PREFIX}${lookupElementKey}`).get(0));\n        });\n        const parentDomElement = (_a = domElementsToMove[0]) === null || _a === void 0 ? void 0 : _a.parentElement;\n        const parentNavNode = navNodeToMove.parent;\n        if (parentDomElement && parentNavNode) {\n            const currentIndex = (_b = parentNavNode === null || parentNavNode === void 0 ? void 0 : parentNavNode.children) === null || _b === void 0 ? void 0 : _b.indexOf(navNodeToMove);\n            const numChildren = (_c = parentNavNode === null || parentNavNode === void 0 ? void 0 : parentNavNode.children) === null || _c === void 0 ? void 0 : _c.length;\n            if (currentIndex !== newIndex) {\n                Array.from(parentDomElement.children).forEach((child) => {\n                    (0, jquery_1.default)(child).attr(identifierUtils_1.TEMPO_INSTANT_UPDATE, 'true');\n                });\n                (0, jquery_1.default)(parentDomElement).attr(identifierUtils_1.TEMPO_INSTANT_UPDATE, 'true');\n                if (newIndex === numChildren - 1) {\n                    domElementsToMove.forEach((element) => {\n                        element.parentElement.appendChild(element);\n                    });\n                }\n                else {\n                    // If the current index is before the new index then we need to adjust by 1 to account for the shift in indices\n                    const beforeNode = currentIndex > newIndex\n                        ? parentNavNode === null || parentNavNode === void 0 ? void 0 : parentNavNode.children[newIndex]\n                        : parentNavNode === null || parentNavNode === void 0 ? void 0 : parentNavNode.children[newIndex + 1];\n                    const lookupListForBefore = elementKeyToLookupList[(_d = beforeNode === null || beforeNode === void 0 ? void 0 : beforeNode.tempoElement) === null || _d === void 0 ? void 0 : _d.getKey()] || [];\n                    if (!lookupListForBefore.length) {\n                        console.log('Cannot find element to insert before in lookup list');\n                        return;\n                    }\n                    const beforeDomElement = (0, jquery_1.default)('body')\n                        .find(`.${identifierUtils_1.ELEMENT_KEY_PREFIX}${lookupListForBefore[0]}`)\n                        .get(0);\n                    if (!beforeDomElement) {\n                        console.log('Cannot find element to insert before');\n                        return;\n                    }\n                    domElementsToMove.forEach((element) => {\n                        element.parentElement.insertBefore(element, beforeDomElement);\n                    });\n                }\n                // Update the selected element key to the new expected one (note if moving there is no hovered element key)\n                // This also assumes the nodeToMoveElementKey is the selected element key\n                const elementToMoveSegments = nodeToMoveElement.uniquePath.split('-');\n                const newSelectedUniquePath = elementToMoveSegments\n                    .slice(0, elementToMoveSegments.length - 1)\n                    .join('-') + `-${newIndex}`;\n                const newSelectedElementKey = new tempoElement_1.TempoElement(nodeToMoveElement.codebaseId, nodeToMoveElement.storyboardId, newSelectedUniquePath).getKey();\n                // Update the nav tree which also sets the element key on all the elements, need to do this before\n                // updating the selected element key\n                buildAndSendNavTree(parentPort, storyboardId);\n                // Codebase ID doesn't change\n                parentPort.postMessage({\n                    id: constantsAndTypes_1.FIXED_IFRAME_MESSAGE_IDS.SELECTED_ELEMENT_KEY,\n                    elementKey: newSelectedElementKey,\n                    outerHTML: (_e = (0, jquery_1.default)(`.${identifierUtils_1.ELEMENT_KEY_PREFIX}${newSelectedElementKey}`).get(0)) === null || _e === void 0 ? void 0 : _e.outerHTML,\n                });\n                (0, sessionStorageUtils_1.setMemoryStorageItem)(sessionStorageUtils_1.SELECTED_ELEMENT_KEY, newSelectedElementKey);\n                (0, outlineUtils_1.updateOutlines)(parentPort, storyboardId);\n            }\n        }\n    };\n    // @ts-ignore\n    window.tempAddDiv = (parentPort, storyboardId, parentCodebaseId, indexInParent, width, height) => {\n        const element = (0, jquery_1.default)(`.${identifierUtils_1.TEMPO_INSTANT_DIV_DRAW_CLASS}`);\n        if (element.length) {\n            element.css('width', width);\n            element.css('height', height);\n        }\n        else {\n            let parent = (0, jquery_1.default)(`.${parentCodebaseId}`);\n            if (!parent.length) {\n                parent = (0, jquery_1.default)('body');\n            }\n            parent.each((index, item) => {\n                const newElement = (0, jquery_1.default)(`<div class=\"${identifierUtils_1.TEMPO_INSTANT_DIV_DRAW_CLASS}\" ${identifierUtils_1.TEMPO_DELETE_AFTER_INSTANT_UPDATE}=\"true\" ${identifierUtils_1.TEMPO_DELETE_AFTER_REFRESH}=\"true\" ${identifierUtils_1.TEMPO_INSTANT_UPDATE}=\"true\"></div>`);\n                const childAtIndex = (0, jquery_1.default)(item).children().eq(indexInParent);\n                if (childAtIndex === null || childAtIndex === void 0 ? void 0 : childAtIndex.length) {\n                    childAtIndex.before(newElement);\n                }\n                else {\n                    (0, jquery_1.default)(item).append(newElement);\n                }\n            });\n            // Update the nav tree\n            buildAndSendNavTree(parentPort, storyboardId);\n        }\n        (0, outlineUtils_1.updateOutlines)(parentPort, storyboardId);\n    };\n    // @ts-ignore\n    window.tempMoveToNewParent = (parentPort, storyboardId, indicatorWidth, indicatorHeight, newPositionX, newPositionY, parentElementKey, clear) => {\n        (0, jquery_1.default)(`.${identifierUtils_1.TEMPO_MOVE_BETWEEN_PARENTS_OUTLINE}`).remove();\n        if (clear) {\n            return;\n        }\n        const newElement = document.createElement('div');\n        newElement.classList.add(identifierUtils_1.TEMPO_MOVE_BETWEEN_PARENTS_OUTLINE);\n        newElement.setAttribute(identifierUtils_1.TEMPO_INSTANT_UPDATE, 'true'); // Add so it doesn't trigger new nav tree building\n        newElement.style.width = indicatorWidth + 'px';\n        newElement.style.height = indicatorHeight + 'px';\n        newElement.style.left = newPositionX + 'px';\n        newElement.style.top = newPositionY + 'px';\n        newElement.style.position = 'fixed';\n        newElement.style.pointerEvents = 'none';\n        newElement.style.zIndex = '2000000004';\n        newElement.style.boxSizing = 'border-box';\n        newElement.style.cursor = 'default !important';\n        newElement.style.backgroundColor = outlineUtils_1.PRIMARY_OUTLINE_COLOUR;\n        const body = document.getElementsByTagName('body')[0];\n        body.appendChild(newElement);\n        const parentDomElement = (0, jquery_1.default)(`.${identifierUtils_1.ELEMENT_KEY_PREFIX}${parentElementKey}`).get(0);\n        if (parentDomElement) {\n            const boundingRect = parentDomElement.getBoundingClientRect();\n            const parentOutline = (0, outlineUtils_1.getOutlineElement)(parentPort, outlineUtils_1.OutlineType.PRIMARY, boundingRect.left, boundingRect.top, boundingRect.width, boundingRect.height);\n            parentOutline.classList.remove(identifierUtils_1.OUTLINE_CLASS);\n            parentOutline.classList.add(identifierUtils_1.TEMPO_MOVE_BETWEEN_PARENTS_OUTLINE);\n            parentOutline.setAttribute(identifierUtils_1.TEMPO_INSTANT_UPDATE, 'true'); // Add so it doesn't trigger new nav tree building\n            body.appendChild(parentOutline);\n        }\n    };\n    // @ts-ignore\n    window.checkIfHydrationError = (parentPort, storyboardId) => {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;\n        let errorDescr, errorLabel, errorBody, hasError;\n        if (window.location.href.includes('framework=VITE')) {\n            // @ts-ignore\n            const errorPortal = (_a = document.getElementsByTagName('vite-error-overlay')[0]) === null || _a === void 0 ? void 0 : _a.shadowRoot;\n            errorDescr = 'A Vite Error Occurred';\n            errorLabel =\n                (_d = (_c = (_b = errorPortal === null || errorPortal === void 0 ? void 0 : errorPortal.querySelectorAll) === null || _b === void 0 ? void 0 : _b.call(errorPortal, '.file-link')) === null || _c === void 0 ? void 0 : _c[0]) === null || _d === void 0 ? void 0 : _d.innerHTML;\n            errorBody = (_g = (_f = (_e = errorPortal === null || errorPortal === void 0 ? void 0 : errorPortal.querySelectorAll) === null || _e === void 0 ? void 0 : _e.call(errorPortal, '.message')) === null || _f === void 0 ? void 0 : _f[0]) === null || _g === void 0 ? void 0 : _g.innerHTML;\n            hasError = Boolean(errorLabel || errorBody);\n        }\n        else {\n            // @ts-ignore\n            const errorPortal = (_h = document.getElementsByTagName('nextjs-portal')[0]) === null || _h === void 0 ? void 0 : _h.shadowRoot;\n            errorDescr = (_k = (_j = errorPortal === null || errorPortal === void 0 ? void 0 : errorPortal.getElementById) === null || _j === void 0 ? void 0 : _j.call(errorPortal, 'nextjs__container_errors_desc')) === null || _k === void 0 ? void 0 : _k.innerHTML;\n            errorLabel = (_m = (_l = errorPortal === null || errorPortal === void 0 ? void 0 : errorPortal.getElementById) === null || _l === void 0 ? void 0 : _l.call(errorPortal, 'nextjs__container_errors_label')) === null || _m === void 0 ? void 0 : _m.innerHTML;\n            errorBody = (_q = (_p = (_o = errorPortal === null || errorPortal === void 0 ? void 0 : errorPortal.querySelectorAll) === null || _o === void 0 ? void 0 : _o.call(errorPortal, '.nextjs-container-errors-body')) === null || _p === void 0 ? void 0 : _p[0]) === null || _q === void 0 ? void 0 : _q.innerHTML;\n            hasError = Boolean(errorDescr);\n        }\n        // Check if the contents of the hydration container contain the text \"Hydration failed\"\n        if (hasError) {\n            if (errorDescr === null || errorDescr === void 0 ? void 0 : errorDescr.includes('Hydration failed')) {\n                parentPort.postMessage({\n                    id: constantsAndTypes_1.FIXED_IFRAME_MESSAGE_IDS.LATEST_HYDRATION_ERROR_STATUS,\n                    status: constantsAndTypes_1.STORYBOARD_HYDRATION_STATUS.ERROR,\n                    errorDescr,\n                    errorLabel,\n                    errorBody,\n                });\n            }\n            else {\n                parentPort.postMessage({\n                    id: constantsAndTypes_1.FIXED_IFRAME_MESSAGE_IDS.LATEST_HYDRATION_ERROR_STATUS,\n                    status: constantsAndTypes_1.STORYBOARD_HYDRATION_STATUS.OTHER_ERROR,\n                    errorDescr,\n                    errorLabel,\n                    errorBody,\n                });\n            }\n        }\n        else {\n            parentPort.postMessage({\n                id: constantsAndTypes_1.FIXED_IFRAME_MESSAGE_IDS.LATEST_HYDRATION_ERROR_STATUS,\n                status: constantsAndTypes_1.STORYBOARD_HYDRATION_STATUS.NO_ERROR,\n            });\n        }\n    };\n    // @ts-ignore\n    window.triggerDragStart = (parentPort, storyboardId) => {\n        const selectedElementKey = (0, sessionStorageUtils_1.getMemoryStorageItem)(sessionStorageUtils_1.SELECTED_ELEMENT_KEY);\n        const elementKeyToNavNode = (0, sessionStorageUtils_1.getMemoryStorageItem)(sessionStorageUtils_1.ELEMENT_KEY_TO_NAV_NODE) || {};\n        // Something has to be selected to trigger a drag start\n        if (!selectedElementKey) {\n            return;\n        }\n        const draggedNavNode = elementKeyToNavNode[selectedElementKey];\n        const parentDomElement = getParentDomElementForNavNode(draggedNavNode);\n        const selectedElement = (0, jquery_1.default)(`.${identifierUtils_1.ELEMENT_KEY_PREFIX}${selectedElementKey}`).get(0);\n        const mouseDragContext = {\n            // Start off screen, this will get updated by onMouseMove\n            pageX: -10000,\n            pageY: -10000,\n            // The difference between where the user clicked and the center of the element\n            offsetX: 0,\n            offsetY: 0,\n            dragging: true,\n            selectedParentDisplay: (0, cssFunctions_1.cssEval)(parentDomElement, 'display'),\n            selectedParentFlexDirection: (0, cssFunctions_1.cssEval)(parentDomElement, 'flex-direction'),\n        };\n        (0, sessionStorageUtils_1.setMemoryStorageItem)('mouseDragContext', mouseDragContext);\n        // Trigger the drag start event\n        parentPort.postMessage({\n            id: constantsAndTypes_1.FIXED_IFRAME_MESSAGE_IDS.DRAG_START_EVENT,\n            event: mouseDragContext,\n            outerHTML: selectedElement === null || selectedElement === void 0 ? void 0 : selectedElement.outerHTML,\n        });\n        (0, outlineUtils_1.updateOutlines)(parentPort, storyboardId);\n    };\n    // @ts-ignore\n    window.triggerDragCancel = (parentPort, storyboardId) => {\n        (0, sessionStorageUtils_1.setMemoryStorageItem)('mouseDragContext', null);\n        parentPort.postMessage({\n            id: constantsAndTypes_1.FIXED_IFRAME_MESSAGE_IDS.DRAG_CANCEL_EVENT,\n            event: {},\n        });\n        (0, outlineUtils_1.updateOutlines)(parentPort, storyboardId);\n    };\n    // @ts-ignore\n    window.setIsFlushing = (parentPort, storyboardId, isFlushing) => {\n        const wasFlushing = (0, sessionStorageUtils_1.getMemoryStorageItem)(sessionStorageUtils_1.IS_FLUSHING);\n        (0, sessionStorageUtils_1.setMemoryStorageItem)(sessionStorageUtils_1.IS_FLUSHING, isFlushing);\n        if (isFlushing && !wasFlushing) {\n            onFlushStart();\n        }\n    };\n};\nexports.initChannelMessagingFunctions = initChannelMessagingFunctions;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/tempo-devtools/dist/channelMessaging/channelMessagingFunctions.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/tempo-devtools/dist/channelMessaging/constantsAndTypes.js":
/*!********************************************************************************!*\
  !*** ./node_modules/tempo-devtools/dist/channelMessaging/constantsAndTypes.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.STORYBOARD_HYDRATION_STATUS = exports.SELECT_OR_HOVER_STORYBOARD = exports.DELETE_STYLE_CONSTANT = exports.FIXED_IFRAME_MESSAGE_IDS = exports.INHERITABLE_CSS_PROPS = exports.CSS_VALUES_TO_COLLECT_FOR_PARENT = exports.CSS_VALUES_TO_COLLECT = void 0;\nexports.CSS_VALUES_TO_COLLECT = new Set([\n    'display',\n    'flex-direction',\n    'flex-grow',\n    'flex-shrink',\n    'font-family',\n    'align-items',\n    'justify-content',\n    'column-gap',\n    'row-gap',\n    'flex-wrap',\n    'align-content',\n    'overflow',\n    'text-align',\n    'width',\n    'max-width',\n    'min-width',\n    'height',\n    'max-height',\n    'min-height',\n    'font-size',\n    'line-height',\n    'padding',\n    'padding-top',\n    'padding-left',\n    'padding-right',\n    'padding-bottom',\n    'margin',\n    'margin-top',\n    'margin-left',\n    'margin-right',\n    'margin-bottom',\n    'border-radius',\n    'font-family',\n    'font-weight',\n    'object-fit',\n    'background-clip',\n    'border-left-style',\n    'border-top-style',\n    'border-right-style',\n    'border-bottom-style',\n    'border-left-width',\n    'border-top-width',\n    'border-right-width',\n    'border-bottom-width',\n    'border-left-color',\n    'border-top-color',\n    'border-right-color',\n    'border-bottom-color',\n    'background-color',\n    'color',\n    'transform',\n    'border-top-left-radius',\n    'border-top-right-radius',\n    'border-bottom-right-radius',\n    'border-bottom-left-radius',\n    'letter-spacing',\n    'opacity',\n    'font-style',\n    'text-decoration-line',\n    'top',\n    'left',\n    'right',\n    'bottom',\n    'position',\n    'background-image',\n]);\nexports.CSS_VALUES_TO_COLLECT_FOR_PARENT = new Set([\n    'display',\n    'flex-direction',\n]);\n// Taken from https://web.dev/learn/css/inheritance/\nexports.INHERITABLE_CSS_PROPS = {\n    azimuth: true,\n    'border-collapse': true,\n    'border-spacing': true,\n    'caption-side': true,\n    color: true,\n    cursor: true,\n    direction: true,\n    'empty-cells': true,\n    'font-family': true,\n    'font-size': true,\n    'font-style': true,\n    'font-variant': true,\n    'font-weight': true,\n    font: true,\n    'letter-spacing': true,\n    'line-height': true,\n    'list-style-image': true,\n    'list-style-position': true,\n    'list-style-type': true,\n    'list-style': true,\n    orphans: true,\n    quotes: true,\n    'text-align': true,\n    'text-indent': true,\n    'text-transform': true,\n    visibility: true,\n    'white-space': true,\n    widows: true,\n    'word-spacing': true,\n};\n// Matches the interface on the frontend\nvar FIXED_IFRAME_MESSAGE_IDS;\n(function (FIXED_IFRAME_MESSAGE_IDS) {\n    FIXED_IFRAME_MESSAGE_IDS[\"HOVERED_ELEMENT_KEY\"] = \"HOVERED_ELEMENT_KEY\";\n    FIXED_IFRAME_MESSAGE_IDS[\"SELECTED_ELEMENT_KEY\"] = \"SELECTED_ELEMENT_KEY\";\n    FIXED_IFRAME_MESSAGE_IDS[\"MULTI_SELECTED_ELEMENT_KEYS\"] = \"MULTI_SELECTED_ELEMENT_KEYS\";\n    FIXED_IFRAME_MESSAGE_IDS[\"CONTEXT_REQUESTED\"] = \"CONTEXT_REQUESTED\";\n    FIXED_IFRAME_MESSAGE_IDS[\"WHEEL_EVENT\"] = \"WHEEL_EVENT\";\n    FIXED_IFRAME_MESSAGE_IDS[\"NAV_TREE\"] = \"NAV_TREE\";\n    FIXED_IFRAME_MESSAGE_IDS[\"PROCESSED_CSS_RULES_FOR_ELEMENT\"] = \"PROCESSED_CSS_RULES_FOR_ELEMENT\";\n    FIXED_IFRAME_MESSAGE_IDS[\"CSS_EVALS_FOR_ELEMENT\"] = \"CSS_EVALS_FOR_ELEMENT\";\n    FIXED_IFRAME_MESSAGE_IDS[\"ELEMENT_CLASS_LIST\"] = \"ELEMENT_CLASS_LIST\";\n    FIXED_IFRAME_MESSAGE_IDS[\"KEY_DOWN_EVENT\"] = \"KEY_DOWN_EVENT\";\n    FIXED_IFRAME_MESSAGE_IDS[\"KEY_UP_EVENT\"] = \"KEY_UP_EVENT\";\n    FIXED_IFRAME_MESSAGE_IDS[\"MOUSE_MOVE_EVENT\"] = \"MOUSE_MOVE_EVENT\";\n    FIXED_IFRAME_MESSAGE_IDS[\"DRAG_START_EVENT\"] = \"DRAG_START_EVENT\";\n    FIXED_IFRAME_MESSAGE_IDS[\"DRAG_END_EVENT\"] = \"DRAG_END_EVENT\";\n    FIXED_IFRAME_MESSAGE_IDS[\"DRAG_CANCEL_EVENT\"] = \"DRAG_CANCEL_EVENT\";\n    FIXED_IFRAME_MESSAGE_IDS[\"LATEST_HREF\"] = \"LATEST_HREF\";\n    FIXED_IFRAME_MESSAGE_IDS[\"LATEST_HYDRATION_ERROR_STATUS\"] = \"LATEST_HYDRATION_ERROR_STATUS\";\n    FIXED_IFRAME_MESSAGE_IDS[\"START_EDITING_TEXT\"] = \"START_EDITING_TEXT\";\n    FIXED_IFRAME_MESSAGE_IDS[\"EDITED_TEXT\"] = \"EDITED_TEXT\";\n    FIXED_IFRAME_MESSAGE_IDS[\"INSTANT_UPDATE_DONE\"] = \"INSTANT_UPDATE_DONE\";\n    FIXED_IFRAME_MESSAGE_IDS[\"EDIT_DYNAMIC_TEXT\"] = \"EDIT_DYNAMIC_TEXT\";\n})(FIXED_IFRAME_MESSAGE_IDS || (exports.FIXED_IFRAME_MESSAGE_IDS = FIXED_IFRAME_MESSAGE_IDS = {}));\nexports.DELETE_STYLE_CONSTANT = null;\nexports.SELECT_OR_HOVER_STORYBOARD = 'SELECT_OR_HOVER_STORYBOARD';\nvar STORYBOARD_HYDRATION_STATUS;\n(function (STORYBOARD_HYDRATION_STATUS) {\n    STORYBOARD_HYDRATION_STATUS[\"OTHER_ERROR\"] = \"other_error\";\n    STORYBOARD_HYDRATION_STATUS[\"ERROR\"] = \"error\";\n    STORYBOARD_HYDRATION_STATUS[\"NO_ERROR\"] = \"no_error\";\n})(STORYBOARD_HYDRATION_STATUS || (exports.STORYBOARD_HYDRATION_STATUS = STORYBOARD_HYDRATION_STATUS = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/tempo-devtools/dist/channelMessaging/constantsAndTypes.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/tempo-devtools/dist/channelMessaging/cssFunctions.js":
/*!***************************************************************************!*\
  !*** ./node_modules/tempo-devtools/dist/channelMessaging/cssFunctions.js ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ruleMatchesElement = exports.getElementClassList = exports.getCssEvals = exports.cssEval = exports.processRulesForSelectedElement = exports.setModifiersForSelectedElement = exports.parse = void 0;\n// @ts-ignore\nconst jquery_1 = __importDefault(__webpack_require__(/*! jquery */ \"(ssr)/./node_modules/jquery/dist/jquery.js\"));\nconst identifierUtils_1 = __webpack_require__(/*! ./identifierUtils */ \"(ssr)/./node_modules/tempo-devtools/dist/channelMessaging/identifierUtils.js\");\nconst cssRuleUtils_1 = __webpack_require__(/*! ./cssRuleUtils */ \"(ssr)/./node_modules/tempo-devtools/dist/channelMessaging/cssRuleUtils.js\");\nconst constantsAndTypes_1 = __webpack_require__(/*! ./constantsAndTypes */ \"(ssr)/./node_modules/tempo-devtools/dist/channelMessaging/constantsAndTypes.js\");\nconst uuid_1 = __webpack_require__(/*! uuid */ \"(ssr)/./node_modules/uuid/dist/esm-node/index.js\");\nconst specificity_1 = __webpack_require__(/*! specificity */ \"(ssr)/./node_modules/specificity/dist/specificity.mjs\");\nconst tempoElement_1 = __webpack_require__(/*! ./tempoElement */ \"(ssr)/./node_modules/tempo-devtools/dist/channelMessaging/tempoElement.js\");\nconst css_selector_parser_1 = __webpack_require__(/*! css-selector-parser */ \"(ssr)/./node_modules/css-selector-parser/dist/cjs/index.js\");\nconst sessionStorageUtils_1 = __webpack_require__(/*! ./sessionStorageUtils */ \"(ssr)/./node_modules/tempo-devtools/dist/channelMessaging/sessionStorageUtils.js\");\nconst navTreeUtils_1 = __webpack_require__(/*! ./navTreeUtils */ \"(ssr)/./node_modules/tempo-devtools/dist/channelMessaging/navTreeUtils.js\");\nexports.parse = (0, css_selector_parser_1.createParser)({\n    syntax: {\n        baseSyntax: 'latest',\n        pseudoClasses: {\n            unknown: 'accept',\n            definitions: {\n                Selector: ['has'],\n            },\n        },\n        pseudoElements: {\n            unknown: 'accept',\n        },\n        combinators: ['>', '+', '~'],\n        attributes: {\n            operators: ['^=', '$=', '*=', '~='],\n        },\n        classNames: true,\n        namespace: {\n            wildcard: true,\n        },\n        tag: {\n            wildcard: true,\n        },\n    },\n    substitutes: true,\n});\nconst addCSSRule = (styleSheet, selector, rules, index) => {\n    try {\n        if (styleSheet.insertRule) {\n            styleSheet.insertRule(`${selector} { ${rules} }`, index);\n        }\n        else {\n            styleSheet.addRule(selector, rules, index);\n        }\n    }\n    catch (e) {\n        console.log('Error adding rule: ', e);\n    }\n};\n/**\n * This method filters and process media query rules for responsive modifiers to extract Tailwind responsive classes.\n * A Tailwind responsive modifiers takes the form:\n *\n *   {sm,md,lg...}:className\n *\n * which is represented as:\n *\n * @media (min-width: 640px) {\n *    .sm\\:className {\n *     ...\n *   }\n * }\n *\n * This is why we need to filter for media query rules with min-width and then extract the class name.\n * @param rule\n * @returns\n */\nconst processMediaQueryRulesForResponsiveModifiers = (rule) => {\n    let rules = [];\n    if (rule instanceof CSSMediaRule) {\n        // Loop through each CSSRule within the CSSMediaRule\n        for (let innerRule of rule.cssRules) {\n            // Check for min-width in media queries and that it is a style rule\n            if (rule.media.mediaText.includes('min-width') &&\n                innerRule instanceof CSSStyleRule) {\n                const parsedIsSelector = (0, exports.parse)(innerRule.selectorText);\n                if (parsedIsSelector.type !== 'Selector') {\n                    continue;\n                }\n                const lastRule = parsedIsSelector.rules[0];\n                const classNames = lastRule.items.filter((item) => item.type === 'ClassName').map((item) => item.name);\n                if (classNames.length !== 1) {\n                    continue;\n                }\n                // Extract Tailwind responsive modifiers\n                rules.push({\n                    class: classNames[0],\n                    pseudos: extractTailwindPrefixes(classNames[0]),\n                    cssText: innerRule.style.cssText,\n                    style: innerRule.style,\n                });\n            }\n        }\n    }\n    return rules;\n};\n/**\n * Since Tailwind CSS responsive modifiers are not CSS pseudo classes, we need to extract them from the class name.\n * We use a regex to match the responsive prefixes and return them as a set.\n * @param selectorText\n * @returns Set[prefixes]\n */\nconst extractTailwindPrefixes = (selectorText) => {\n    // This regex matches classes with responsive prefixes that might be preceded by a period or another colon\n    const prefixRegex = /(?:\\b|(?<=[:.]))(sm|md|lg|xl|2xl)\\\\?:[\\w-]+/g;\n    const matches = selectorText.match(prefixRegex) || [];\n    const prefixes = matches.map((match) => {\n        // Find the index of the colon or escaped colon\n        const index = match.indexOf(match.includes('\\\\:') ? '\\\\:' : ':');\n        return match.substring(0, index);\n    });\n    return [...new Set(prefixes)]; // Remove duplicates\n};\n/**\n * Tailwind CSS dark mode classes (< 3.4.1) are specified using the `:is` pseudo selector and take the form\n *   :is(.dark .dark:bg-red-200)\n * This is to support the behaviour that dark mode classes are applied to the element when the dark class is present in the parent.\n *\n * TODO: We should support the new Tailwind CSS dark mode classes in 3.4.1 and above which are specified using the `@media (prefers-color-scheme: dark)` media query.\n * @param isSelectorString\n * @returns\n */\nconst processIsSelectorForDarkMode = (isSelector) => {\n    if (isSelector.type !== 'Selector') {\n        return;\n    }\n    const firstRule = isSelector.rules[0];\n    const classNames = firstRule.items.filter((item) => item.type === 'ClassName').map((item) => item.name);\n    if (classNames.length === 0 || classNames[0] !== 'dark') {\n        return;\n    }\n    const nestedRule = firstRule.nestedRule;\n    if (!nestedRule) {\n        return;\n    }\n    let darkModeClasses = [];\n    const nestedClassNames = nestedRule.items.filter((item) => item.type === 'ClassName').map((item) => item.name);\n    if (nestedClassNames.length > 1) {\n        console.log('Skipping is selector with multiple classes', firstRule);\n        return;\n    }\n    darkModeClasses.push({\n        class: nestedClassNames[0],\n        pseudos: [\n            'dark',\n            ...nestedRule.items.filter((item) => item.type === 'PseudoClass').map((p) => p.name),\n        ],\n    });\n    return darkModeClasses;\n};\nconst setModifiersForSelectedElement = (parentPort, modifiers, selectedElementKey) => {\n    // Remove all existing force classes from entire document\n    const allElements = document.querySelectorAll('[class*=\"tempo-force-\"]');\n    allElements.forEach((element) => {\n        const classes = Array.from(element.classList);\n        classes.forEach((cls) => {\n            if (cls.startsWith('tempo-force-')) {\n                element.classList.remove(cls);\n            }\n        });\n    });\n    const selectedElement = tempoElement_1.TempoElement.fromKey(selectedElementKey);\n    if (selectedElement.isEmpty()) {\n        return;\n    }\n    const selectedDomElement = (0, jquery_1.default)(`.${identifierUtils_1.ELEMENT_KEY_PREFIX}${selectedElement.getKey()}`).get(0);\n    if (!selectedDomElement) {\n        return;\n    }\n    modifiers.forEach((modifier) => {\n        selectedDomElement.classList.add('tempo-force-' + modifier);\n    });\n};\nexports.setModifiersForSelectedElement = setModifiersForSelectedElement;\nconst processRulesForSelectedElement = (parentPort, cssElementLookup, selectedElementKey) => {\n    var _a, _b, _c, _d, _e;\n    // TODO: this whole function is slow, fix\n    if (!cssElementLookup) {\n        return;\n    }\n    const selectedElement = tempoElement_1.TempoElement.fromKey(selectedElementKey);\n    if (selectedElement.isEmpty()) {\n        return;\n    }\n    const selectedDomElement = (0, jquery_1.default)(`.${identifierUtils_1.ELEMENT_KEY_PREFIX}${selectedElement.getKey()}`).get(0);\n    const multiSelectedElementKeys = (0, sessionStorageUtils_1.getMemoryStorageItem)(sessionStorageUtils_1.MULTI_SELECTED_ELEMENT_KEYS) || [];\n    /**\n     * If there's no selected DOM element yet, it implies the nav tree isn't built yet.\n     * We register a callback to defer the processing of the rules until the nav tree is built.\n     */\n    if (!selectedDomElement) {\n        (0, navTreeUtils_1.addNavTreeBuiltCallback)({\n            callbackFn: () => {\n                (0, exports.processRulesForSelectedElement)(parentPort, cssElementLookup, selectedElementKey);\n            },\n            state: {\n                selectedElementKey: selectedElementKey,\n                multiSelectedElementKeys: multiSelectedElementKeys,\n            },\n        });\n        return;\n    }\n    const newProcessedCssRules = [];\n    const extractedKnownClasses = new Set();\n    const knownSelectors = new Set();\n    // First get the inline style of the element\n    const inlineStyleRule = {\n        filename: '',\n        selector: 'element.style',\n        source: {},\n        styles: {},\n        applied: true,\n        codebaseId: 'element.style',\n        removable: false,\n        allowChanges: true,\n    };\n    for (let i = 0; i < ((_a = selectedDomElement === null || selectedDomElement === void 0 ? void 0 : selectedDomElement.style) === null || _a === void 0 ? void 0 : _a.length) || 0; i++) {\n        const cssName = selectedDomElement.style[i];\n        // @ts-ignore\n        inlineStyleRule.styles[cssName] = selectedDomElement.style[cssName];\n    }\n    newProcessedCssRules.push(inlineStyleRule);\n    // Only check the inline-styles of the parent once\n    let checkedInlineStylesOfParent = false;\n    const directMatchCssRules = [];\n    const otherCssRules = [];\n    Object.keys(cssElementLookup).forEach((codebaseId) => {\n        var _a;\n        const cssRule = cssElementLookup[codebaseId];\n        knownSelectors.add(cssRule.selector);\n        if (!(0, cssRuleUtils_1.isCssSelectorValid)(cssRule.selector)) {\n            return;\n        }\n        (0, cssRuleUtils_1.getAllClassesFromSelector)(cssRule.selector).forEach((cls) => {\n            extractedKnownClasses.add(cls);\n        });\n        // First check if a rule directly matches\n        if ((0, cssRuleUtils_1.isCssSelectorValid)(cssRule.selector) &&\n            (selectedDomElement === null || selectedDomElement === void 0 ? void 0 : selectedDomElement.matches(cssRule.selector))) {\n            directMatchCssRules.push(Object.assign(Object.assign({}, cssRule), { applied: true, allowChanges: true, removable: (0, cssRuleUtils_1.canRemoveCssClassFromElement)(cssRule.selector, selectedDomElement) }));\n            return;\n        }\n        // In order to make the parentElement.style selector unique\n        let parentElementIndex = 0;\n        // Then check the parents if it's a rule with properties that are inherited\n        let parentDomElement = selectedDomElement === null || selectedDomElement === void 0 ? void 0 : selectedDomElement.parentElement;\n        const inheritedStyles = {};\n        while (parentDomElement) {\n            // Inline styles are prioritized over rule based styles\n            if (!checkedInlineStylesOfParent) {\n                const inlineStyleOfParent = {};\n                for (let i = 0; i < ((_a = parentDomElement === null || parentDomElement === void 0 ? void 0 : parentDomElement.style) === null || _a === void 0 ? void 0 : _a.length) || 0; i++) {\n                    const cssName = parentDomElement.style[i];\n                    if (constantsAndTypes_1.INHERITABLE_CSS_PROPS[cssName]) {\n                        inlineStyleOfParent[cssName] = parentDomElement.style[cssName];\n                    }\n                }\n                if (Object.keys(inlineStyleOfParent).length !== 0) {\n                    otherCssRules.push({\n                        filename: '',\n                        // TODO: make this unique\n                        selector: `parentElement${parentElementIndex}.style`,\n                        inherited: true,\n                        source: {},\n                        styles: inlineStyleOfParent,\n                        applied: true,\n                        codebaseId: `parentElement${parentElementIndex}.style`,\n                        removable: false,\n                        allowChanges: false,\n                    });\n                }\n            }\n            // Css defined styles\n            if ((0, cssRuleUtils_1.isCssSelectorValid)(cssRule.selector) &&\n                !(parentDomElement === null || parentDomElement === void 0 ? void 0 : parentDomElement.matches(cssRule.selector))) {\n                parentDomElement = parentDomElement.parentElement;\n                continue;\n            }\n            Object.keys((cssRule === null || cssRule === void 0 ? void 0 : cssRule.styles) || {}).forEach((cssName) => {\n                // Prioritize inherited styles that are further down the tree\n                if (constantsAndTypes_1.INHERITABLE_CSS_PROPS[cssName] &&\n                    inheritedStyles[cssName] !== null) {\n                    inheritedStyles[cssName] = cssRule.styles[cssName];\n                }\n            });\n            parentDomElement = parentDomElement.parentElement;\n            parentElementIndex += 1;\n        }\n        // Check once across all css rules\n        checkedInlineStylesOfParent = true;\n        // Just because a css rule is inherited doesn't mean it can't be eligible to apply,\n        // so do not return after appending this rule\n        if (Object.keys(inheritedStyles).length !== 0) {\n            otherCssRules.push(Object.assign(Object.assign({}, cssRule), { inherited: true, styles: inheritedStyles, applied: true, removable: false, allowChanges: false }));\n        }\n        // Finally check if it's a rule that can be applied if clases are changed\n        otherCssRules.push(Object.assign(Object.assign({}, cssRule), { applied: false, allowChanges: false, eligibleToApply: (0, cssRuleUtils_1.canApplyCssRuleToElement)(cssRule.selector, selectedDomElement) }));\n    });\n    const mainStyleSheet = document.styleSheets[0];\n    // Add any rules not previously added that are available in the stylesheets as read-only\n    for (let i = 0; i < document.styleSheets.length; i += 1) {\n        const sheet = document.styleSheets[i];\n        let rules = null;\n        try {\n            rules = sheet.cssRules;\n        }\n        catch (e) {\n            console.log(e);\n            try {\n                rules = sheet.rules;\n            }\n            catch (e) {\n                console.log(e);\n            }\n        }\n        if (!rules) {\n            continue;\n        }\n        for (let j = 0; j < rules.length; j += 1) {\n            const rule = rules[j];\n            /**\n             * Handle Tailwind CSS responsive modifiers\n             */\n            const responsiveModifiers = processMediaQueryRulesForResponsiveModifiers(rule);\n            if (responsiveModifiers.length > 0) {\n                for (let k = 0; k < responsiveModifiers.length; k++) {\n                    const modifier = responsiveModifiers[k];\n                    if (!(selectedDomElement === null || selectedDomElement === void 0 ? void 0 : selectedDomElement.matches('.' + CSS.escape(modifier.class)))) {\n                        continue;\n                    }\n                    const styling = {};\n                    for (let l = 0; l < ((_b = modifier === null || modifier === void 0 ? void 0 : modifier.style) === null || _b === void 0 ? void 0 : _b.length) || 0; l += 1) {\n                        const cssName = modifier === null || modifier === void 0 ? void 0 : modifier.style[l];\n                        // @ts-ignore;\n                        styling[cssName] = modifier === null || modifier === void 0 ? void 0 : modifier.style[cssName];\n                    }\n                    const ruleToPush = {\n                        filename: undefined,\n                        selector: CSS.escape('.' + modifier.class),\n                        classParsed: modifier.class,\n                        source: {},\n                        styles: styling,\n                        applied: true,\n                        modifiers: Object.assign({}, modifier.pseudos.reduce((acc, pseudo) => {\n                            acc[pseudo] = true;\n                            return acc;\n                        }, {})),\n                        // Generate a random codebase ID to use for selection\n                        // Note: this ID is shown as a backup in the overridden tooltip\n                        codebaseId: `${modifier.class} ${(0, uuid_1.v4)().toString()}`,\n                        removable: false,\n                        allowChanges: false,\n                        cssText: modifier.cssText,\n                    };\n                    directMatchCssRules.push(ruleToPush);\n                }\n            }\n            if (!rule.selectorText) {\n                continue;\n            }\n            if (knownSelectors.has(rule.selectorText)) {\n                continue;\n            }\n            const parsedCssRule = (0, exports.parse)(rule.selectorText);\n            if (parsedCssRule.type !== 'Selector') {\n                continue;\n            }\n            const firstRule = parsedCssRule.rules[0];\n            if (!firstRule) {\n                continue;\n            }\n            /**\n             * This is a special case for the `:is` pseudo selector, which is how Tailwind specifies dark mode classes.\n             */\n            const classNames = firstRule.items.filter((item) => item.type === 'ClassName').map((item) => item.name);\n            const pseudos = firstRule.items.filter((item) => item.type === 'PseudoClass');\n            // TODO: Add support for https://github.com/tailwindlabs/tailwindcss/pull/13379 (~3.4.4)\n            if (classNames.length === 0 &&\n                pseudos.length === 1 &&\n                pseudos[0].name === 'is') {\n                const pseudo = pseudos[0];\n                if (pseudo && ((_c = pseudo.argument) === null || _c === void 0 ? void 0 : _c.type) === 'Selector') {\n                    const darkModeClasses = processIsSelectorForDarkMode(pseudo.argument);\n                    if (darkModeClasses) {\n                        for (const darkModeClass of darkModeClasses) {\n                            if (!(selectedDomElement === null || selectedDomElement === void 0 ? void 0 : selectedDomElement.matches('.' + CSS.escape(darkModeClass.class)))) {\n                                continue;\n                            }\n                            const styling = {};\n                            for (let k = 0; k < ((_d = rule === null || rule === void 0 ? void 0 : rule.style) === null || _d === void 0 ? void 0 : _d.length) || 0; k += 1) {\n                                const cssName = rule.style[k];\n                                styling[cssName] = rule.style[cssName];\n                            }\n                            const ruleToPush = {\n                                filename: undefined,\n                                selector: CSS.escape('.' + darkModeClass.class),\n                                classParsed: darkModeClass.class,\n                                source: {},\n                                styles: styling,\n                                applied: true,\n                                modifiers: Object.assign({}, darkModeClass.pseudos.reduce((acc, pseudo) => {\n                                    acc[pseudo] = true;\n                                    return acc;\n                                }, {})),\n                                // Generate a random codebase ID to use for selection\n                                // Note: this ID is shown as a backup in the overridden tooltip\n                                codebaseId: `${rule.selectorText} ${(0, uuid_1.v4)().toString()}`,\n                                removable: false,\n                                allowChanges: false,\n                                cssText: rule.style.cssText,\n                            };\n                            directMatchCssRules.push(ruleToPush);\n                        }\n                    }\n                }\n            }\n            if (classNames.length === 0 || classNames.length > 1) {\n                continue;\n            }\n            const cls = classNames[0];\n            const pseudoClasses = firstRule.items.filter((item) => item.type === 'PseudoClass').map((p) => p.name);\n            try {\n                if (selectedDomElement === null || selectedDomElement === void 0 ? void 0 : selectedDomElement.matches('.' + CSS.escape(cls))) {\n                    const styling = {};\n                    for (let k = 0; k < ((_e = rule === null || rule === void 0 ? void 0 : rule.style) === null || _e === void 0 ? void 0 : _e.length) || 0; k += 1) {\n                        const cssName = rule.style[k];\n                        styling[cssName] = rule.style[cssName];\n                    }\n                    directMatchCssRules.push({\n                        filename: undefined,\n                        selector: rule.selectorText,\n                        classParsed: cls,\n                        source: {},\n                        styles: styling,\n                        applied: true,\n                        modifiers: Object.assign({}, pseudoClasses.reduce((acc, pseudo) => {\n                            acc[pseudo.name] = true;\n                            return acc;\n                        }, {})),\n                        // Generate a random codebase ID to use for selection\n                        // Note: this ID is shown as a backup in the overridden tooltip\n                        codebaseId: `${rule.selectorText} ${(0, uuid_1.v4)().toString()}`,\n                        removable: false,\n                        allowChanges: false,\n                        cssText: rule.style.cssText,\n                    });\n                }\n                else {\n                    // console.log(\"NO MATCH\", cls)\n                }\n            }\n            catch (e) {\n                // console.error(e);\n            }\n        }\n    }\n    // For each direct match rule, check if it has modifiers and create a new rule for each modifier.\n    for (let i = 0; i < directMatchCssRules.length; i++) {\n        const currentRule = directMatchCssRules[i];\n        if (!currentRule.modifiers) {\n            continue;\n        }\n        const rulePseudos = Object.keys(currentRule.modifiers);\n        if (rulePseudos.length < 1) {\n            continue;\n        }\n        const cls = currentRule.classParsed;\n        if (!cls) {\n            continue;\n        }\n        const cssText = currentRule.cssText;\n        if (!cssText) {\n            continue;\n        }\n        // Create a new custom css rule for ones that have pseudo selectors.\n        // Use the parseClass as the selector and add `tempo-force-[pseudo]` for each pseudo selector\n        const pseudoSelector = rulePseudos\n            .map((pseudo) => '.tempo-force-' + pseudo)\n            .join('');\n        const newSelector = '.' + CSS.escape(cls) + pseudoSelector;\n        const newRules = cssText;\n        // // Inject new rule into the stylesheet\n        addCSSRule(mainStyleSheet, newSelector, newRules, mainStyleSheet.cssRules.length);\n    }\n    const newList = newProcessedCssRules\n        .concat(directMatchCssRules.sort((a, b) => {\n        try {\n            return -(0, specificity_1.compare)(a.selector, b.selector);\n        }\n        catch (_a) {\n            // Put the invalid elements at the end\n            let aValid = true;\n            try {\n                (0, specificity_1.compare)(a.selector, 'body');\n            }\n            catch (e) {\n                aValid = false;\n            }\n            let bValid = true;\n            try {\n                (0, specificity_1.compare)(b.selector, 'body');\n            }\n            catch (e) {\n                bValid = false;\n            }\n            if (aValid && !bValid) {\n                return -1;\n            }\n            if (!aValid && bValid) {\n                return 1;\n            }\n            return 0;\n        }\n    }))\n        .concat(otherCssRules);\n    parentPort.postMessage({\n        id: constantsAndTypes_1.FIXED_IFRAME_MESSAGE_IDS.PROCESSED_CSS_RULES_FOR_ELEMENT,\n        processedCssRules: newList,\n    });\n};\nexports.processRulesForSelectedElement = processRulesForSelectedElement;\nconst cssEval = (element, property) => {\n    return window.getComputedStyle(element, null).getPropertyValue(property);\n};\nexports.cssEval = cssEval;\nconst getCssEvals = (parentPort, selectedElementKey) => {\n    let cssEvals = {};\n    const selectdElement = tempoElement_1.TempoElement.fromKey(selectedElementKey);\n    if (selectdElement.isEmpty()) {\n        return;\n    }\n    const selectedDomElement = (0, jquery_1.default)(`.${identifierUtils_1.ELEMENT_KEY_PREFIX}${selectdElement.getKey()}`).get(0);\n    if (!selectedDomElement) {\n        return;\n    }\n    constantsAndTypes_1.CSS_VALUES_TO_COLLECT.forEach((cssName) => {\n        cssEvals[cssName] = (0, exports.cssEval)(selectedDomElement, cssName);\n    });\n    const parentCssEvals = {};\n    const parentElement = selectedDomElement.parentElement;\n    if (parentElement) {\n        constantsAndTypes_1.CSS_VALUES_TO_COLLECT_FOR_PARENT.forEach((cssName) => {\n            parentCssEvals[cssName] = (0, exports.cssEval)(selectedDomElement.parentElement, cssName);\n        });\n        // Use jQuery to check if 'dark' class is in any ancestor of the parent element\n        let darkEnabledInParent = (0, jquery_1.default)(`.${identifierUtils_1.ELEMENT_KEY_PREFIX}${selectdElement.getKey()}`).closest('.dark')\n            .length > 0;\n        parentCssEvals['darkEnabledInParent'] = darkEnabledInParent;\n    }\n    cssEvals['parent'] = parentCssEvals;\n    parentPort.postMessage({\n        id: constantsAndTypes_1.FIXED_IFRAME_MESSAGE_IDS.CSS_EVALS_FOR_ELEMENT,\n        cssEvals,\n    });\n};\nexports.getCssEvals = getCssEvals;\nconst getElementClassList = (parentPort, selectedElementKey) => {\n    const selectdElement = tempoElement_1.TempoElement.fromKey(selectedElementKey);\n    if (selectdElement.isEmpty()) {\n        return;\n    }\n    const selectedDomElement = (0, jquery_1.default)(`.${identifierUtils_1.ELEMENT_KEY_PREFIX}${selectdElement.getKey()}`).get(0);\n    if (!selectedDomElement) {\n        return;\n    }\n    parentPort.postMessage({\n        id: constantsAndTypes_1.FIXED_IFRAME_MESSAGE_IDS.ELEMENT_CLASS_LIST,\n        classList: Array.from(selectedDomElement.classList),\n    });\n};\nexports.getElementClassList = getElementClassList;\nconst ruleMatchesElement = (parentPort, messageId, rule, selectedElementKey) => {\n    if (!rule) {\n        return;\n    }\n    const selectdElement = tempoElement_1.TempoElement.fromKey(selectedElementKey);\n    if (selectdElement.isEmpty()) {\n        return;\n    }\n    const selectedDomElement = (0, jquery_1.default)(`.${identifierUtils_1.ELEMENT_KEY_PREFIX}${selectdElement.getKey()}`).get(0);\n    if (!selectedDomElement) {\n        return;\n    }\n    parentPort.postMessage({\n        id: messageId,\n        matches: selectedDomElement === null || selectedDomElement === void 0 ? void 0 : selectedDomElement.matches(rule),\n    });\n};\nexports.ruleMatchesElement = ruleMatchesElement;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/tempo-devtools/dist/channelMessaging/cssFunctions.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/tempo-devtools/dist/channelMessaging/cssRuleUtils.js":
/*!***************************************************************************!*\
  !*** ./node_modules/tempo-devtools/dist/channelMessaging/cssRuleUtils.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.camelToSnakeCase = exports.isCssSelectorValid = exports.getAllClassesFromSelector = exports.canRemoveCssClassFromElement = exports.canApplyCssRuleToElement = void 0;\nconst cssFunctions_1 = __webpack_require__(/*! ./cssFunctions */ \"(ssr)/./node_modules/tempo-devtools/dist/channelMessaging/cssFunctions.js\");\nconst canApplyCssRuleToElement = (cssRule, element) => {\n    var _a;\n    try {\n        if (!element) {\n            return false;\n        }\n        if (!(0, exports.isCssSelectorValid)(cssRule)) {\n            return false;\n        }\n        if (element.matches(cssRule)) {\n            return false;\n        }\n        const parsedCssRule = (0, cssFunctions_1.parse)(cssRule);\n        let lastRule = parsedCssRule;\n        while (lastRule.nestedRule) {\n            lastRule = lastRule.nestedRule;\n        }\n        const addedClasses = [];\n        const classes = new Set(element.classList);\n        (_a = lastRule.items) === null || _a === void 0 ? void 0 : _a.forEach((item) => {\n            if (item.type === 'ClassName') {\n                const cls = item.name;\n                if (!classes.has(cls)) {\n                    element.classList.add(cls);\n                    addedClasses.push(cls);\n                }\n            }\n        });\n        const canApply = element.matches(cssRule);\n        addedClasses.forEach((cls) => {\n            element.classList.remove(cls);\n        });\n        return canApply;\n    }\n    catch (e) {\n        console.error(e);\n        return false;\n    }\n};\nexports.canApplyCssRuleToElement = canApplyCssRuleToElement;\nconst canRemoveCssClassFromElement = (cssRule, element) => {\n    var _a;\n    try {\n        if (!(0, exports.isCssSelectorValid)(cssRule)) {\n            return false;\n        }\n        if (!element.matches(cssRule)) {\n            return false;\n        }\n        const parsedCssRule = (0, cssFunctions_1.parse)(cssRule);\n        let lastRule = parsedCssRule;\n        while (lastRule.nestedRule) {\n            lastRule = lastRule.nestedRule;\n        }\n        const removedClasses = [];\n        const classes = new Set(element.classList);\n        (_a = lastRule.items) === null || _a === void 0 ? void 0 : _a.forEach((item) => {\n            if (item.type === 'ClassName') {\n                const cls = item.name;\n                if (!classes.has(cls)) {\n                    return;\n                }\n                element.classList.remove(cls);\n                removedClasses.push(cls);\n            }\n        });\n        const canRemove = !element.matches(cssRule);\n        removedClasses.forEach((cls) => {\n            element.classList.add(cls);\n        });\n        return canRemove;\n    }\n    catch (e) {\n        console.error(e);\n        return false;\n    }\n};\nexports.canRemoveCssClassFromElement = canRemoveCssClassFromElement;\nconst getAllClassesFromSelector = (cssSelector) => {\n    try {\n        if (!(0, exports.isCssSelectorValid)(cssSelector)) {\n            return new Set();\n        }\n        const parsedCssRule = (0, cssFunctions_1.parse)(cssSelector);\n        let traverseRule = parsedCssRule;\n        const allClasses = new Set();\n        while (traverseRule) {\n            const items = traverseRule.items || [];\n            items.forEach((item) => {\n                if (item.type === 'ClassName') {\n                    allClasses.add(item.name);\n                }\n            });\n            traverseRule = traverseRule.nestedRule;\n        }\n        return allClasses;\n    }\n    catch (e) {\n        console.log('Failed to parse classes from selector ' + cssSelector + ', ' + e);\n        return new Set();\n    }\n};\nexports.getAllClassesFromSelector = getAllClassesFromSelector;\nconst queryCheck = (s) => document.createDocumentFragment().querySelector(s);\nconst isCssSelectorValid = (cssSelector) => {\n    try {\n        queryCheck(cssSelector);\n        const parsedCssRule = (0, cssFunctions_1.parse)(cssSelector);\n        return true;\n    }\n    catch (e) {\n        return false;\n    }\n};\nexports.isCssSelectorValid = isCssSelectorValid;\nconst camelToSnakeCase = (str) => {\n    if (!str)\n        return str;\n    return (str.charAt(0).toLowerCase() +\n        str.substring(1).replace(/[A-Z]/g, (letter) => `-${letter.toLowerCase()}`));\n};\nexports.camelToSnakeCase = camelToSnakeCase;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdGVtcG8tZGV2dG9vbHMvZGlzdC9jaGFubmVsTWVzc2FnaW5nL2Nzc1J1bGVVdGlscy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx3QkFBd0IsR0FBRywwQkFBMEIsR0FBRyxpQ0FBaUMsR0FBRyxvQ0FBb0MsR0FBRyxnQ0FBZ0M7QUFDbkssdUJBQXVCLG1CQUFPLENBQUMsaUdBQWdCO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0M7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBMkQscUJBQXFCO0FBQ2hGO0FBQ0Esd0JBQXdCIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXHN5YWhpXFxPbmVEcml2ZVxc2LPYt9itINin2YTZhdmD2KrYqFxcR2Fzc2ltXFxoZWFkc2hvdG1ha2VyYWlwcm9cXG5vZGVfbW9kdWxlc1xcdGVtcG8tZGV2dG9vbHNcXGRpc3RcXGNoYW5uZWxNZXNzYWdpbmdcXGNzc1J1bGVVdGlscy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY2FtZWxUb1NuYWtlQ2FzZSA9IGV4cG9ydHMuaXNDc3NTZWxlY3RvclZhbGlkID0gZXhwb3J0cy5nZXRBbGxDbGFzc2VzRnJvbVNlbGVjdG9yID0gZXhwb3J0cy5jYW5SZW1vdmVDc3NDbGFzc0Zyb21FbGVtZW50ID0gZXhwb3J0cy5jYW5BcHBseUNzc1J1bGVUb0VsZW1lbnQgPSB2b2lkIDA7XG5jb25zdCBjc3NGdW5jdGlvbnNfMSA9IHJlcXVpcmUoXCIuL2Nzc0Z1bmN0aW9uc1wiKTtcbmNvbnN0IGNhbkFwcGx5Q3NzUnVsZVRvRWxlbWVudCA9IChjc3NSdWxlLCBlbGVtZW50KSA9PiB7XG4gICAgdmFyIF9hO1xuICAgIHRyeSB7XG4gICAgICAgIGlmICghZWxlbWVudCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmICghKDAsIGV4cG9ydHMuaXNDc3NTZWxlY3RvclZhbGlkKShjc3NSdWxlKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlbGVtZW50Lm1hdGNoZXMoY3NzUnVsZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwYXJzZWRDc3NSdWxlID0gKDAsIGNzc0Z1bmN0aW9uc18xLnBhcnNlKShjc3NSdWxlKTtcbiAgICAgICAgbGV0IGxhc3RSdWxlID0gcGFyc2VkQ3NzUnVsZTtcbiAgICAgICAgd2hpbGUgKGxhc3RSdWxlLm5lc3RlZFJ1bGUpIHtcbiAgICAgICAgICAgIGxhc3RSdWxlID0gbGFzdFJ1bGUubmVzdGVkUnVsZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhZGRlZENsYXNzZXMgPSBbXTtcbiAgICAgICAgY29uc3QgY2xhc3NlcyA9IG5ldyBTZXQoZWxlbWVudC5jbGFzc0xpc3QpO1xuICAgICAgICAoX2EgPSBsYXN0UnVsZS5pdGVtcykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgICAgICAgIGlmIChpdGVtLnR5cGUgPT09ICdDbGFzc05hbWUnKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2xzID0gaXRlbS5uYW1lO1xuICAgICAgICAgICAgICAgIGlmICghY2xhc3Nlcy5oYXMoY2xzKSkge1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoY2xzKTtcbiAgICAgICAgICAgICAgICAgICAgYWRkZWRDbGFzc2VzLnB1c2goY2xzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBjYW5BcHBseSA9IGVsZW1lbnQubWF0Y2hlcyhjc3NSdWxlKTtcbiAgICAgICAgYWRkZWRDbGFzc2VzLmZvckVhY2goKGNscykgPT4ge1xuICAgICAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKGNscyk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gY2FuQXBwbHk7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59O1xuZXhwb3J0cy5jYW5BcHBseUNzc1J1bGVUb0VsZW1lbnQgPSBjYW5BcHBseUNzc1J1bGVUb0VsZW1lbnQ7XG5jb25zdCBjYW5SZW1vdmVDc3NDbGFzc0Zyb21FbGVtZW50ID0gKGNzc1J1bGUsIGVsZW1lbnQpID0+IHtcbiAgICB2YXIgX2E7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKCEoMCwgZXhwb3J0cy5pc0Nzc1NlbGVjdG9yVmFsaWQpKGNzc1J1bGUpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFlbGVtZW50Lm1hdGNoZXMoY3NzUnVsZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwYXJzZWRDc3NSdWxlID0gKDAsIGNzc0Z1bmN0aW9uc18xLnBhcnNlKShjc3NSdWxlKTtcbiAgICAgICAgbGV0IGxhc3RSdWxlID0gcGFyc2VkQ3NzUnVsZTtcbiAgICAgICAgd2hpbGUgKGxhc3RSdWxlLm5lc3RlZFJ1bGUpIHtcbiAgICAgICAgICAgIGxhc3RSdWxlID0gbGFzdFJ1bGUubmVzdGVkUnVsZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZW1vdmVkQ2xhc3NlcyA9IFtdO1xuICAgICAgICBjb25zdCBjbGFzc2VzID0gbmV3IFNldChlbGVtZW50LmNsYXNzTGlzdCk7XG4gICAgICAgIChfYSA9IGxhc3RSdWxlLml0ZW1zKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgICAgICAgaWYgKGl0ZW0udHlwZSA9PT0gJ0NsYXNzTmFtZScpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjbHMgPSBpdGVtLm5hbWU7XG4gICAgICAgICAgICAgICAgaWYgKCFjbGFzc2VzLmhhcyhjbHMpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKGNscyk7XG4gICAgICAgICAgICAgICAgcmVtb3ZlZENsYXNzZXMucHVzaChjbHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgY2FuUmVtb3ZlID0gIWVsZW1lbnQubWF0Y2hlcyhjc3NSdWxlKTtcbiAgICAgICAgcmVtb3ZlZENsYXNzZXMuZm9yRWFjaCgoY2xzKSA9PiB7XG4gICAgICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoY2xzKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBjYW5SZW1vdmU7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59O1xuZXhwb3J0cy5jYW5SZW1vdmVDc3NDbGFzc0Zyb21FbGVtZW50ID0gY2FuUmVtb3ZlQ3NzQ2xhc3NGcm9tRWxlbWVudDtcbmNvbnN0IGdldEFsbENsYXNzZXNGcm9tU2VsZWN0b3IgPSAoY3NzU2VsZWN0b3IpID0+IHtcbiAgICB0cnkge1xuICAgICAgICBpZiAoISgwLCBleHBvcnRzLmlzQ3NzU2VsZWN0b3JWYWxpZCkoY3NzU2VsZWN0b3IpKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFNldCgpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBhcnNlZENzc1J1bGUgPSAoMCwgY3NzRnVuY3Rpb25zXzEucGFyc2UpKGNzc1NlbGVjdG9yKTtcbiAgICAgICAgbGV0IHRyYXZlcnNlUnVsZSA9IHBhcnNlZENzc1J1bGU7XG4gICAgICAgIGNvbnN0IGFsbENsYXNzZXMgPSBuZXcgU2V0KCk7XG4gICAgICAgIHdoaWxlICh0cmF2ZXJzZVJ1bGUpIHtcbiAgICAgICAgICAgIGNvbnN0IGl0ZW1zID0gdHJhdmVyc2VSdWxlLml0ZW1zIHx8IFtdO1xuICAgICAgICAgICAgaXRlbXMuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChpdGVtLnR5cGUgPT09ICdDbGFzc05hbWUnKSB7XG4gICAgICAgICAgICAgICAgICAgIGFsbENsYXNzZXMuYWRkKGl0ZW0ubmFtZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0cmF2ZXJzZVJ1bGUgPSB0cmF2ZXJzZVJ1bGUubmVzdGVkUnVsZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYWxsQ2xhc3NlcztcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ0ZhaWxlZCB0byBwYXJzZSBjbGFzc2VzIGZyb20gc2VsZWN0b3IgJyArIGNzc1NlbGVjdG9yICsgJywgJyArIGUpO1xuICAgICAgICByZXR1cm4gbmV3IFNldCgpO1xuICAgIH1cbn07XG5leHBvcnRzLmdldEFsbENsYXNzZXNGcm9tU2VsZWN0b3IgPSBnZXRBbGxDbGFzc2VzRnJvbVNlbGVjdG9yO1xuY29uc3QgcXVlcnlDaGVjayA9IChzKSA9PiBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCkucXVlcnlTZWxlY3RvcihzKTtcbmNvbnN0IGlzQ3NzU2VsZWN0b3JWYWxpZCA9IChjc3NTZWxlY3RvcikgPT4ge1xuICAgIHRyeSB7XG4gICAgICAgIHF1ZXJ5Q2hlY2soY3NzU2VsZWN0b3IpO1xuICAgICAgICBjb25zdCBwYXJzZWRDc3NSdWxlID0gKDAsIGNzc0Z1bmN0aW9uc18xLnBhcnNlKShjc3NTZWxlY3Rvcik7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufTtcbmV4cG9ydHMuaXNDc3NTZWxlY3RvclZhbGlkID0gaXNDc3NTZWxlY3RvclZhbGlkO1xuY29uc3QgY2FtZWxUb1NuYWtlQ2FzZSA9IChzdHIpID0+IHtcbiAgICBpZiAoIXN0cilcbiAgICAgICAgcmV0dXJuIHN0cjtcbiAgICByZXR1cm4gKHN0ci5jaGFyQXQoMCkudG9Mb3dlckNhc2UoKSArXG4gICAgICAgIHN0ci5zdWJzdHJpbmcoMSkucmVwbGFjZSgvW0EtWl0vZywgKGxldHRlcikgPT4gYC0ke2xldHRlci50b0xvd2VyQ2FzZSgpfWApKTtcbn07XG5leHBvcnRzLmNhbWVsVG9TbmFrZUNhc2UgPSBjYW1lbFRvU25ha2VDYXNlO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/tempo-devtools/dist/channelMessaging/cssRuleUtils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/tempo-devtools/dist/channelMessaging/editTextUtils.js":
/*!****************************************************************************!*\
  !*** ./node_modules/tempo-devtools/dist/channelMessaging/editTextUtils.js ***!
  \****************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.teardownEditableText = exports.setupEditableText = exports.getEditingInfo = exports.currentlyEditing = exports.hasTextContents = exports.canEditText = void 0;\nconst identifierUtils_1 = __webpack_require__(/*! ./identifierUtils */ \"(ssr)/./node_modules/tempo-devtools/dist/channelMessaging/identifierUtils.js\");\nconst sessionStorageUtils_1 = __webpack_require__(/*! ./sessionStorageUtils */ \"(ssr)/./node_modules/tempo-devtools/dist/channelMessaging/sessionStorageUtils.js\");\nconst constantsAndTypes_1 = __webpack_require__(/*! ./constantsAndTypes */ \"(ssr)/./node_modules/tempo-devtools/dist/channelMessaging/constantsAndTypes.js\");\nconst jquery_1 = __importDefault(__webpack_require__(/*! jquery */ \"(ssr)/./node_modules/jquery/dist/jquery.js\"));\n/**\n * Evaluates if the element's text can be edited in place.\n *\n * @param element\n */\nconst canEditText = (element) => {\n    const treeElements = (0, sessionStorageUtils_1.getMemoryStorageItem)(sessionStorageUtils_1.TREE_ELEMENT_LOOKUP) || {};\n    const treeElement = treeElements[element.codebaseId];\n    if (!treeElement) {\n        return false;\n    }\n    return treeElement.staticTextContents;\n};\nexports.canEditText = canEditText;\n/**\n * Returns if the node has text contents in the DOM\n */\nconst hasTextContents = (node) => {\n    if (!node) {\n        return false;\n    }\n    let hasText = false;\n    let hasNonText = false;\n    node.childNodes.forEach((child) => {\n        if (child.nodeType === Node.TEXT_NODE) {\n            hasText = true;\n            return;\n        }\n        hasNonText = true;\n    });\n    return hasText && !hasNonText;\n};\nexports.hasTextContents = hasTextContents;\nconst currentlyEditing = () => {\n    const item = (0, sessionStorageUtils_1.getMemoryStorageItem)(sessionStorageUtils_1.TEXT_EDIT);\n    return item !== null && item !== undefined;\n};\nexports.currentlyEditing = currentlyEditing;\nconst markAsEditing = (info) => {\n    (0, sessionStorageUtils_1.setMemoryStorageItem)(sessionStorageUtils_1.TEXT_EDIT, info);\n};\nconst getEditingInfo = () => {\n    return (0, sessionStorageUtils_1.getMemoryStorageItem)(sessionStorageUtils_1.TEXT_EDIT);\n};\nexports.getEditingInfo = getEditingInfo;\nconst clearEditingInfo = () => {\n    (0, sessionStorageUtils_1.setMemoryStorageItem)(sessionStorageUtils_1.TEXT_EDIT, null);\n};\n/**\n * Takes an element and registers it as an editable text element.\n * Mutates the DOM to make the element editable.\n */\nconst setupEditableText = (element, parentPort, storyboardId) => {\n    const classToSearchFor = `.${identifierUtils_1.ELEMENT_KEY_PREFIX}${element.getKey()}`;\n    const domElement = (0, jquery_1.default)(classToSearchFor).get(0);\n    if (!domElement) {\n        return;\n    }\n    const originalText = (0, jquery_1.default)(domElement).text();\n    markAsEditing({\n        key: element.getKey(),\n        originalText,\n    });\n    parentPort.postMessage({\n        id: constantsAndTypes_1.FIXED_IFRAME_MESSAGE_IDS.START_EDITING_TEXT,\n        data: {\n            key: element.getKey(),\n            oldText: originalText,\n        },\n    });\n    (0, jquery_1.default)(domElement).attr('contenteditable', 'plaintext-only').trigger('focus');\n    // Apply styling directly\n    (0, jquery_1.default)(domElement).css({\n        cursor: 'text',\n        outline: 'none',\n        border: 'none',\n    });\n    (0, jquery_1.default)(domElement).on('blur', () => (0, exports.teardownEditableText)(parentPort, storyboardId));\n};\nexports.setupEditableText = setupEditableText;\n/**\n * Used to mark the completion of the editable text process.\n * Reverts the DOM to its original state.\n * Sends a message to the housing frame with updated text, if necessary.\n *\n */\nconst teardownEditableText = (parentPort, storyboardId) => {\n    var _a;\n    const editingInfo = (0, exports.getEditingInfo)();\n    if (!(0, exports.currentlyEditing)()) {\n        return;\n    }\n    clearEditingInfo();\n    if (!editingInfo) {\n        return;\n    }\n    const classToSearchFor = `.${identifierUtils_1.ELEMENT_KEY_PREFIX}${editingInfo.key}`;\n    const domElement = (0, jquery_1.default)(classToSearchFor).get(0);\n    if (!domElement) {\n        return;\n    }\n    const updatedText = (0, jquery_1.default)(domElement).text();\n    parentPort.postMessage({\n        id: constantsAndTypes_1.FIXED_IFRAME_MESSAGE_IDS.EDITED_TEXT,\n        data: {\n            key: editingInfo.key,\n            newText: updatedText,\n            oldText: editingInfo.originalText,\n        },\n    });\n    // Clear any selection\n    (_a = window.getSelection()) === null || _a === void 0 ? void 0 : _a.removeAllRanges();\n    // Cleanup\n    (0, jquery_1.default)(domElement).removeAttr('contenteditable').off('blur').css({\n        cursor: '',\n        outline: '',\n        border: '',\n    });\n    clearEditingInfo();\n};\nexports.teardownEditableText = teardownEditableText;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/tempo-devtools/dist/channelMessaging/editTextUtils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/tempo-devtools/dist/channelMessaging/identifierUtils.js":
/*!******************************************************************************!*\
  !*** ./node_modules/tempo-devtools/dist/channelMessaging/identifierUtils.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.isElementInSvg = exports.isSkipNavTreeNode = exports.isMovingElement = exports.getAllUnknownClasses = exports.getAllUnknownClasesFromList = exports.isOutline = exports.hasClass = exports.removeUniqueLookupFromNode = exports.getUniqueLookupFromNode = exports.getElementKeyFromNode = exports.addCodebaseIdToNode = exports.addUniqueLookupAsClass = exports.addElementKeyAsClass = exports.getCodebaseIdFromNode = exports.getCodebaseIdFromClassName = exports.validateUuid = exports.KNOWN_ATTRIBUTES = exports.TEMPO_QUEUE_DELETE_AFTER_HOT_RELOAD = exports.TEMPO_TEST_ID = exports.TEMPO_ELEMENT_ID = exports.TEMPO_DO_NOT_SHOW_IN_NAV_UNTIL_REFRESH = exports.TEMPO_OUTLINE_UNTIL_REFESH = exports.TEMPO_DELETE_AFTER_REFRESH = exports.TEMPO_INSTANT_UPDATE = exports.TEMPO_DELETE_AFTER_INSTANT_UPDATE = exports.TEMPO_DISPLAY_NONE_UNTIL_REFRESH_CLASS = exports.TEMPO_INSTANT_UPDATE_STYLING_PREFIX = exports.TEMPO_MOVE_BETWEEN_PARENTS_OUTLINE = exports.TEMPO_INSTANT_DIV_DRAW_CLASS = exports.EDIT_TEXT_BUTTON = exports.OUTLINE_CLASS = exports.UNIQUE_LOOKUP_PREFIX = exports.ELEMENT_KEY_PREFIX = void 0;\nconst changeItemFunctions_1 = __webpack_require__(/*! ./changeItemFunctions */ \"(ssr)/./node_modules/tempo-devtools/dist/channelMessaging/changeItemFunctions.js\");\n// Must match identifier utils on the frontend\nexports.ELEMENT_KEY_PREFIX = 'arb89-key-';\nexports.UNIQUE_LOOKUP_PREFIX = 'arb89-lookup-'; // Used only for processing the nav tree\nexports.OUTLINE_CLASS = 'arb89-outline';\nexports.EDIT_TEXT_BUTTON = 'arb89-edit-text-button';\nexports.TEMPO_INSTANT_DIV_DRAW_CLASS = 'arb89-instant-div-draw';\nexports.TEMPO_MOVE_BETWEEN_PARENTS_OUTLINE = 'arb89-move-between-parents-outline';\nexports.TEMPO_INSTANT_UPDATE_STYLING_PREFIX = 'arb89-styling-';\nexports.TEMPO_DISPLAY_NONE_UNTIL_REFRESH_CLASS = 'arb89-display-none-until-refresh';\nexports.TEMPO_DELETE_AFTER_INSTANT_UPDATE = 'arb89-delete-after-instant-update';\nconst KNOWN_CLASSES = new Set([\n    exports.OUTLINE_CLASS,\n    exports.TEMPO_INSTANT_DIV_DRAW_CLASS,\n    exports.TEMPO_MOVE_BETWEEN_PARENTS_OUTLINE,\n    exports.TEMPO_DISPLAY_NONE_UNTIL_REFRESH_CLASS,\n    changeItemFunctions_1.WRAP_IN_DIV_PLACEHOLDER_CODEBASE_ID,\n    changeItemFunctions_1.TEMPORARY_STYLING_CLASS_NAME,\n    exports.EDIT_TEXT_BUTTON,\n]);\nconst KNOWN_CLASS_PREFIXES = [\n    exports.ELEMENT_KEY_PREFIX,\n    exports.UNIQUE_LOOKUP_PREFIX,\n    exports.TEMPO_INSTANT_UPDATE_STYLING_PREFIX,\n    changeItemFunctions_1.DUPLICATE_PLACEHOLDER_PREFIX,\n    changeItemFunctions_1.ADD_JSX_PREFIX,\n];\n// Attributes that are set until the next Nav Tree Refresh\nexports.TEMPO_INSTANT_UPDATE = 'arb89-instant-update';\nexports.TEMPO_DELETE_AFTER_REFRESH = 'arb89-delete-after-refresh';\nexports.TEMPO_OUTLINE_UNTIL_REFESH = 'arb89-outline-until-refresh';\nexports.TEMPO_DO_NOT_SHOW_IN_NAV_UNTIL_REFRESH = 'arb89-do-not-show-in-nav';\nexports.TEMPO_ELEMENT_ID = 'tempoelementid';\nexports.TEMPO_TEST_ID = 'data-testid';\nexports.TEMPO_QUEUE_DELETE_AFTER_HOT_RELOAD = 'arb89-queue-delete-after-hot-reload';\nexports.KNOWN_ATTRIBUTES = new Set([\n    exports.TEMPO_INSTANT_UPDATE,\n    exports.TEMPO_DELETE_AFTER_REFRESH,\n    exports.TEMPO_DELETE_AFTER_INSTANT_UPDATE,\n    exports.TEMPO_OUTLINE_UNTIL_REFESH,\n    exports.TEMPO_QUEUE_DELETE_AFTER_HOT_RELOAD,\n    exports.TEMPO_DO_NOT_SHOW_IN_NAV_UNTIL_REFRESH,\n    exports.TEMPO_ELEMENT_ID,\n    exports.TEMPO_TEST_ID,\n]);\nconst validateUuid = (uuid) => {\n    return new RegExp('^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$', 'i').test(uuid);\n};\nexports.validateUuid = validateUuid;\nconst getCodebaseIdFromClassName = (className) => {\n    if (className &&\n        className.startsWith('tempo-') &&\n        ((0, exports.validateUuid)(className.substring('tempo-'.length)) ||\n            className === changeItemFunctions_1.WRAP_IN_DIV_PLACEHOLDER_CODEBASE_ID ||\n            className.startsWith(changeItemFunctions_1.DUPLICATE_PLACEHOLDER_PREFIX))) {\n        return className;\n    }\n    return null;\n};\nexports.getCodebaseIdFromClassName = getCodebaseIdFromClassName;\nconst getCodebaseIdFromNode = (node) => {\n    var _a;\n    if (!(node === null || node === void 0 ? void 0 : node.classList)) {\n        return null;\n    }\n    let clsFound = null;\n    node.classList.forEach((cls) => {\n        // A bit of a hack -> in the case when there are multiple tempo codebase IDs on an element\n        // we want to use the first one defined. This happens in the case of forward refs, and we\n        // always add the bottom-most className to the end of the classes list, so we want to\n        // show the top-most element in this case\n        if (clsFound) {\n            return;\n        }\n        if (!cls) {\n            return;\n        }\n        const extractedId = (0, exports.getCodebaseIdFromClassName)(cls);\n        if (extractedId) {\n            clsFound = extractedId;\n        }\n    });\n    if (clsFound) {\n        return clsFound;\n    }\n    if (((_a = node === null || node === void 0 ? void 0 : node.tagName) === null || _a === void 0 ? void 0 : _a.toLowerCase()) == 'body') {\n        return 'body';\n    }\n    if ((node === null || node === void 0 ? void 0 : node.id) == 'root') {\n        return 'root';\n    }\n    if ((node === null || node === void 0 ? void 0 : node.id) == '__next') {\n        return '__next';\n    }\n    return null;\n};\nexports.getCodebaseIdFromNode = getCodebaseIdFromNode;\nconst addElementKeyAsClass = (node, safeElementKey) => {\n    if (!(node === null || node === void 0 ? void 0 : node.classList)) {\n        return;\n    }\n    const classesToRemove = new Set();\n    node.classList.forEach((cls) => {\n        if (cls === null || cls === void 0 ? void 0 : cls.startsWith(exports.ELEMENT_KEY_PREFIX)) {\n            classesToRemove.add(cls);\n        }\n    });\n    classesToRemove.forEach((cls) => {\n        node.classList.remove(cls);\n    });\n    node.classList.add(`${exports.ELEMENT_KEY_PREFIX}${safeElementKey}`);\n};\nexports.addElementKeyAsClass = addElementKeyAsClass;\nconst addUniqueLookupAsClass = (node, uniqueLookup) => {\n    if (!(node === null || node === void 0 ? void 0 : node.classList)) {\n        return;\n    }\n    const classesToRemove = new Set();\n    node.classList.forEach((cls) => {\n        if (cls === null || cls === void 0 ? void 0 : cls.startsWith(exports.UNIQUE_LOOKUP_PREFIX)) {\n            classesToRemove.add(cls);\n        }\n    });\n    classesToRemove.forEach((cls) => {\n        node.classList.remove(cls);\n    });\n    node.classList.add(`${exports.UNIQUE_LOOKUP_PREFIX}${uniqueLookup}`);\n};\nexports.addUniqueLookupAsClass = addUniqueLookupAsClass;\nconst addCodebaseIdToNode = (node, codebaseId) => {\n    if (!(node === null || node === void 0 ? void 0 : node.classList)) {\n        return;\n    }\n    const classesToRemove = new Set();\n    node.classList.forEach((cls) => {\n        if (!cls) {\n            return;\n        }\n        if ((0, exports.getCodebaseIdFromClassName)(cls)) {\n            classesToRemove.add(cls);\n        }\n    });\n    classesToRemove.forEach((cls) => {\n        node.classList.remove(cls);\n    });\n    node.classList.add(codebaseId);\n};\nexports.addCodebaseIdToNode = addCodebaseIdToNode;\nconst getElementKeyFromNode = (node) => {\n    if (!(node === null || node === void 0 ? void 0 : node.classList)) {\n        return null;\n    }\n    let clsFound = null;\n    node.classList.forEach((cls) => {\n        if (cls === null || cls === void 0 ? void 0 : cls.startsWith(exports.ELEMENT_KEY_PREFIX)) {\n            clsFound = cls.substring(exports.ELEMENT_KEY_PREFIX.length);\n        }\n    });\n    return clsFound;\n};\nexports.getElementKeyFromNode = getElementKeyFromNode;\nconst getUniqueLookupFromNode = (node) => {\n    if (!(node === null || node === void 0 ? void 0 : node.classList)) {\n        return null;\n    }\n    let clsFound = null;\n    node.classList.forEach((cls) => {\n        if (cls === null || cls === void 0 ? void 0 : cls.startsWith(exports.UNIQUE_LOOKUP_PREFIX)) {\n            clsFound = cls.substring(exports.UNIQUE_LOOKUP_PREFIX.length);\n        }\n    });\n    return clsFound;\n};\nexports.getUniqueLookupFromNode = getUniqueLookupFromNode;\nconst removeUniqueLookupFromNode = (node) => {\n    if (!(node === null || node === void 0 ? void 0 : node.classList)) {\n        return false;\n    }\n    const classesToRemove = new Set();\n    node.classList.forEach((cls) => {\n        if (cls === null || cls === void 0 ? void 0 : cls.startsWith(exports.UNIQUE_LOOKUP_PREFIX)) {\n            classesToRemove.add(cls);\n        }\n    });\n    classesToRemove.forEach((cls) => {\n        node.classList.remove(cls);\n    });\n    return classesToRemove.size > 0;\n};\nexports.removeUniqueLookupFromNode = removeUniqueLookupFromNode;\nconst hasClass = (node, klass) => {\n    if (!(node === null || node === void 0 ? void 0 : node.classList)) {\n        return false;\n    }\n    let hasClass = false;\n    node.classList.forEach((cls) => {\n        if (cls == klass) {\n            hasClass = true;\n        }\n    });\n    return hasClass;\n};\nexports.hasClass = hasClass;\nconst isOutline = (node) => {\n    return (0, exports.hasClass)(node, exports.OUTLINE_CLASS);\n};\nexports.isOutline = isOutline;\nconst getAllUnknownClasesFromList = (classes) => {\n    return classes.filter((cls) => {\n        if (!cls) {\n            return false;\n        }\n        const isCodebaseId = (0, exports.getCodebaseIdFromClassName)(cls) !== null;\n        const clsStartsWithKnownPrefix = KNOWN_CLASS_PREFIXES.some((prefix) => cls.startsWith(prefix));\n        if (!clsStartsWithKnownPrefix && !KNOWN_CLASSES.has(cls) && !isCodebaseId) {\n            return true;\n        }\n        return false;\n    });\n};\nexports.getAllUnknownClasesFromList = getAllUnknownClasesFromList;\nconst getAllUnknownClasses = (node) => {\n    if (!(node === null || node === void 0 ? void 0 : node.classList)) {\n        return [];\n    }\n    return (0, exports.getAllUnknownClasesFromList)(Array.from(node.classList));\n};\nexports.getAllUnknownClasses = getAllUnknownClasses;\n/**\n * Accepts a node from mutation observer and determines if it's a moving element.\n * Returns moving if and only if the node has the attribute `arb89-instant-update` set to true.\n * @param node\n * @returns\n */\nconst isMovingElement = (node) => {\n    if (!node) {\n        return false;\n    }\n    // Check if the node responds to getAttribute method.\n    if (typeof node.getAttribute !== 'function') {\n        return false;\n    }\n    return node.getAttribute(exports.TEMPO_INSTANT_UPDATE) === 'true';\n};\nexports.isMovingElement = isMovingElement;\nconst isSkipNavTreeNode = (node) => {\n    if (!node) {\n        return;\n    }\n    return node.getAttribute(exports.TEMPO_DO_NOT_SHOW_IN_NAV_UNTIL_REFRESH) === 'true';\n};\nexports.isSkipNavTreeNode = isSkipNavTreeNode;\n/**\n * Check if the node has any parent that is an svg tag\n */\nconst isElementInSvg = (node, parent) => {\n    var _a;\n    if (!node) {\n        return false;\n    }\n    if (parent && ((_a = node.tagName) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === 'svg') {\n        return true;\n    }\n    if (node.parentNode) {\n        return (0, exports.isElementInSvg)(node.parentNode, true);\n    }\n    return false;\n};\nexports.isElementInSvg = isElementInSvg;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/tempo-devtools/dist/channelMessaging/identifierUtils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/tempo-devtools/dist/channelMessaging/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/tempo-devtools/dist/channelMessaging/index.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.initChannelMessaging = void 0;\n// KEEP THIS IN SYNC WITH sessionStorageUtils.*.tsx\nconst resqUtils_1 = __webpack_require__(/*! ./resqUtils */ \"(ssr)/./node_modules/tempo-devtools/dist/channelMessaging/resqUtils.js\");\nconst lz_string_1 = __importDefault(__webpack_require__(/*! lz-string */ \"(ssr)/./node_modules/lz-string/libs/lz-string.js\"));\nconst posthog_js_1 = __importDefault(__webpack_require__(/*! ../posthog.js */ \"(ssr)/./node_modules/tempo-devtools/dist/posthog.js\"));\nconst channelMessagingFunctions_1 = __webpack_require__(/*! ./channelMessagingFunctions */ \"(ssr)/./node_modules/tempo-devtools/dist/channelMessaging/channelMessagingFunctions.js\");\n// For vite only, show errors in the browser\nif (typeof window !== 'undefined' &&\n    window.location.href.includes('framework=VITE')) {\n    const showErrorOverlay = (err) => {\n        // must be within function call because that's when the element is defined for sure.\n        const ErrorOverlay = customElements.get('vite-error-overlay');\n        // don't open outside vite environment\n        if (!ErrorOverlay) {\n            return;\n        }\n        const overlay = new ErrorOverlay(err);\n        document.body.appendChild(overlay);\n    };\n    window.addEventListener('error', showErrorOverlay);\n    window.addEventListener('unhandledrejection', ({ reason }) => showErrorOverlay(reason));\n}\nconst debugLogInDev = (...str) => {\n    var _a;\n    // Only in dev\n    if ((_a = window.location.search) === null || _a === void 0 ? void 0 : _a.includes('debugLog=true')) {\n        console.debug(...str);\n    }\n};\nfunction initChannelMessaging() {\n    var _a;\n    if (typeof window !== 'undefined') {\n        (0, channelMessagingFunctions_1.initChannelMessagingFunctions)();\n        // Only in prod\n        if (window.location.hostname.endsWith('dev.tempolabs.ai') &&\n            !window.location.hostname.endsWith('staging-dev.tempolabs.ai')) {\n            if (posthog_js_1.default) {\n                posthog_js_1.default.init();\n            }\n        }\n    }\n    if (typeof window !== 'undefined') {\n        window.addEventListener('message', (event) => {\n            const { data } = event;\n            if (data.type === 'GET_STATE_AND_PROPS') {\n                const { componentName } = data;\n                // TODO: Support custom root that user provides\n                let rootSelector = '#root';\n                if (!document.querySelector(rootSelector)) {\n                    rootSelector = '#__next';\n                }\n                const root = document.querySelector(rootSelector);\n                const rootReactElement = (0, resqUtils_1.getRootReactElement)();\n                const tree = (0, resqUtils_1.buildNodeTree)(rootReactElement, null);\n                const foundNodes = (0, resqUtils_1.findElementInTree)(tree, (node) => {\n                    if (componentName && node.name == componentName) {\n                        return true;\n                    }\n                    return false;\n                });\n                if (!(foundNodes === null || foundNodes === void 0 ? void 0 : foundNodes.length)) {\n                    const message = {\n                        error: 'No component found',\n                    };\n                    console.log('STATE_AND_PROPS ', JSON.stringify(message));\n                    return;\n                }\n                if (foundNodes.length > 1) {\n                    console.log(foundNodes);\n                    console.log('Warning: more than 1 component found');\n                }\n                const foundNode = foundNodes[0];\n                const sendDataForNode = (node) => {\n                    debugLogInDev('NODE FOUND: ', node);\n                    const PROPS_TO_EXCLUDE = {\n                        tempoelementid: true,\n                        'data-testid': true,\n                    };\n                    const propsToSend = {};\n                    if (node.props) {\n                        Object.keys(node.props).forEach((key) => {\n                            if (!PROPS_TO_EXCLUDE[key]) {\n                                if (typeof node.props[key] === 'object') {\n                                    propsToSend[key] = 'TEMPO_OBJECT_TYPE';\n                                }\n                                else if (typeof node.props[key] === 'function') {\n                                    propsToSend[key] = 'TEMPO_FUNCTION_TYPE';\n                                }\n                                else {\n                                    propsToSend[key] = node.props[key];\n                                }\n                            }\n                        });\n                    }\n                    // TODO: This doesn't fully work because of this bug: https://github.com/baruchvlz/resq/issues/85\n                    let stateToSend = {};\n                    if (node.state) {\n                        if (typeof node.state === 'string') {\n                            stateToSend = {\n                                state: node.state,\n                            };\n                        }\n                        else {\n                            Object.keys(node.state).forEach((key) => {\n                                if (typeof node.state[key] === 'object') {\n                                    stateToSend[key] = 'TEMPO_OBJECT_TYPE';\n                                }\n                                else if (typeof node.state[key] === 'function') {\n                                    stateToSend[key] = 'TEMPO_FUNCTION_TYPE';\n                                }\n                                else {\n                                    stateToSend[key] = node.state[key];\n                                }\n                            });\n                        }\n                    }\n                    const message = {\n                        id: data.id,\n                        props: propsToSend,\n                        state: stateToSend,\n                    };\n                    console.log('STATE_AND_PROPS ', JSON.stringify(message));\n                };\n                sendDataForNode(foundNode);\n            }\n        });\n    }\n    if (typeof window !== 'undefined') {\n        if ((_a = window.location.search) === null || _a === void 0 ? void 0 : _a.includes('storyboard=true')) {\n            let rootEl = document.getElementById('root');\n            if (!rootEl) {\n                rootEl = document.getElementById('__next');\n            }\n            if (rootEl) {\n                if (window.location.search.includes('type=STORY') ||\n                    window.location.search.includes('type=COMPONENT')) {\n                    [rootEl, document.body, document.documentElement].forEach((el) => {\n                        el.style.backgroundColor = 'transparent';\n                        el.style.width = '100vw';\n                        el.style.height = '100vh';\n                        el.style.overflow = 'hidden';\n                    });\n                }\n                else {\n                    rootEl.style.width = '100vw';\n                    rootEl.style.height = '100vh';\n                }\n            }\n        }\n        (function () {\n            let port2 = null;\n            let storyboardId = null;\n            // Setup the transfered port\n            const initPort = (e) => {\n                if (e.data === 'init') {\n                    port2 = e.ports[0];\n                    port2.onmessage = onMessage;\n                }\n                else {\n                    var msgObj = e.data;\n                    onMessage({\n                        data: msgObj,\n                    });\n                }\n            };\n            // Listen for the intial port transfer message\n            window.addEventListener('message', initPort);\n            const onInspectElement = (data) => __awaiter(this, void 0, void 0, function* () {\n                if (!data.payload.componentName) {\n                    console.log('NO COMPONENT NAME');\n                    const message = {\n                        id: data.id,\n                        error: 'No component name',\n                    };\n                    port2.postMessage(message);\n                    return;\n                }\n                // TODO: Support custom root that user provides\n                const rootReactElement = (0, resqUtils_1.getRootReactElement)();\n                const tree = (0, resqUtils_1.buildNodeTree)(rootReactElement, null);\n                const { isComponent, componentName, tempoElementID, componentElementId, } = data.payload;\n                if (!isComponent && !tempoElementID) {\n                    console.log('No tempo element ID provided');\n                    const message = {\n                        id: data.id,\n                        error: 'Could not find element',\n                    };\n                    port2.postMessage(message);\n                    return;\n                }\n                if (isComponent && !tempoElementID && !componentName) {\n                    console.log('No tempo element ID or component name provided');\n                    const message = {\n                        id: data.id,\n                        error: 'Could not find component',\n                    };\n                    port2.postMessage(message);\n                    return;\n                }\n                const foundNodes = (0, resqUtils_1.findElementInTree)(tree, (node) => {\n                    var _a, _b, _c, _d, _e, _f;\n                    if (isComponent) {\n                        // Check tempoElementID, and if it's not provided, use the component name\n                        if (tempoElementID &&\n                            (((_a = node.props) === null || _a === void 0 ? void 0 : _a.tempoelementid) == tempoElementID ||\n                                ((_b = node.props) === null || _b === void 0 ? void 0 : _b['data-testid']) == tempoElementID)) {\n                            return true;\n                        }\n                        if (!tempoElementID &&\n                            componentName &&\n                            node.name == componentName) {\n                            return true;\n                        }\n                    }\n                    else {\n                        // The tempo element ID must always match\n                        if (tempoElementID &&\n                            ((_c = node.props) === null || _c === void 0 ? void 0 : _c.tempoelementid) !== tempoElementID &&\n                            ((_d = node.props) === null || _d === void 0 ? void 0 : _d['data-testid']) !== tempoElementID) {\n                            return false;\n                        }\n                        // If the component instance ID is provided, go up the chain to check if there are any parents with this component instance ID set\n                        if (componentElementId) {\n                            let nodeToCheck = node.parent;\n                            let foundMatchingComponent = false;\n                            while (nodeToCheck) {\n                                if (((_e = nodeToCheck.props) === null || _e === void 0 ? void 0 : _e.tempoelementid) === componentElementId ||\n                                    ((_f = nodeToCheck.props) === null || _f === void 0 ? void 0 : _f['data-testid']) === componentElementId) {\n                                    foundMatchingComponent = true;\n                                    break;\n                                }\n                                nodeToCheck = nodeToCheck.parent;\n                            }\n                            if (!foundMatchingComponent) {\n                                return false;\n                            }\n                        }\n                        return true;\n                    }\n                    return false;\n                });\n                if (!(foundNodes === null || foundNodes === void 0 ? void 0 : foundNodes.length)) {\n                    debugLogInDev('NO COMPONENT FOUND');\n                    const message = {\n                        id: data.id,\n                        error: 'No component found',\n                    };\n                    port2.postMessage(message);\n                    return;\n                }\n                if (foundNodes.length > 1) {\n                    console.log(foundNodes);\n                    console.log('Warning: more than 1 component found');\n                }\n                const foundNode = foundNodes[0];\n                const sendDataForNode = (node) => {\n                    debugLogInDev('NODE FOUND: ', node);\n                    const propsToSend = {};\n                    if (node.props) {\n                        Object.keys(node.props).forEach((key) => {\n                            if (typeof node.props[key] === 'object') {\n                                propsToSend[key] = 'TEMPO_OBJECT_TYPE';\n                            }\n                            else if (typeof node.props[key] === 'function') {\n                                propsToSend[key] = 'TEMPO_FUNCTION_TYPE';\n                            }\n                            else {\n                                propsToSend[key] = node.props[key];\n                            }\n                        });\n                    }\n                    // TODO: This doesn't fully work because of this bug: https://github.com/baruchvlz/resq/issues/85\n                    let stateToSend = {};\n                    if (node.state) {\n                        if (typeof node.state === 'string') {\n                            stateToSend = {\n                                state: node.state,\n                            };\n                        }\n                        else {\n                            Object.keys(node.state).forEach((key) => {\n                                if (typeof node.state[key] === 'object') {\n                                    stateToSend[key] = 'TEMPO_OBJECT_TYPE';\n                                }\n                                else if (typeof node.state[key] === 'function') {\n                                    stateToSend[key] = 'TEMPO_FUNCTION_TYPE';\n                                }\n                                else {\n                                    stateToSend[key] = node.state[key];\n                                }\n                            });\n                        }\n                    }\n                    const message = {\n                        id: data.id,\n                        props: propsToSend,\n                        state: stateToSend,\n                    };\n                    debugLogInDev('RESPONDING WITH: ', message);\n                    port2.postMessage(message);\n                };\n                sendDataForNode(foundNode);\n            });\n            // Handle messages received on port2\n            const onMessage = (e) => __awaiter(this, void 0, void 0, function* () {\n                var _a, _b;\n                try {\n                    const data = e.data;\n                    const dataToLog = Object.assign({}, data);\n                    if ((_a = data === null || data === void 0 ? void 0 : data.payload) === null || _a === void 0 ? void 0 : _a.compressedArgs) {\n                        dataToLog.payload = Object.assign(Object.assign({}, data.payload), { compressedArgs: 'COMPRESSED' });\n                    }\n                    // These contain args that are too large to log\n                    const LOGS_TO_SKIP_ARGS = [\n                        'initProject',\n                        'setNewLookups',\n                        'processRulesForSelectedElement',\n                    ];\n                    if (((_b = data === null || data === void 0 ? void 0 : data.payload) === null || _b === void 0 ? void 0 : _b.functionName) &&\n                        LOGS_TO_SKIP_ARGS.includes(data.payload.functionName)) {\n                        dataToLog.payload = Object.assign(Object.assign({}, data.payload), { args: 'ARGS_SKIPPED' });\n                    }\n                    debugLogInDev('INNER FRAME: Received message from parent: ', JSON.stringify(dataToLog));\n                    if (!data || !data.payload) {\n                        debugLogInDev('NO PAYLOAD');\n                        return;\n                    }\n                    if (!data.id) {\n                        debugLogInDev('NO ID');\n                        return;\n                    }\n                    if (data.type === 'inspectElement') {\n                        onInspectElement(data);\n                    }\n                    else if (data.type === 'executeFunction') {\n                        const fn = window[data.payload.functionName];\n                        if (typeof fn === 'function') {\n                            // Special case to register the storyboardId\n                            let args = data.payload.args;\n                            if (data.payload.compressedArgs) {\n                                args = JSON.parse(lz_string_1.default.decompress(data.payload.compressedArgs));\n                            }\n                            if (data.payload.functionName === 'initProject') {\n                                storyboardId = args[0];\n                                args = args.slice(1);\n                            }\n                            let res = null;\n                            if (data.payload.args) {\n                                // @ts-ignore\n                                res = fn(port2, storyboardId, ...args);\n                            }\n                            else {\n                                // @ts-ignore\n                                res = fn(port2, storyboardId);\n                            }\n                            if (res) {\n                                port2.postMessage({\n                                    id: data.id,\n                                    result: res,\n                                });\n                            }\n                        }\n                        else {\n                            console.log('INNER FRAME ERROR: Function to execute not found');\n                        }\n                    }\n                }\n                catch (error) {\n                    console.log('INNER FRAME ERROR: ', error);\n                    // TODO: Send error back to parent?\n                }\n            });\n        })();\n    }\n}\nexports.initChannelMessaging = initChannelMessaging;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/tempo-devtools/dist/channelMessaging/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/tempo-devtools/dist/channelMessaging/navTreeUtils.js":
/*!***************************************************************************!*\
  !*** ./node_modules/tempo-devtools/dist/channelMessaging/navTreeUtils.js ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.runNavTreeBuiltCallbacks = exports.addNavTreeBuiltCallback = exports.buildNavForNode = exports.getNavNodeForVirtualComponent = exports.ExtractedPropType = exports.SKIP_ROOT_CODEBASE_ID = exports.EMPTY_TREE_CODEBASE_ID = exports.TOP_LEVEL_PARENT_COMPONENT_TO_SKIP = exports.UNKNOWN_PARENT_COMPONENT = void 0;\nconst cssFunctions_1 = __webpack_require__(/*! ./cssFunctions */ \"(ssr)/./node_modules/tempo-devtools/dist/channelMessaging/cssFunctions.js\");\nconst identifierUtils_1 = __webpack_require__(/*! ./identifierUtils */ \"(ssr)/./node_modules/tempo-devtools/dist/channelMessaging/identifierUtils.js\");\nconst outlineUtils_1 = __webpack_require__(/*! ./outlineUtils */ \"(ssr)/./node_modules/tempo-devtools/dist/channelMessaging/outlineUtils.js\");\nconst jquery_1 = __importDefault(__webpack_require__(/*! jquery */ \"(ssr)/./node_modules/jquery/dist/jquery.js\"));\nconst sessionStorageUtils_1 = __webpack_require__(/*! ./sessionStorageUtils */ \"(ssr)/./node_modules/tempo-devtools/dist/channelMessaging/sessionStorageUtils.js\");\nconst tempoElement_1 = __webpack_require__(/*! ./tempoElement */ \"(ssr)/./node_modules/tempo-devtools/dist/channelMessaging/tempoElement.js\");\nexports.UNKNOWN_PARENT_COMPONENT = 'UnknownComponent';\nexports.TOP_LEVEL_PARENT_COMPONENT_TO_SKIP = 'TOP_LEVEL_PARENT_COMPONENT_TO_SKIP';\nexports.EMPTY_TREE_CODEBASE_ID = 'EMPTY-TREE';\n// Special codebase ID -> if set on the root node it's expected it doesn't get rendered\n// This is used when there are multiple nodes under the root node that we want to return while we don't\n// want to render the root node itself\nexports.SKIP_ROOT_CODEBASE_ID = 'SKIP-ROOT';\n// Matches the interface on the frontend\nvar ExtractedPropType;\n(function (ExtractedPropType) {\n    ExtractedPropType[\"LITERAL\"] = \"LITERAL\";\n    ExtractedPropType[\"FUNCTION\"] = \"FUNCTION\";\n    ExtractedPropType[\"JSON_OBJECT\"] = \"JSON_OBJECT\";\n})(ExtractedPropType || (exports.ExtractedPropType = ExtractedPropType = {}));\nconst extractPropsFromReactFiberNode = (reactFiberNode) => {\n    var _a;\n    if (!((_a = reactFiberNode === null || reactFiberNode === void 0 ? void 0 : reactFiberNode.element) === null || _a === void 0 ? void 0 : _a.memoizedProps)) {\n        return {};\n    }\n    const props = {};\n    Object.keys(reactFiberNode.element.memoizedProps).forEach((key) => {\n        if (key === 'children') {\n            return;\n        }\n        // Filter out known props\n        if (identifierUtils_1.KNOWN_ATTRIBUTES.has(key.toLowerCase())) {\n            return;\n        }\n        let propValue = reactFiberNode.element.memoizedProps[key];\n        // Filter out unknown classes\n        if (key === 'className' && typeof propValue === 'string') {\n            propValue = (0, identifierUtils_1.getAllUnknownClasesFromList)(propValue.split(' ')).join(' ');\n        }\n        if (typeof propValue === 'function') {\n            props[key] = {\n                value: key,\n                type: ExtractedPropType.FUNCTION,\n            };\n        }\n        else if (typeof propValue === 'object') {\n            try {\n                props[key] = {\n                    value: JSON.stringify(propValue),\n                    type: ExtractedPropType.JSON_OBJECT,\n                };\n            }\n            catch (e) {\n                // skip this prop\n            }\n        }\n        else {\n            props[key] = {\n                value: propValue,\n                type: ExtractedPropType.LITERAL,\n            };\n        }\n    });\n    return props;\n};\nconst extractLiteralChildrenFromReactFiberNode = (reactFiberNode) => {\n    var _a, _b;\n    if (!((_b = (_a = reactFiberNode === null || reactFiberNode === void 0 ? void 0 : reactFiberNode.element) === null || _a === void 0 ? void 0 : _a.memoizedProps) === null || _b === void 0 ? void 0 : _b.children)) {\n        return [];\n    }\n    const literalChildren = [];\n    Array.from(reactFiberNode.element.memoizedProps.children || []).forEach((childProp, index) => {\n        if (typeof childProp !== 'object') {\n            literalChildren.push({\n                index,\n                value: childProp,\n            });\n        }\n    });\n    return literalChildren;\n};\nfunction selectorSafe(uniquePath) {\n    // Dictionary of replacements. You can expand this list as needed.\n    const replacements = {\n        '!': '_exclamation_',\n        '@': '_at_',\n        '#': '_hash_',\n        $: '_dollar_',\n        '%': '_percent_',\n        '^': '_caret_',\n        '&': '_and_',\n        '*': '_asterisk_',\n        '(': '_openParen_',\n        ')': '_closeParen_',\n        '+': '_plus_',\n        '=': '_equals_',\n        '[': '_openBracket_',\n        ']': '_closeBracket_',\n        '{': '_openBrace_',\n        '}': '_closeBrace_',\n        '|': '_pipe_',\n        ';': '_semicolon_',\n        ':': '_colon_',\n        ',': '_comma_',\n        '.': '_period_',\n        '<': '_lessThan_',\n        '>': '_greaterThan_',\n        '/': '_slash_',\n        '?': '_question_',\n        '\\\\': '_backslash_',\n        ' ': '_space_',\n    };\n    // Replace each character with its mapped value\n    Object.keys(replacements).forEach((character) => {\n        const regex = new RegExp('\\\\' + character, 'g');\n        uniquePath = uniquePath.replace(regex, replacements[character]);\n    });\n    // Handle invalid starting characters\n    uniquePath = uniquePath.replace(/^[0-9-]/, '_startNumOrHyphen_');\n    // Lastly, replace any remaining non-alphanumeric characters just in case\n    return uniquePath.replace(/[^a-zA-Z0-9_-]/g, '_');\n}\n/**\n * Nav node for a component that has no DOM element associated with it\n */\nconst getNavNodeForVirtualComponent = (parent, componentName, componentInstanceId, uniquePath, scopeLookup, storyboardId, reactFiberNode) => {\n    const navTreeNode = {\n        parent: parent,\n        children: [],\n        classList: [],\n        directlySetClassList: [],\n        name: '',\n        tempoElement: tempoElement_1.TempoElement.empty(),\n    };\n    navTreeNode.name = componentName;\n    navTreeNode.isComponent = true;\n    navTreeNode.tempoElement = new tempoElement_1.TempoElement(componentInstanceId, storyboardId, uniquePath);\n    navTreeNode.props = extractPropsFromReactFiberNode(reactFiberNode);\n    navTreeNode.literalChildren =\n        extractLiteralChildrenFromReactFiberNode(reactFiberNode);\n    Object.keys(scopeLookup).forEach((codebaseId) => {\n        var _a;\n        if (navTreeNode.scope) {\n            return;\n        }\n        if (((_a = scopeLookup[codebaseId].codebaseIds) === null || _a === void 0 ? void 0 : _a.indexOf(componentInstanceId)) > -1) {\n            navTreeNode.scope = scopeLookup[codebaseId];\n        }\n    });\n    return navTreeNode;\n};\nexports.getNavNodeForVirtualComponent = getNavNodeForVirtualComponent;\nconst buildNavForNode = (storyboardId, parent, node, uniquePathBase, uniquePathAddon, scopeLookup, treeElements, lookupIdToReactTreeMap, knownComponentNames, knownComponentInstanceNames, \n// Gets populated by this function, a lookup of element key -> list of element keys that represent this virtual component\nelementKeyToLookupList, elementKeyToNavNode) => {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;\n    if (!node) {\n        return null;\n    }\n    if ((0, outlineUtils_1.isNodeOutline)(node)) {\n        return null;\n    }\n    if ((0, identifierUtils_1.isSkipNavTreeNode)(node)) {\n        return null;\n    }\n    if (['noscript', 'script'].includes((_a = node === null || node === void 0 ? void 0 : node.tagName) === null || _a === void 0 ? void 0 : _a.toLowerCase())) {\n        return null;\n    }\n    const foundId = (0, identifierUtils_1.getCodebaseIdFromNode)(node);\n    const reactFiberLookupId = (0, identifierUtils_1.getUniqueLookupFromNode)(node);\n    // May 15, 2023 -> found bug where a random iframe was being added with the hot reloaded code\n    // I think this is related to this bug:\n    // https://github.com/facebook/create-react-app/issues/11880\n    if (((_b = node === null || node === void 0 ? void 0 : node.tagName) === null || _b === void 0 ? void 0 : _b.toLowerCase()) === 'iframe') {\n        if (!foundId) {\n            node.remove();\n            return null;\n        }\n    }\n    let reactFiberNode = null;\n    if (reactFiberLookupId) {\n        reactFiberNode = lookupIdToReactTreeMap[reactFiberLookupId];\n    }\n    const boundingRect = node.getBoundingClientRect();\n    const { top, left } = (0, jquery_1.default)(node).offset() || { top: 0, left: 0 };\n    let parentToUse = parent;\n    let uniquePathBaseToUse = uniquePathBase;\n    //////////////////////////////////////////////////////////////////\n    // Handle virtual components from the react fiber tree\n    //////////////////////////////////////////////////////////////////\n    // For outlines, components that are added need an outline around all the elements inside\n    // Create lookups in local storage to keep track of this\n    // Element keys of virtual components\n    const virtualComponentElementKeys = [];\n    // When there are react forward refs we want to collapse the node into the top level forward ref\n    let componentNameToCollapseInto;\n    let componentInstanceIdToCollapseInto;\n    if (reactFiberNode && (parent === null || parent === void 0 ? void 0 : parent.reactFiberNode)) {\n        // Traverse up the stack adding components to the tree until you hit this node's parent\n        // Note, we have to account for other children that already performed this operation and added nodes to the tree\n        let searchNode = reactFiberNode.parent;\n        let possibleNodesToAdd = [];\n        // This loop picks all the relevant nodes in between (ignoring if they are already added or not)\n        while (searchNode) {\n            if (searchNode === parent.reactFiberNode) {\n                break;\n            }\n            // Sometimes components are named differently in the react fiber tree from the codebase, but we still want to include them\n            // in the DOM tree if they are components defined in source files\n            // E.g. in next JS if you create a <Link /> element it will be called \"LinkComponent\"\n            const debugSourceFileInCodebase = ((_d = (_c = searchNode === null || searchNode === void 0 ? void 0 : searchNode.element) === null || _c === void 0 ? void 0 : _c._debugSource) === null || _d === void 0 ? void 0 : _d.fileName) &&\n                !((_g = (_f = (_e = searchNode === null || searchNode === void 0 ? void 0 : searchNode.element) === null || _e === void 0 ? void 0 : _e._debugSource) === null || _f === void 0 ? void 0 : _f.fileName) === null || _g === void 0 ? void 0 : _g.includes('node_modules'));\n            if ((((_h = searchNode.props) === null || _h === void 0 ? void 0 : _h.tempoelementid) ||\n                ((_j = searchNode.props) === null || _j === void 0 ? void 0 : _j['data-testid'])) &&\n                ((knownComponentNames === null || knownComponentNames === void 0 ? void 0 : knownComponentNames.has(searchNode.name)) ||\n                    (knownComponentInstanceNames === null || knownComponentInstanceNames === void 0 ? void 0 : knownComponentInstanceNames.has(searchNode.name)) ||\n                    debugSourceFileInCodebase)) {\n                possibleNodesToAdd.push(searchNode);\n            }\n            searchNode = searchNode.parent;\n        }\n        // Found the parent, traverse down the nodes, checking if that node was already added to the tree,\n        // and adding it if it wasn't\n        if (searchNode && possibleNodesToAdd.length) {\n            let currentParent = parent;\n            Array.from(possibleNodesToAdd)\n                .reverse()\n                .forEach((nodeToAdd) => {\n                var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n                // If this is a forward ref just move forward in the tree without adding this element, but\n                // but still label the next non-forward ref with this node's name & instance ID\n                // However, only do this the first time (want the highest forward ref)\n                if (((_c = (_b = (_a = nodeToAdd === null || nodeToAdd === void 0 ? void 0 : nodeToAdd.element) === null || _a === void 0 ? void 0 : _a.elementType) === null || _b === void 0 ? void 0 : _b['$$typeof']) === null || _c === void 0 ? void 0 : _c.toString()) ===\n                    'Symbol(react.forward_ref)') {\n                    if (!componentNameToCollapseInto &&\n                        !componentInstanceIdToCollapseInto) {\n                        componentInstanceIdToCollapseInto =\n                            ((_d = nodeToAdd.props) === null || _d === void 0 ? void 0 : _d.tempoelementid) ||\n                                ((_e = nodeToAdd.props) === null || _e === void 0 ? void 0 : _e['data-testid']);\n                        const referenceTreeElement = treeElements[componentInstanceIdToCollapseInto || ''];\n                        if ((referenceTreeElement === null || referenceTreeElement === void 0 ? void 0 : referenceTreeElement.type) === 'component-instance') {\n                            componentNameToCollapseInto =\n                                referenceTreeElement.componentName;\n                        }\n                        else {\n                            componentNameToCollapseInto = nodeToAdd.name;\n                        }\n                    }\n                    return;\n                }\n                const matchingNavTreeNode = currentParent\n                    ? (_f = currentParent.children) === null || _f === void 0 ? void 0 : _f.find((child) => child.reactFiberNode === nodeToAdd)\n                    : null;\n                // Node already matches, increase level and continue\n                if (matchingNavTreeNode) {\n                    currentParent = matchingNavTreeNode;\n                    if (currentParent.tempoElement) {\n                        virtualComponentElementKeys.push(currentParent.tempoElement.getKey());\n                    }\n                    // Increase the size of the bounding box for this element\n                    if (!matchingNavTreeNode.pageBoundingBox) {\n                        matchingNavTreeNode.pageBoundingBox = {\n                            pageX: left,\n                            pageY: top,\n                            width: boundingRect.width,\n                            height: boundingRect.height,\n                        };\n                    }\n                    else {\n                        const newRight = Math.max(matchingNavTreeNode.pageBoundingBox.pageX +\n                            matchingNavTreeNode.pageBoundingBox.width, left + boundingRect.width);\n                        const newLeft = Math.min(matchingNavTreeNode.pageBoundingBox.pageX, boundingRect.left);\n                        const newTop = Math.min(matchingNavTreeNode.pageBoundingBox.pageY, boundingRect.top);\n                        const newBottom = Math.max(matchingNavTreeNode.pageBoundingBox.pageY +\n                            matchingNavTreeNode.pageBoundingBox.height, top + boundingRect.height);\n                        matchingNavTreeNode.pageBoundingBox.pageX = newLeft;\n                        matchingNavTreeNode.pageBoundingBox.pageY = newTop;\n                        matchingNavTreeNode.pageBoundingBox.width = newRight - newLeft;\n                        matchingNavTreeNode.pageBoundingBox.height = newBottom - newTop;\n                    }\n                    return;\n                }\n                else {\n                    // Otherwise, create a new virtual node, add to parent and continue\n                    let componentName;\n                    let componentInstanceId;\n                    if (componentNameToCollapseInto) {\n                        componentName = componentInstanceIdToCollapseInto;\n                        componentInstanceId = componentInstanceIdToCollapseInto;\n                        componentNameToCollapseInto = undefined;\n                        componentInstanceIdToCollapseInto = undefined;\n                    }\n                    else {\n                        componentName = nodeToAdd.name;\n                        componentInstanceId =\n                            ((_g = nodeToAdd.props) === null || _g === void 0 ? void 0 : _g.tempoelementid) ||\n                                ((_h = nodeToAdd.props) === null || _h === void 0 ? void 0 : _h['data-testid']);\n                    }\n                    // Update the unique path and use it\n                    uniquePathBaseToUse = selectorSafe(`${uniquePathBaseToUse}-${((_j = currentParent === null || currentParent === void 0 ? void 0 : currentParent.children) === null || _j === void 0 ? void 0 : _j.length) || 0}`);\n                    const newVirtualComponent = (0, exports.getNavNodeForVirtualComponent)(currentParent, nodeToAdd.name, componentInstanceId, uniquePathBaseToUse, scopeLookup, storyboardId, nodeToAdd);\n                    currentParent.children.push(newVirtualComponent);\n                    currentParent = newVirtualComponent;\n                    virtualComponentElementKeys.push(newVirtualComponent.tempoElement.getKey());\n                    elementKeyToNavNode[newVirtualComponent.tempoElement.getKey()] =\n                        newVirtualComponent;\n                    // Set the bounding box for the new virtual component\n                    newVirtualComponent.pageBoundingBox = {\n                        pageX: left,\n                        pageY: top,\n                        width: boundingRect.width,\n                        height: boundingRect.height,\n                    };\n                }\n            });\n            parentToUse = currentParent;\n        }\n    }\n    // This node corresponds to the DOM element, not any components, unless we are collapsing into the component\n    const navTreeNode = {\n        parent: parentToUse,\n        children: [],\n        classList: (0, identifierUtils_1.getAllUnknownClasses)(node),\n        directlySetClassList: [],\n        name: '',\n        tempoElement: tempoElement_1.TempoElement.empty(),\n    };\n    (_k = parentToUse === null || parentToUse === void 0 ? void 0 : parentToUse.children) === null || _k === void 0 ? void 0 : _k.push(navTreeNode);\n    navTreeNode.name = componentNameToCollapseInto || node.tagName;\n    navTreeNode.elementTagName = node.tagName;\n    // These are only forward ref components, all other components are added as virtual components\n    navTreeNode.isComponent = Boolean(componentInstanceIdToCollapseInto);\n    const uniquePathForNode = selectorSafe(`${uniquePathBaseToUse}${uniquePathAddon}`);\n    const codebaseId = componentInstanceIdToCollapseInto || foundId || undefined;\n    navTreeNode.tempoElement = new tempoElement_1.TempoElement(codebaseId, storyboardId, uniquePathForNode);\n    const nodeElementKey = navTreeNode.tempoElement.getKey();\n    // Using the virtualComponentElementKeys, set the elementKey in a list for this element\n    virtualComponentElementKeys.forEach((elementKey) => {\n        if (elementKeyToLookupList[elementKey]) {\n            elementKeyToLookupList[elementKey].push(nodeElementKey);\n        }\n        else {\n            elementKeyToLookupList[elementKey] = [nodeElementKey];\n        }\n    });\n    // Set the lookup list for the specific node itself as well\n    elementKeyToLookupList[nodeElementKey] = [nodeElementKey];\n    // Add the element key to the class to help with referencing\n    // Note - even if there is no codebase ID we still mark it as something processed in the nav tree\n    (0, identifierUtils_1.addElementKeyAsClass)(node, nodeElementKey);\n    const treeElementForNode = treeElements[navTreeNode.tempoElement.codebaseId];\n    if (treeElementForNode) {\n        const removableClasses = new Set((treeElementForNode === null || treeElementForNode === void 0 ? void 0 : treeElementForNode.removableClasses) || []);\n        navTreeNode.directlySetClassList = (_l = navTreeNode.classList) === null || _l === void 0 ? void 0 : _l.filter((cls) => {\n            return removableClasses.has(cls);\n        });\n    }\n    navTreeNode.reactFiberNode = reactFiberNode;\n    navTreeNode.props = extractPropsFromReactFiberNode(reactFiberNode);\n    navTreeNode.literalChildren =\n        extractLiteralChildrenFromReactFiberNode(reactFiberNode);\n    navTreeNode.pageBoundingBox = {\n        pageX: left,\n        pageY: top,\n        width: boundingRect.width,\n        height: boundingRect.height,\n    };\n    navTreeNode.displayType = (0, cssFunctions_1.cssEval)(node, 'display');\n    navTreeNode.positionType = (0, cssFunctions_1.cssEval)(node, 'position');\n    navTreeNode.flexDirection = (0, cssFunctions_1.cssEval)(node, 'flex-direction');\n    navTreeNode.floatVal = (0, cssFunctions_1.cssEval)(node, 'float');\n    if (navTreeNode.tempoElement.codebaseId) {\n        Object.keys(scopeLookup).forEach((codebaseId) => {\n            var _a;\n            if (navTreeNode.scope) {\n                return;\n            }\n            if (((_a = scopeLookup[codebaseId].codebaseIds) === null || _a === void 0 ? void 0 : _a.indexOf(navTreeNode.tempoElement.codebaseId)) > -1) {\n                navTreeNode.scope = scopeLookup[codebaseId];\n            }\n        });\n    }\n    // Only parse children for non-svg elements\n    if (node.children && node.tagName !== 'svg') {\n        let indexForUniqueness = 0;\n        Array.from(node.children).forEach((child) => {\n            (0, exports.buildNavForNode)(storyboardId, navTreeNode, child, uniquePathForNode, `-${indexForUniqueness}`, scopeLookup, treeElements, lookupIdToReactTreeMap, knownComponentNames, knownComponentInstanceNames, elementKeyToLookupList, elementKeyToNavNode);\n            indexForUniqueness += 1;\n        });\n    }\n    elementKeyToNavNode[nodeElementKey] = navTreeNode;\n    // This is the top-level node\n    if (!parentToUse) {\n        let newNavTree = filterOutNodesWithoutCodebaseId(navTreeNode, elementKeyToNavNode, treeElements, storyboardId);\n        return newNavTree;\n    }\n    return null;\n};\nexports.buildNavForNode = buildNavForNode;\nconst filterOutNodesWithoutCodebaseId = (finishedNavTree, elementKeyToNavNode, treeElements, storyboardId) => {\n    let treeToReturn = finishedNavTree;\n    const storyboardType = (0, sessionStorageUtils_1.getMemoryStorageItem)(sessionStorageUtils_1.STORYBOARD_TYPE) || 'APPLICATION';\n    const storyboardSavedComponentFile = (0, sessionStorageUtils_1.getMemoryStorageItem)(sessionStorageUtils_1.SAVED_STORYBOARD_COMPONENT_FILENAME);\n    const originalStoryboardUrl = (0, sessionStorageUtils_1.getMemoryStorageItem)(sessionStorageUtils_1.ORIGINAL_STORYBOARD_URL);\n    const userNavigatedToNewRoute = originalStoryboardUrl &&\n        !window.location.href.includes(originalStoryboardUrl);\n    /**\n     * Returns whether the given tree element is in the top-level file of the storyboard\n     * Note - for saved components the top-level file is the saved component file\n     */\n    const isElementDirectlyInStoryboard = (node) => {\n        var _a, _b, _c, _d, _e, _f;\n        const filename = (_a = treeElements[node.tempoElement.codebaseId]) === null || _a === void 0 ? void 0 : _a.filename;\n        // For stories, just filter for anything not in _app or _document\n        if (storyboardType === 'STORY' &&\n            filename &&\n            !filename.includes('_app') &&\n            !filename.includes('_document')) {\n            return true;\n        }\n        // Special case -> if the parent is the body element this might be in a portal\n        // go all the way up the react fiber tree and see if there are any elements\n        // that are in the storyboard\n        if (((_b = node.parent) === null || _b === void 0 ? void 0 : _b.name) === 'BODY') {\n            let parentFiberNode = (_c = node.reactFiberNode) === null || _c === void 0 ? void 0 : _c.parent;\n            while (parentFiberNode) {\n                const codebaseId = ((_d = parentFiberNode === null || parentFiberNode === void 0 ? void 0 : parentFiberNode.props) === null || _d === void 0 ? void 0 : _d.tempoelementid) ||\n                    ((_e = parentFiberNode === null || parentFiberNode === void 0 ? void 0 : parentFiberNode.props) === null || _e === void 0 ? void 0 : _e['data-testid']) ||\n                    '';\n                if (codebaseId) {\n                    const treeElementFilename = (_f = treeElements[codebaseId]) === null || _f === void 0 ? void 0 : _f.filename;\n                    const valid = Boolean(treeElementFilename === null || treeElementFilename === void 0 ? void 0 : treeElementFilename.includes('tempobook/storyboards')) ||\n                        Boolean(treeElementFilename &&\n                            treeElementFilename === storyboardSavedComponentFile);\n                    if (valid) {\n                        return true;\n                    }\n                }\n                parentFiberNode = parentFiberNode === null || parentFiberNode === void 0 ? void 0 : parentFiberNode.parent;\n            }\n        }\n        // For everything else, filter anything that is not in the storyboard itself\n        return (Boolean(filename === null || filename === void 0 ? void 0 : filename.includes('tempobook/storyboards')) ||\n            Boolean(filename && filename === storyboardSavedComponentFile));\n    };\n    const processNode = (node, elementInStoryboardFound) => {\n        var _a, _b;\n        // Process the children first\n        for (let i = node.children.length - 1; i >= 0; i--) {\n            processNode(node.children[i], elementInStoryboardFound || isElementDirectlyInStoryboard(node));\n        }\n        // Product decision: Filter out nodes that don't exist in storyboard file for the corresponding component URL\n        //\n        // Historical context:\n        // Dec 14 - a bug was found where in cases that components were dynamically loaded (e.g. in Next JS _app.tsx), when you click\n        // on the top level component it would point to this location in the codebase:\n        //\n        // function MyApp({ Component, pageProps: { session, ...pageProps } }: AppProps) {\n        //   return (\n        //     <SessionProvider session={session}>\n        //       <Component {...pageProps} />\n        //       <Analytics />\n        //     </SessionProvider>\n        //   );\n        // }\n        //\n        // This was especially an issue for component storyboards. Thus the decision was made to hide any top-level components or divs\n        // that are not in the storyboard file\n        const inComponentStoryboardAndSkip = storyboardType !== 'APPLICATION' &&\n            !userNavigatedToNewRoute &&\n            !elementInStoryboardFound &&\n            !isElementDirectlyInStoryboard(node);\n        // If this node doesn't have a codebaseId, move its children to its parent\n        if (!((_a = node.tempoElement.codebaseId) === null || _a === void 0 ? void 0 : _a.startsWith('tempo-')) ||\n            inComponentStoryboardAndSkip) {\n            if (node.parent) {\n                // Move the children in the spot where the node was\n                const childrenToMove = node.children;\n                const indexOfNodeInParent = (_b = node.parent.children) === null || _b === void 0 ? void 0 : _b.indexOf(node);\n                node.parent.children.splice(indexOfNodeInParent, 1, ...childrenToMove);\n                // Change the parent of all the children to the new parent\n                childrenToMove.forEach((child) => {\n                    child.parent = node.parent;\n                });\n                // Remove the node from the known nodes\n                delete elementKeyToNavNode[node.tempoElement.getKey()];\n            }\n            else if (node.children.length === 1) {\n                // This is the top-level node, move it down\n                treeToReturn = node.children[0];\n                delete elementKeyToNavNode[node.tempoElement.getKey()];\n                treeToReturn.parent = undefined;\n            }\n            else if (node.children.length === 0) {\n                // 0 children, no nav tree to return\n                treeToReturn = {\n                    children: [],\n                    tempoElement: new tempoElement_1.TempoElement(exports.EMPTY_TREE_CODEBASE_ID, storyboardId, '1'),\n                    name: '',\n                };\n                delete elementKeyToNavNode[node.tempoElement.getKey()];\n            }\n            else {\n                // 2+ children, return this node, but make the codebase ID one to skip\n                node.tempoElement = new tempoElement_1.TempoElement(exports.SKIP_ROOT_CODEBASE_ID, node.tempoElement.storyboardId, node.tempoElement.uniquePath);\n                delete elementKeyToNavNode[node.tempoElement.getKey()];\n            }\n        }\n    };\n    processNode(finishedNavTree, false);\n    const postProcess = (node, level) => {\n        // Remove the react fiber node after processing\n        delete node['reactFiberNode'];\n        node.level = level;\n        node.children.forEach((child) => {\n            postProcess(child, node.tempoElement.codebaseId === exports.SKIP_ROOT_CODEBASE_ID\n                ? level\n                : level + 1);\n        });\n    };\n    postProcess(treeToReturn, 0);\n    return treeToReturn;\n};\nconst addNavTreeBuiltCallback = (callbackToAdd) => {\n    const { callbackFn, state } = callbackToAdd;\n    const callbacks = (0, sessionStorageUtils_1.getMemoryStorageItem)(sessionStorageUtils_1.NAV_TREE_CALLBACKS) || [];\n    // Sort the multiSelectedElementKeys for consistency before adding\n    state.multiSelectedElementKeys = (state.multiSelectedElementKeys || []).sort();\n    const existingCallback = callbacks.find((callback) => callback.callbackFn.toString() === callbackFn.toString() &&\n        callback.state.selectedElementKey === state.selectedElementKey &&\n        callback.state.multiSelectedElementKeys.join(',') ===\n            state.multiSelectedElementKeys.join(','));\n    if (existingCallback) {\n        return;\n    }\n    callbacks.push(callbackToAdd);\n    (0, sessionStorageUtils_1.setMemoryStorageItem)(sessionStorageUtils_1.NAV_TREE_CALLBACKS, callbacks);\n};\nexports.addNavTreeBuiltCallback = addNavTreeBuiltCallback;\nconst runNavTreeBuiltCallbacks = () => {\n    const callbacks = (0, sessionStorageUtils_1.getMemoryStorageItem)(sessionStorageUtils_1.NAV_TREE_CALLBACKS) || [];\n    if (!callbacks.length) {\n        return;\n    }\n    const currentSelectedKey = (0, sessionStorageUtils_1.getMemoryStorageItem)(sessionStorageUtils_1.SELECTED_ELEMENT_KEY);\n    const multiSelectedElementKeys = ((0, sessionStorageUtils_1.getMemoryStorageItem)(sessionStorageUtils_1.MULTI_SELECTED_ELEMENT_KEYS) || []).sort();\n    callbacks.forEach((callback) => {\n        const { callbackFn, state } = callback;\n        if (state.selectedElementKey === currentSelectedKey &&\n            state.multiSelectedElementKeys.join(',') ===\n                multiSelectedElementKeys.join(',')) {\n            callbackFn();\n        }\n    });\n    (0, sessionStorageUtils_1.removeMemoryStorageItem)(sessionStorageUtils_1.NAV_TREE_CALLBACKS);\n};\nexports.runNavTreeBuiltCallbacks = runNavTreeBuiltCallbacks;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/tempo-devtools/dist/channelMessaging/navTreeUtils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/tempo-devtools/dist/channelMessaging/outlineUtils.js":
/*!***************************************************************************!*\
  !*** ./node_modules/tempo-devtools/dist/channelMessaging/outlineUtils.js ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.isNodeOutline = exports.updateOutlines = exports.clearAllOutlines = exports.getOutlineElement = exports.OutlineType = exports.PRIMARY_COMPONENT_OUTLINE_COLOR = exports.SECONDARY_OUTLINE_COLOUR = exports.PRIMARY_OUTLINE_COLOUR = void 0;\nconst identifierUtils_1 = __webpack_require__(/*! ./identifierUtils */ \"(ssr)/./node_modules/tempo-devtools/dist/channelMessaging/identifierUtils.js\");\nconst sessionStorageUtils_1 = __webpack_require__(/*! ./sessionStorageUtils */ \"(ssr)/./node_modules/tempo-devtools/dist/channelMessaging/sessionStorageUtils.js\");\n// @ts-ignore\nconst jquery_1 = __importDefault(__webpack_require__(/*! jquery */ \"(ssr)/./node_modules/jquery/dist/jquery.js\"));\nconst tempoElement_1 = __webpack_require__(/*! ./tempoElement */ \"(ssr)/./node_modules/tempo-devtools/dist/channelMessaging/tempoElement.js\");\nconst editTextUtils_1 = __webpack_require__(/*! ./editTextUtils */ \"(ssr)/./node_modules/tempo-devtools/dist/channelMessaging/editTextUtils.js\");\nconst constantsAndTypes_1 = __webpack_require__(/*! ./constantsAndTypes */ \"(ssr)/./node_modules/tempo-devtools/dist/channelMessaging/constantsAndTypes.js\");\nexports.PRIMARY_OUTLINE_COLOUR = '#4597F7';\nexports.SECONDARY_OUTLINE_COLOUR = '#4597F7';\nexports.PRIMARY_COMPONENT_OUTLINE_COLOR = '#6183e4';\nvar OutlineType;\n(function (OutlineType) {\n    OutlineType[OutlineType[\"PRIMARY\"] = 0] = \"PRIMARY\";\n    OutlineType[OutlineType[\"SECONDARY\"] = 1] = \"SECONDARY\";\n    OutlineType[OutlineType[\"CHILD\"] = 2] = \"CHILD\";\n    OutlineType[OutlineType[\"MOVE\"] = 3] = \"MOVE\";\n})(OutlineType || (exports.OutlineType = OutlineType = {}));\n/**\n * Returns a context-based palette of colours to use for the outlines.\n */\nconst colours = () => {\n    const aiContextSelection = (0, sessionStorageUtils_1.getMemoryStorageItem)('aiContext');\n    if (aiContextSelection) {\n        return {\n            primary: '#6858f5',\n            secondary: '#6858f5',\n            component: '#5246C2',\n        };\n    }\n    return {\n        primary: exports.PRIMARY_OUTLINE_COLOUR,\n        secondary: exports.SECONDARY_OUTLINE_COLOUR,\n        component: exports.PRIMARY_COMPONENT_OUTLINE_COLOR,\n    };\n};\nconst getDashedBackgroundImage = (strokeColor, dashWidth, dashGap) => {\n    return `url(\"data:image/svg+xml,%3csvg width='100%25' height='100%25' xmlns='http://www.w3.org/2000/svg'%3e%3crect width='100%25' height='100%25' fill='none' stroke='${strokeColor.replace('#', '%23')}' stroke-width='${dashWidth}' stroke-dasharray='1%2c ${dashGap}' stroke-dashoffset='0' stroke-linecap='square'/%3e%3c/svg%3e\")`;\n};\nconst capitalizeFirstLetter = (str) => {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n};\nconst getPencilSVG = () => {\n    return `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-pencil\"><path d=\"M17 3a2.85 2.83 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5Z\"/><path d=\"m15 5 4 4\"/></svg>`;\n};\nconst getEditTextButtonNode = (parentPort, bgColor, elementKey) => {\n    const el = document.createElement('div');\n    const textEl = document.createElement('div');\n    textEl.innerText = 'Edit Dynamic Text';\n    textEl.classList.add(identifierUtils_1.EDIT_TEXT_BUTTON);\n    textEl.classList.add(identifierUtils_1.OUTLINE_CLASS);\n    // First append the pencil SVG\n    const pencilSVG = document.createElement('div');\n    pencilSVG.innerHTML = getPencilSVG();\n    pencilSVG.style.width = '22px';\n    pencilSVG.style.height = '22px';\n    pencilSVG.classList.add(identifierUtils_1.EDIT_TEXT_BUTTON);\n    pencilSVG.classList.add(identifierUtils_1.OUTLINE_CLASS);\n    el.appendChild(pencilSVG);\n    el.appendChild(textEl);\n    el.classList.add(identifierUtils_1.OUTLINE_CLASS);\n    el.classList.add(identifierUtils_1.EDIT_TEXT_BUTTON);\n    el.style.color = 'white';\n    el.style.cursor = 'pointer';\n    el.style.backgroundColor = bgColor;\n    el.style.padding = '4px 12px 4px 12px';\n    el.style.borderRadius = '8px';\n    el.style.fontSize = '20px';\n    el.style.pointerEvents = 'auto';\n    el.style.display = 'flex';\n    el.style.flexDirection = 'row';\n    el.style.alignItems = 'center';\n    el.style.justifyContent = 'center';\n    el.style.gap = '8px';\n    // When clicking, trigger an open in editor action\n    el.addEventListener('pointerdown', (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        parentPort.postMessage({\n            id: constantsAndTypes_1.FIXED_IFRAME_MESSAGE_IDS.EDIT_DYNAMIC_TEXT,\n            elementKey,\n        });\n    });\n    el.addEventListener('pointerup', (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n    });\n    return el;\n};\nconst getOutlineElement = (parentPort, type, pageLeft, pageTop, width, height, selected, tagName, isComponent, elementKey) => {\n    const palette = colours();\n    const left = pageLeft;\n    const top = pageTop;\n    const zoomPerc = (0, sessionStorageUtils_1.getMemoryStorageItem)('zoomPerc');\n    const zoomMultiplier = zoomPerc ? 1 / Number(zoomPerc) : 1;\n    const newElement = document.createElement('div');\n    newElement.classList.add(identifierUtils_1.OUTLINE_CLASS);\n    if (type === OutlineType.CHILD || type === OutlineType.MOVE) {\n        const dashThickness = 5 * zoomMultiplier;\n        newElement.style.backgroundImage = getDashedBackgroundImage(isComponent ? palette.component : palette.primary, Math.max(1, Math.round(dashThickness)), Math.max(3, Math.round(dashThickness * 3)));\n    }\n    else {\n        const thickness = type === OutlineType.SECONDARY\n            ? 0.5 * zoomMultiplier\n            : 1 * zoomMultiplier;\n        if (thickness >= 0.5) {\n            newElement.style.outline = `${thickness}px solid ${type === OutlineType.SECONDARY\n                ? palette.secondary\n                : isComponent\n                    ? palette.component\n                    : palette.primary}`;\n        }\n        newElement.style.border = `${thickness >= 0.5 ? thickness : thickness * 2}px solid ${type === OutlineType.SECONDARY\n            ? palette.secondary\n            : isComponent\n                ? palette.component\n                : palette.primary}`;\n    }\n    newElement.style.position = 'fixed';\n    newElement.style.pointerEvents = 'none';\n    switch (type) {\n        case OutlineType.PRIMARY:\n            newElement.style.zIndex = '2000000002';\n            break;\n        case OutlineType.SECONDARY:\n            newElement.style.zIndex = '2000000001';\n            break;\n        case OutlineType.CHILD:\n            newElement.style.zIndex = '2000000000';\n            break;\n        case OutlineType.MOVE:\n            newElement.style.zIndex = '2000000003';\n            break;\n    }\n    newElement.style.boxSizing = 'border-box';\n    newElement.style.left = left + 'px';\n    newElement.style.top = top + 'px';\n    newElement.style.width = width + 'px';\n    newElement.style.height = height + 'px';\n    newElement.style.cursor = 'default !important';\n    const limitedZoomMultiplier = Math.min(2, zoomMultiplier);\n    if (type === OutlineType.PRIMARY && selected) {\n        // Draw the size of the element underneath\n        const sizeElement = document.createElement('div');\n        newElement.appendChild(sizeElement);\n        sizeElement.classList.add(identifierUtils_1.OUTLINE_CLASS);\n        sizeElement.innerHTML = `${Math.round(width)} x ${Math.round(height)}`;\n        sizeElement.style.color = 'white';\n        sizeElement.style.backgroundColor = isComponent\n            ? palette.component\n            : palette.primary;\n        sizeElement.style.padding = '4px 12px 4px 12px';\n        sizeElement.style.height = '38px';\n        sizeElement.style.borderRadius = '8px';\n        sizeElement.style.position = 'absolute';\n        sizeElement.style.left = `calc(${width}px / 2)`;\n        sizeElement.style.fontSize = '20px';\n        sizeElement.style.whiteSpace = 'nowrap';\n        // After 22 it starts to merge into the border\n        // 52 is the size of the element (38px) + double the size of the gap between the border and the element (7px)\n        const bottomValue = -Math.max(22, 45 + (52 * limitedZoomMultiplier - 52) / 2);\n        sizeElement.style.bottom = `${bottomValue}px`;\n        sizeElement.style.transform = `scale(${limitedZoomMultiplier}) translateX(${-50 / limitedZoomMultiplier}%)`;\n    }\n    if (selected && tagName) {\n        const topControlsWrapper = document.createElement('div');\n        newElement.appendChild(topControlsWrapper);\n        topControlsWrapper.style.display = 'flex';\n        topControlsWrapper.style.width = width / limitedZoomMultiplier + 'px';\n        topControlsWrapper.style.justifyContent = 'space-between';\n        topControlsWrapper.style.flexDirection = 'row';\n        topControlsWrapper.style.gap = '4px';\n        topControlsWrapper.style.position = 'absolute';\n        topControlsWrapper.style.left = `0px`;\n        topControlsWrapper.style.transform = `scale(${limitedZoomMultiplier}) translateX(${50 - 50 / limitedZoomMultiplier}%) translateY(${-70 - 50 / limitedZoomMultiplier}%)`;\n        // Draw the tagname above\n        const tagNameElement = document.createElement('div');\n        topControlsWrapper.appendChild(tagNameElement);\n        tagNameElement.classList.add(identifierUtils_1.OUTLINE_CLASS);\n        tagNameElement.innerHTML = tagName\n            ? isComponent\n                ? capitalizeFirstLetter(tagName)\n                : tagName.toLowerCase()\n            : '';\n        tagNameElement.style.color = 'white';\n        tagNameElement.style.backgroundColor = isComponent\n            ? palette.component\n            : palette.primary;\n        tagNameElement.style.padding = '4px 12px 4px 12px';\n        tagNameElement.style.height = '38px';\n        tagNameElement.style.borderRadius = '8px';\n        tagNameElement.style.fontSize = '20px';\n        // If this node has direct static text inside of it, but is not editable, show the edit text\n        // dynamically button\n        if (type === OutlineType.PRIMARY) {\n            const matchingNode = (0, jquery_1.default)(`.${identifierUtils_1.ELEMENT_KEY_PREFIX}${elementKey}`).get(0);\n            const tempoElement = tempoElement_1.TempoElement.fromKey(elementKey || '');\n            if ((0, editTextUtils_1.hasTextContents)(matchingNode) && !(0, editTextUtils_1.canEditText)(tempoElement)) {\n                const newNode = getEditTextButtonNode(parentPort, isComponent ? palette.component : palette.primary, elementKey);\n                topControlsWrapper.appendChild(newNode);\n            }\n        }\n    }\n    // TODO: Add in when we add resizing in the canvas\n    // if (primary && selected) {\n    //   for (let top = 1; top >= 0; top -= 1) {\n    //     for (let left = 1; left >= 0; left -= 1) {\n    //       const cornerElement = document.createElement(\"div\");\n    //       newElement.appendChild(cornerElement);\n    //       cornerElement.classList.add(OUTLINE_CLASS);\n    //       cornerElement.style.position = \"absolute\";\n    //       cornerElement.style.width = Math.max(14 * zoomMultiplier, 1) + \"px\";\n    //       cornerElement.style.height = Math.max(14 * zoomMultiplier, 1) + \"px\";\n    //       cornerElement.style.backgroundColor = \"white\";\n    //       cornerElement.style.cursor = \"pointer\";\n    //       cornerElement.style.zIndex = \"2000000002\";\n    //       if (top) {\n    //         cornerElement.style.top = Math.min(-7 * zoomMultiplier, -0.5) + \"px\";\n    //       } else {\n    //         cornerElement.style.bottom = Math.min(-7 * zoomMultiplier, -0.5) + \"px\";\n    //       }\n    //       if (left) {\n    //         cornerElement.style.left = Math.min(-8 * zoomMultiplier, -0.5) + \"px\";\n    //       } else {\n    //         cornerElement.style.right = Math.min(-8 * zoomMultiplier, -0.5) + \"px\";\n    //       }\n    //       cornerElement.style.outline = 2 * zoomMultiplier + \"px solid \" + PRIMARY_OUTLINE_COLOUR;\n    //       cornerElement.style.pointerEvents = \"auto\";\n    //     }\n    //   }\n    // }\n    return newElement;\n};\nexports.getOutlineElement = getOutlineElement;\nconst clearAllOutlines = () => {\n    (0, jquery_1.default)(`.${identifierUtils_1.OUTLINE_CLASS}`).remove();\n};\nexports.clearAllOutlines = clearAllOutlines;\n/**\n * Creates all the necessary outlines for the hovered and selected elements\n * @returns\n */\nconst updateOutlines = (parentPort, storyboardId) => {\n    (0, exports.clearAllOutlines)();\n    const driveModeEnabled = !!(0, sessionStorageUtils_1.getSessionStorageItem)('driveModeEnabled', storyboardId);\n    if (driveModeEnabled) {\n        return;\n    }\n    const hoveredElementKey = (0, sessionStorageUtils_1.getMemoryStorageItem)(sessionStorageUtils_1.HOVERED_ELEMENT_KEY);\n    const selectedElementKey = (0, sessionStorageUtils_1.getMemoryStorageItem)(sessionStorageUtils_1.SELECTED_ELEMENT_KEY);\n    const multiselectedElementKeys = (0, sessionStorageUtils_1.getMemoryStorageItem)(sessionStorageUtils_1.MULTI_SELECTED_ELEMENT_KEYS);\n    const selectedElement = tempoElement_1.TempoElement.fromKey(selectedElementKey);\n    const body = document.getElementsByTagName('body')[0];\n    const elementKeyToNavNode = (0, sessionStorageUtils_1.getMemoryStorageItem)(sessionStorageUtils_1.ELEMENT_KEY_TO_NAV_NODE) || {};\n    const getBoundingBoxForElementKey = (elementKey) => {\n        var _a, _b;\n        const navNode = elementKeyToNavNode[elementKey];\n        // Try to get the bounding box directly from the DOM, but fall back to the one cached\n        // at Nav Tree build time\n        const boundingBoxToUse = (_b = (_a = (0, jquery_1.default)('body')\n            .find(`.${identifierUtils_1.ELEMENT_KEY_PREFIX}${elementKey}`)\n            .get(0)) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect) === null || _b === void 0 ? void 0 : _b.call(_a);\n        if (boundingBoxToUse) {\n            return {\n                left: boundingBoxToUse.left,\n                top: boundingBoxToUse.top,\n                width: boundingBoxToUse.width,\n                height: boundingBoxToUse.height,\n            };\n        }\n        if (navNode === null || navNode === void 0 ? void 0 : navNode.pageBoundingBox) {\n            return {\n                left: navNode.pageBoundingBox.pageX,\n                top: navNode.pageBoundingBox.pageY,\n                width: navNode.pageBoundingBox.width,\n                height: navNode.pageBoundingBox.height,\n            };\n        }\n        return null;\n    };\n    const createOutlinesForElementKey = (elementKey, selected, isChild, outlineChildren) => {\n        var _a, _b;\n        const navNode = elementKeyToNavNode[elementKey];\n        if (!navNode) {\n            return;\n        }\n        const tagNameToUse = navNode === null || navNode === void 0 ? void 0 : navNode.name;\n        const boundingBox = getBoundingBoxForElementKey(elementKey);\n        if (boundingBox) {\n            body.appendChild((0, exports.getOutlineElement)(parentPort, isChild ? OutlineType.CHILD : OutlineType.PRIMARY, boundingBox.left, boundingBox.top, boundingBox.width, boundingBox.height, selected, tagNameToUse, navNode === null || navNode === void 0 ? void 0 : navNode.isComponent, elementKey));\n            const mouseDragData = (0, sessionStorageUtils_1.getMemoryStorageItem)('mouseDragContext');\n            const mousePosData = (0, sessionStorageUtils_1.getMemoryStorageItem)('mousePos');\n            if (selected && (mouseDragData === null || mouseDragData === void 0 ? void 0 : mouseDragData.dragging) && mousePosData) {\n                body.appendChild((0, exports.getOutlineElement)(parentPort, OutlineType.MOVE, mousePosData.pageX - boundingBox.width / 2 + mouseDragData.offsetX, mousePosData.pageY - boundingBox.height / 2 + mouseDragData.offsetY, boundingBox.width, boundingBox.height, undefined, undefined, navNode === null || navNode === void 0 ? void 0 : navNode.isComponent, elementKey));\n            }\n        }\n        if (outlineChildren) {\n            (_b = (_a = navNode === null || navNode === void 0 ? void 0 : navNode.children) === null || _a === void 0 ? void 0 : _a.forEach) === null || _b === void 0 ? void 0 : _b.call(_a, (child) => {\n                createOutlinesForElementKey(child.tempoElement.getKey(), false, true, false);\n            });\n        }\n    };\n    if (hoveredElementKey) {\n        createOutlinesForElementKey(hoveredElementKey, false, false, true);\n    }\n    if (multiselectedElementKeys === null || multiselectedElementKeys === void 0 ? void 0 : multiselectedElementKeys.length) {\n        let fullBoundingBox = getBoundingBoxForElementKey(multiselectedElementKeys[0]);\n        multiselectedElementKeys.slice(1).forEach((elementKey) => {\n            const boundingRect = getBoundingBoxForElementKey(elementKey);\n            if (boundingRect) {\n                if (fullBoundingBox) {\n                    const prevRight = fullBoundingBox.left + fullBoundingBox.width;\n                    const prevBottom = fullBoundingBox.top + fullBoundingBox.height;\n                    fullBoundingBox.left = Math.min(fullBoundingBox.left, boundingRect.left);\n                    fullBoundingBox.top = Math.min(fullBoundingBox.top, boundingRect.top);\n                    const right = Math.max(prevRight, boundingRect.left + boundingRect.width);\n                    const bottom = Math.max(prevBottom, boundingRect.top + boundingRect.height);\n                    fullBoundingBox.width = right - fullBoundingBox.left;\n                    fullBoundingBox.height = bottom - fullBoundingBox.top;\n                }\n                else {\n                    fullBoundingBox = boundingRect;\n                }\n            }\n        });\n        if (fullBoundingBox) {\n            body.appendChild((0, exports.getOutlineElement)(parentPort, OutlineType.PRIMARY, fullBoundingBox.left, fullBoundingBox.top, fullBoundingBox.width, fullBoundingBox.height, true, `${multiselectedElementKeys.length} Elements`, false));\n        }\n        multiselectedElementKeys.forEach((elementKey) => {\n            createOutlinesForElementKey(elementKey, false, false, false);\n        });\n    }\n    else if (selectedElementKey) {\n        createOutlinesForElementKey(selectedElementKey, true, false, false);\n    }\n    // Create outlines\n    (0, jquery_1.default)(`.${identifierUtils_1.TEMPO_INSTANT_DIV_DRAW_CLASS}`).each((index, item) => {\n        const boundingRect = item.getBoundingClientRect();\n        body.appendChild((0, exports.getOutlineElement)(parentPort, OutlineType.PRIMARY, boundingRect.left, boundingRect.top, boundingRect.width, boundingRect.height));\n    });\n    (0, jquery_1.default)(`*[${identifierUtils_1.TEMPO_OUTLINE_UNTIL_REFESH}=true]`).each((index, item) => {\n        const boundingRect = item.getBoundingClientRect();\n        body.appendChild((0, exports.getOutlineElement)(parentPort, OutlineType.PRIMARY, boundingRect.left, boundingRect.top, boundingRect.width, boundingRect.height));\n    });\n    // Create secondary outlines for all matching IDs in the codebase for the clicked element\n    if (selectedElement === null || selectedElement === void 0 ? void 0 : selectedElement.codebaseId) {\n        (0, jquery_1.default)('body')\n            .find(`.${selectedElement === null || selectedElement === void 0 ? void 0 : selectedElement.codebaseId}`)\n            .not(`.${identifierUtils_1.ELEMENT_KEY_PREFIX}${selectedElementKey}`)\n            .not(`.${identifierUtils_1.ELEMENT_KEY_PREFIX}${hoveredElementKey}`)\n            .each((index, item) => {\n            const boundingRect = item.getBoundingClientRect();\n            body.appendChild((0, exports.getOutlineElement)(parentPort, OutlineType.SECONDARY, boundingRect.left, boundingRect.top, boundingRect.width, boundingRect.height));\n        });\n    }\n};\nexports.updateOutlines = updateOutlines;\nconst isNodeOutline = (node) => {\n    if (!(node === null || node === void 0 ? void 0 : node.classList)) {\n        return false;\n    }\n    let isOutline = false;\n    node.classList.forEach((cls) => {\n        if (cls === identifierUtils_1.OUTLINE_CLASS) {\n            isOutline = true;\n        }\n    });\n    return isOutline;\n};\nexports.isNodeOutline = isNodeOutline;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/tempo-devtools/dist/channelMessaging/outlineUtils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/tempo-devtools/dist/channelMessaging/resqUtils.js":
/*!************************************************************************!*\
  !*** ./node_modules/tempo-devtools/dist/channelMessaging/resqUtils.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Code taken and adapted from the resq library: https://github.com/baruchvlz/resq\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.findElementInTree = exports.getElementName = exports.clearLookupsFromTree = exports.buildTreeLookupMap = exports.removeUniqueLoookupFromReactTreeNode = exports.addUniqueLoookupToReactTreeNode = exports.getUniqueLoookupFromReactTreeNode = exports.getDomElementForReactNode = exports.buildNodeTree = exports.getRootReactElement = exports.findReactInstance = void 0;\nconst identifierUtils_1 = __webpack_require__(/*! ./identifierUtils */ \"(ssr)/./node_modules/tempo-devtools/dist/channelMessaging/identifierUtils.js\");\nconst uuid_1 = __webpack_require__(/*! uuid */ \"(ssr)/./node_modules/uuid/dist/esm-node/index.js\");\n/**\n * Taken from https://github.com/baruchvlz/resq/blob/master/src/utils.js\n * but improved to work with all versions of react\n */\nconst findReactInstance = (element) => {\n    if (element.hasOwnProperty('_reactRootContainer')) {\n        if (element._reactRootContainer._internalRoot) {\n            return element._reactRootContainer._internalRoot.current;\n        }\n        else {\n            return element._reactRootContainer.current;\n        }\n    }\n    const instanceId = Object.keys(element).find((key) => key.startsWith('__reactInternalInstance') ||\n        key.startsWith('__reactFiber') ||\n        key.startsWith('__reactContainer'));\n    if (instanceId) {\n        return element[instanceId];\n    }\n};\nexports.findReactInstance = findReactInstance;\n//Returns true if it is a DOM element\nfunction isElement(o) {\n    return typeof HTMLElement === 'object'\n        ? o instanceof HTMLElement //DOM2\n        : o &&\n            typeof o === 'object' &&\n            o !== null &&\n            o.nodeType === 1 &&\n            typeof o.nodeName === 'string';\n}\nconst getRootReactElement = () => {\n    var _a;\n    let rootSelector = '#root';\n    if (!document.querySelector(rootSelector)) {\n        rootSelector = '#__next';\n    }\n    const root = document.querySelector(rootSelector);\n    let findInstance = null;\n    if (root) {\n        findInstance = (0, exports.findReactInstance)(root);\n    }\n    else {\n        // hacky fallback; if there's no root element so we grab the first one we find\n        document\n            .getElementsByTagName('body')[0]\n            .childNodes.forEach((childNode) => {\n            if (findInstance) {\n                return;\n            }\n            if (childNode.tagName !== 'DIV') {\n                return;\n            }\n            findInstance = (0, exports.findReactInstance)(childNode);\n        });\n    }\n    // June 12 2024 fix:\n    // Sometimes the react tree only loads correctly in the \"alternate slot\"\n    // Replace the current tree with the alternate tree if that is the case\n    if (findInstance && !findInstance.child && ((_a = findInstance.alternate) === null || _a === void 0 ? void 0 : _a.child)) {\n        findInstance = findInstance.alternate;\n    }\n    return findInstance;\n};\nexports.getRootReactElement = getRootReactElement;\nconst removeChildrenFromProps = (props) => {\n    // if the props is a string, we can assume that it's just the text inside a html element\n    if (!props || typeof props === 'string') {\n        return props;\n    }\n    const returnProps = Object.assign({}, props);\n    delete returnProps.children;\n    return returnProps;\n};\nconst getElementState = (elementState) => {\n    if (!elementState) {\n        return undefined;\n    }\n    const { baseState } = elementState;\n    if (baseState) {\n        return baseState;\n    }\n    return elementState;\n};\nconst buildNodeTree = (element, parentTreeNode) => {\n    var _a, _b;\n    let tree = { children: [] };\n    tree.element = element;\n    tree.parent = parentTreeNode;\n    if (!element) {\n        return tree;\n    }\n    tree.name = (0, exports.getElementName)(element.type);\n    if (typeof tree.name !== 'string') {\n        tree.name = (_b = (_a = tree.name) === null || _a === void 0 ? void 0 : _a.toString) === null || _b === void 0 ? void 0 : _b.call(_a);\n    }\n    tree.props = removeChildrenFromProps(element.memoizedProps);\n    tree.state = getElementState(element.memoizedState);\n    let { child } = element;\n    if (child) {\n        tree.children.push(child);\n        while (child.sibling) {\n            tree.children.push(child.sibling);\n            child = child.sibling;\n        }\n    }\n    tree.children = tree.children.map((child) => (0, exports.buildNodeTree)(child, tree));\n    return tree;\n};\nexports.buildNodeTree = buildNodeTree;\nconst getDomElementForReactNode = (node) => {\n    var _a, _b;\n    let stateNode = (_a = node === null || node === void 0 ? void 0 : node.element) === null || _a === void 0 ? void 0 : _a.stateNode;\n    if (stateNode && ((_b = stateNode === null || stateNode === void 0 ? void 0 : stateNode.constructor) === null || _b === void 0 ? void 0 : _b.name) === 'FiberRootNode') {\n        stateNode = stateNode.containerInfo;\n    }\n    if (isElement(stateNode)) {\n        return stateNode;\n    }\n    return null;\n};\nexports.getDomElementForReactNode = getDomElementForReactNode;\nconst getUniqueLoookupFromReactTreeNode = (node) => {\n    const stateNode = (0, exports.getDomElementForReactNode)(node);\n    if (stateNode) {\n        return (0, identifierUtils_1.getUniqueLookupFromNode)(stateNode);\n    }\n    return null;\n};\nexports.getUniqueLoookupFromReactTreeNode = getUniqueLoookupFromReactTreeNode;\nconst addUniqueLoookupToReactTreeNode = (node, uniqueLookup) => {\n    const stateNode = (0, exports.getDomElementForReactNode)(node);\n    if (stateNode) {\n        (0, identifierUtils_1.addUniqueLookupAsClass)(stateNode, uniqueLookup);\n        return true;\n    }\n    return false;\n};\nexports.addUniqueLoookupToReactTreeNode = addUniqueLoookupToReactTreeNode;\nconst removeUniqueLoookupFromReactTreeNode = (node) => {\n    const stateNode = (0, exports.getDomElementForReactNode)(node);\n    if (stateNode) {\n        (0, identifierUtils_1.removeUniqueLookupFromNode)(stateNode);\n        return true;\n    }\n    return false;\n};\nexports.removeUniqueLoookupFromReactTreeNode = removeUniqueLoookupFromReactTreeNode;\n/**\n * Builds a lookup map with generated uuids that are added to the HTML elements under the hood as classes.\n * Make sure to clear the lookups from the tree after you are done with it.\n * @param tree\n * @param map\n */\nconst buildTreeLookupMap = (tree, map) => {\n    const newUniqueLookup = (0, uuid_1.v4)();\n    const added = (0, exports.addUniqueLoookupToReactTreeNode)(tree, newUniqueLookup);\n    if (added) {\n        map[newUniqueLookup] = tree;\n    }\n    tree.children.forEach((child) => {\n        (0, exports.buildTreeLookupMap)(child, map);\n    });\n};\nexports.buildTreeLookupMap = buildTreeLookupMap;\n/**\n * Build tree lookup map adds a class name for lookups, we want to remove these after the tree is built\n * @param tree\n */\nconst clearLookupsFromTree = (tree) => {\n    (0, exports.removeUniqueLoookupFromReactTreeNode)(tree);\n    tree.children.forEach((child) => {\n        (0, exports.clearLookupsFromTree)(child);\n    });\n};\nexports.clearLookupsFromTree = clearLookupsFromTree;\nconst isFunction = (type) => {\n    return typeof type === 'function';\n};\nconst isObject = (type) => {\n    return typeof type === 'object';\n};\nconst getElementName = (type) => {\n    var _a;\n    if (!type) {\n        return type;\n    }\n    if (isFunction(type) || isObject(type)) {\n        if (type.displayName) {\n            if (isFunction(type.displayName)) {\n                return type.displayName();\n            }\n            else {\n                return type.displayName;\n            }\n        }\n        if (type.name) {\n            if (isFunction(type.name)) {\n                return type.name();\n            }\n            else {\n                return type.name;\n            }\n        }\n        if ((_a = type.render) === null || _a === void 0 ? void 0 : _a.name) {\n            return type.render.name;\n        }\n        return null;\n    }\n    return type;\n};\nexports.getElementName = getElementName;\n/**\n * @param tree\n * @param searchFn\n * @param firstOnly if set, returns only the first element in a breadth-firth search\n * @returns\n */\nconst findElementInTree = (tree, searchFn, firstOnly) => {\n    let searchQueue = [tree];\n    const foundNodes = [];\n    while (searchQueue.length > 0) {\n        const node = searchQueue.shift();\n        if (searchFn(node)) {\n            foundNodes.push(node);\n            if (firstOnly) {\n                break;\n            }\n        }\n        searchQueue = searchQueue.concat(node.children || []);\n    }\n    return foundNodes;\n};\nexports.findElementInTree = findElementInTree;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/tempo-devtools/dist/channelMessaging/resqUtils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/tempo-devtools/dist/channelMessaging/sessionStorageUtils.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/tempo-devtools/dist/channelMessaging/sessionStorageUtils.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.removeSessionStorageItem = exports.setSessionStorageItem = exports.getSessionStorageItem = exports.removeMemoryStorageItem = exports.setMemoryStorageItem = exports.getMemoryStorageItem = exports.CURRENT_NAV_TREE = exports.ELEMENT_KEY_TO_NAV_NODE = exports.ELEMENT_KEY_TO_LOOKUP_LIST = exports.NAV_TREE_CALLBACKS = exports.IS_FLUSHING = exports.HOT_RELOADING = exports.TEXT_EDIT = exports.HOVERED_ELEMENT_KEY = exports.MULTI_SELECTED_ELEMENT_KEYS = exports.SELECTED_ELEMENT_KEY = exports.SAVED_STORYBOARD_COMPONENT_FILENAME = exports.ORIGINAL_STORYBOARD_URL = exports.STORYBOARD_TYPE = exports.STORYBOARD_COMPONENT = exports.SCOPE_LOOKUP = exports.TREE_ELEMENT_LOOKUP = void 0;\n// Memory Storage Objects\nexports.TREE_ELEMENT_LOOKUP = 'TREE_ELEMENT_LOOKUP';\nexports.SCOPE_LOOKUP = 'SCOPE_LOOKUP';\nexports.STORYBOARD_COMPONENT = 'STORYBOARD_COMPONENT';\nexports.STORYBOARD_TYPE = 'STORYBOARD_TYPE';\nexports.ORIGINAL_STORYBOARD_URL = 'ORIGINAL_STORYBOARD_URL';\nexports.SAVED_STORYBOARD_COMPONENT_FILENAME = 'SAVED_STORYBOARD_COMPONENT_FILENAME';\nexports.SELECTED_ELEMENT_KEY = 'SELECTED_ELEMENT_KEY';\nexports.MULTI_SELECTED_ELEMENT_KEYS = 'MULTI_SELECTED_ELEMENT_KEYS';\nexports.HOVERED_ELEMENT_KEY = 'HOVERED_ELEMENT_KEY';\nexports.TEXT_EDIT = 'TEXT_EDIT';\nexports.HOT_RELOADING = 'HOT_RELOADING';\nexports.IS_FLUSHING = 'IS_FLUSHING';\nexports.NAV_TREE_CALLBACKS = 'NAV_TREE_CALLBACKS';\n// Generated when creating the nav tree, used for outlines\nexports.ELEMENT_KEY_TO_LOOKUP_LIST = 'ELEMENT_KEY_TO_LOOKUP_LIST';\nexports.ELEMENT_KEY_TO_NAV_NODE = 'ELEMENT_KEY_TO_NAV_NODE';\nexports.CURRENT_NAV_TREE = 'CURRENT_NAV_TREE';\nconst inMemoryStorage = {};\nconst getMemoryStorageItem = (key) => {\n    return inMemoryStorage[key];\n};\nexports.getMemoryStorageItem = getMemoryStorageItem;\nconst setMemoryStorageItem = (key, value) => {\n    inMemoryStorage[key] = value;\n    if (!value) {\n        delete inMemoryStorage[key];\n    }\n};\nexports.setMemoryStorageItem = setMemoryStorageItem;\nconst removeMemoryStorageItem = (key) => {\n    delete inMemoryStorage[key];\n};\nexports.removeMemoryStorageItem = removeMemoryStorageItem;\nconst getSessionStorageItem = (key, storyboardId) => {\n    return sessionStorage.getItem(`${storyboardId}_${key}`);\n};\nexports.getSessionStorageItem = getSessionStorageItem;\nconst setSessionStorageItem = (key, value, storyboardId) => {\n    if (!value) {\n        (0, exports.removeSessionStorageItem)(key, storyboardId);\n        return;\n    }\n    sessionStorage.setItem(`${storyboardId}_${key}`, value);\n};\nexports.setSessionStorageItem = setSessionStorageItem;\nconst removeSessionStorageItem = (key, storyboardId) => {\n    sessionStorage.removeItem(`${storyboardId}_${key}`);\n};\nexports.removeSessionStorageItem = removeSessionStorageItem;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdGVtcG8tZGV2dG9vbHMvZGlzdC9jaGFubmVsTWVzc2FnaW5nL3Nlc3Npb25TdG9yYWdlVXRpbHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZ0NBQWdDLEdBQUcsNkJBQTZCLEdBQUcsNkJBQTZCLEdBQUcsK0JBQStCLEdBQUcsNEJBQTRCLEdBQUcsNEJBQTRCLEdBQUcsd0JBQXdCLEdBQUcsK0JBQStCLEdBQUcsa0NBQWtDLEdBQUcsMEJBQTBCLEdBQUcsbUJBQW1CLEdBQUcscUJBQXFCLEdBQUcsaUJBQWlCLEdBQUcsMkJBQTJCLEdBQUcsbUNBQW1DLEdBQUcsNEJBQTRCLEdBQUcsMkNBQTJDLEdBQUcsK0JBQStCLEdBQUcsdUJBQXVCLEdBQUcsNEJBQTRCLEdBQUcsb0JBQW9CLEdBQUcsMkJBQTJCO0FBQ2xxQjtBQUNBLDJCQUEyQjtBQUMzQixvQkFBb0I7QUFDcEIsNEJBQTRCO0FBQzVCLHVCQUF1QjtBQUN2QiwrQkFBK0I7QUFDL0IsMkNBQTJDO0FBQzNDLDRCQUE0QjtBQUM1QixtQ0FBbUM7QUFDbkMsMkJBQTJCO0FBQzNCLGlCQUFpQjtBQUNqQixxQkFBcUI7QUFDckIsbUJBQW1CO0FBQ25CLDBCQUEwQjtBQUMxQjtBQUNBLGtDQUFrQztBQUNsQywrQkFBK0I7QUFDL0Isd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QjtBQUM1QjtBQUNBO0FBQ0E7QUFDQSwrQkFBK0I7QUFDL0I7QUFDQSxxQ0FBcUMsYUFBYSxHQUFHLElBQUk7QUFDekQ7QUFDQSw2QkFBNkI7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixhQUFhLEdBQUcsSUFBSTtBQUNsRDtBQUNBLDZCQUE2QjtBQUM3QjtBQUNBLGlDQUFpQyxhQUFhLEdBQUcsSUFBSTtBQUNyRDtBQUNBLGdDQUFnQyIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxzeWFoaVxcT25lRHJpdmVcXNiz2LfYrSDYp9mE2YXZg9iq2KhcXEdhc3NpbVxcaGVhZHNob3RtYWtlcmFpcHJvXFxub2RlX21vZHVsZXNcXHRlbXBvLWRldnRvb2xzXFxkaXN0XFxjaGFubmVsTWVzc2FnaW5nXFxzZXNzaW9uU3RvcmFnZVV0aWxzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5yZW1vdmVTZXNzaW9uU3RvcmFnZUl0ZW0gPSBleHBvcnRzLnNldFNlc3Npb25TdG9yYWdlSXRlbSA9IGV4cG9ydHMuZ2V0U2Vzc2lvblN0b3JhZ2VJdGVtID0gZXhwb3J0cy5yZW1vdmVNZW1vcnlTdG9yYWdlSXRlbSA9IGV4cG9ydHMuc2V0TWVtb3J5U3RvcmFnZUl0ZW0gPSBleHBvcnRzLmdldE1lbW9yeVN0b3JhZ2VJdGVtID0gZXhwb3J0cy5DVVJSRU5UX05BVl9UUkVFID0gZXhwb3J0cy5FTEVNRU5UX0tFWV9UT19OQVZfTk9ERSA9IGV4cG9ydHMuRUxFTUVOVF9LRVlfVE9fTE9PS1VQX0xJU1QgPSBleHBvcnRzLk5BVl9UUkVFX0NBTExCQUNLUyA9IGV4cG9ydHMuSVNfRkxVU0hJTkcgPSBleHBvcnRzLkhPVF9SRUxPQURJTkcgPSBleHBvcnRzLlRFWFRfRURJVCA9IGV4cG9ydHMuSE9WRVJFRF9FTEVNRU5UX0tFWSA9IGV4cG9ydHMuTVVMVElfU0VMRUNURURfRUxFTUVOVF9LRVlTID0gZXhwb3J0cy5TRUxFQ1RFRF9FTEVNRU5UX0tFWSA9IGV4cG9ydHMuU0FWRURfU1RPUllCT0FSRF9DT01QT05FTlRfRklMRU5BTUUgPSBleHBvcnRzLk9SSUdJTkFMX1NUT1JZQk9BUkRfVVJMID0gZXhwb3J0cy5TVE9SWUJPQVJEX1RZUEUgPSBleHBvcnRzLlNUT1JZQk9BUkRfQ09NUE9ORU5UID0gZXhwb3J0cy5TQ09QRV9MT09LVVAgPSBleHBvcnRzLlRSRUVfRUxFTUVOVF9MT09LVVAgPSB2b2lkIDA7XG4vLyBNZW1vcnkgU3RvcmFnZSBPYmplY3RzXG5leHBvcnRzLlRSRUVfRUxFTUVOVF9MT09LVVAgPSAnVFJFRV9FTEVNRU5UX0xPT0tVUCc7XG5leHBvcnRzLlNDT1BFX0xPT0tVUCA9ICdTQ09QRV9MT09LVVAnO1xuZXhwb3J0cy5TVE9SWUJPQVJEX0NPTVBPTkVOVCA9ICdTVE9SWUJPQVJEX0NPTVBPTkVOVCc7XG5leHBvcnRzLlNUT1JZQk9BUkRfVFlQRSA9ICdTVE9SWUJPQVJEX1RZUEUnO1xuZXhwb3J0cy5PUklHSU5BTF9TVE9SWUJPQVJEX1VSTCA9ICdPUklHSU5BTF9TVE9SWUJPQVJEX1VSTCc7XG5leHBvcnRzLlNBVkVEX1NUT1JZQk9BUkRfQ09NUE9ORU5UX0ZJTEVOQU1FID0gJ1NBVkVEX1NUT1JZQk9BUkRfQ09NUE9ORU5UX0ZJTEVOQU1FJztcbmV4cG9ydHMuU0VMRUNURURfRUxFTUVOVF9LRVkgPSAnU0VMRUNURURfRUxFTUVOVF9LRVknO1xuZXhwb3J0cy5NVUxUSV9TRUxFQ1RFRF9FTEVNRU5UX0tFWVMgPSAnTVVMVElfU0VMRUNURURfRUxFTUVOVF9LRVlTJztcbmV4cG9ydHMuSE9WRVJFRF9FTEVNRU5UX0tFWSA9ICdIT1ZFUkVEX0VMRU1FTlRfS0VZJztcbmV4cG9ydHMuVEVYVF9FRElUID0gJ1RFWFRfRURJVCc7XG5leHBvcnRzLkhPVF9SRUxPQURJTkcgPSAnSE9UX1JFTE9BRElORyc7XG5leHBvcnRzLklTX0ZMVVNISU5HID0gJ0lTX0ZMVVNISU5HJztcbmV4cG9ydHMuTkFWX1RSRUVfQ0FMTEJBQ0tTID0gJ05BVl9UUkVFX0NBTExCQUNLUyc7XG4vLyBHZW5lcmF0ZWQgd2hlbiBjcmVhdGluZyB0aGUgbmF2IHRyZWUsIHVzZWQgZm9yIG91dGxpbmVzXG5leHBvcnRzLkVMRU1FTlRfS0VZX1RPX0xPT0tVUF9MSVNUID0gJ0VMRU1FTlRfS0VZX1RPX0xPT0tVUF9MSVNUJztcbmV4cG9ydHMuRUxFTUVOVF9LRVlfVE9fTkFWX05PREUgPSAnRUxFTUVOVF9LRVlfVE9fTkFWX05PREUnO1xuZXhwb3J0cy5DVVJSRU5UX05BVl9UUkVFID0gJ0NVUlJFTlRfTkFWX1RSRUUnO1xuY29uc3QgaW5NZW1vcnlTdG9yYWdlID0ge307XG5jb25zdCBnZXRNZW1vcnlTdG9yYWdlSXRlbSA9IChrZXkpID0+IHtcbiAgICByZXR1cm4gaW5NZW1vcnlTdG9yYWdlW2tleV07XG59O1xuZXhwb3J0cy5nZXRNZW1vcnlTdG9yYWdlSXRlbSA9IGdldE1lbW9yeVN0b3JhZ2VJdGVtO1xuY29uc3Qgc2V0TWVtb3J5U3RvcmFnZUl0ZW0gPSAoa2V5LCB2YWx1ZSkgPT4ge1xuICAgIGluTWVtb3J5U3RvcmFnZVtrZXldID0gdmFsdWU7XG4gICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICBkZWxldGUgaW5NZW1vcnlTdG9yYWdlW2tleV07XG4gICAgfVxufTtcbmV4cG9ydHMuc2V0TWVtb3J5U3RvcmFnZUl0ZW0gPSBzZXRNZW1vcnlTdG9yYWdlSXRlbTtcbmNvbnN0IHJlbW92ZU1lbW9yeVN0b3JhZ2VJdGVtID0gKGtleSkgPT4ge1xuICAgIGRlbGV0ZSBpbk1lbW9yeVN0b3JhZ2Vba2V5XTtcbn07XG5leHBvcnRzLnJlbW92ZU1lbW9yeVN0b3JhZ2VJdGVtID0gcmVtb3ZlTWVtb3J5U3RvcmFnZUl0ZW07XG5jb25zdCBnZXRTZXNzaW9uU3RvcmFnZUl0ZW0gPSAoa2V5LCBzdG9yeWJvYXJkSWQpID0+IHtcbiAgICByZXR1cm4gc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShgJHtzdG9yeWJvYXJkSWR9XyR7a2V5fWApO1xufTtcbmV4cG9ydHMuZ2V0U2Vzc2lvblN0b3JhZ2VJdGVtID0gZ2V0U2Vzc2lvblN0b3JhZ2VJdGVtO1xuY29uc3Qgc2V0U2Vzc2lvblN0b3JhZ2VJdGVtID0gKGtleSwgdmFsdWUsIHN0b3J5Ym9hcmRJZCkgPT4ge1xuICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgKDAsIGV4cG9ydHMucmVtb3ZlU2Vzc2lvblN0b3JhZ2VJdGVtKShrZXksIHN0b3J5Ym9hcmRJZCk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShgJHtzdG9yeWJvYXJkSWR9XyR7a2V5fWAsIHZhbHVlKTtcbn07XG5leHBvcnRzLnNldFNlc3Npb25TdG9yYWdlSXRlbSA9IHNldFNlc3Npb25TdG9yYWdlSXRlbTtcbmNvbnN0IHJlbW92ZVNlc3Npb25TdG9yYWdlSXRlbSA9IChrZXksIHN0b3J5Ym9hcmRJZCkgPT4ge1xuICAgIHNlc3Npb25TdG9yYWdlLnJlbW92ZUl0ZW0oYCR7c3Rvcnlib2FyZElkfV8ke2tleX1gKTtcbn07XG5leHBvcnRzLnJlbW92ZVNlc3Npb25TdG9yYWdlSXRlbSA9IHJlbW92ZVNlc3Npb25TdG9yYWdlSXRlbTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/tempo-devtools/dist/channelMessaging/sessionStorageUtils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/tempo-devtools/dist/channelMessaging/tempoElement.js":
/*!***************************************************************************!*\
  !*** ./node_modules/tempo-devtools/dist/channelMessaging/tempoElement.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TempoElement = void 0;\n// Matches the interface in tempo web\nconst STORYBOARD_TOP_CONSTANT = 'STORYBOARD-TOP-CONSTANT';\n/**\n * Used to uniquely identify an element in the DOM or a component in the nav tree.\n *\n * Created when building the nav tree\n */\nclass TempoElement {\n    /**\n     * If codebase ID is undefined then it doesn't exist in our codebase, but is still a valid lookup\n     */\n    constructor(codebaseId, storyboardId, uniquePath) {\n        if (codebaseId && /[^0-9a-zA-Z-_]/.test(codebaseId)) {\n            throw new Error('Codebase ID contains invalid chars :' + codebaseId);\n        }\n        if (storyboardId && /[^0-9a-zA-Z-_]/.test(storyboardId)) {\n            throw new Error('Storyboard ID contains invalid chars :' + codebaseId);\n        }\n        this.codebaseId = codebaseId || '';\n        this.storyboardId = storyboardId;\n        this.uniquePath = uniquePath;\n        this.cachedKey = null;\n    }\n    isEqual(other) {\n        return (this.codebaseId === other.codebaseId &&\n            this.storyboardId === other.storyboardId &&\n            this.uniquePath === other.uniquePath);\n    }\n    getKey() {\n        if (this.cachedKey) {\n            return this.cachedKey;\n        }\n        // Also start it with TE_ since it has to start with a name\n        this.cachedKey = `TE_${this.codebaseId}_${this.storyboardId}_${this.uniquePath}`;\n        return this.cachedKey;\n    }\n    /**\n     * Note, codebase ID is allowed to be empty but not the storyboard ID or unique path\n     */\n    isEmpty() {\n        if (this.storyboardId && this.uniquePath) {\n            return false;\n        }\n        return true;\n    }\n    static fromKey(key) {\n        if (!key) {\n            return TempoElement.empty();\n        }\n        // Account for the TE_ prefix\n        const [_, codebaseId, storyboardId, uniquePath] = key.split('_');\n        if (!storyboardId || !uniquePath) {\n            return TempoElement.empty();\n        }\n        return new TempoElement(codebaseId, storyboardId, uniquePath);\n    }\n    static fromOtherElement(other) {\n        return new TempoElement(other.codebaseId, other.storyboardId, other.uniquePath);\n    }\n    static empty() {\n        return new TempoElement('', '', '');\n    }\n    /**\n     * Returns a tempo element that can be used to represent the storyboard itself\n     */\n    static forStoryboard(storyboardId) {\n        return new TempoElement(STORYBOARD_TOP_CONSTANT, storyboardId, '0');\n    }\n    /**\n     * If the storyboardId is passed in it checks if it is equal to this particular storyboard\n     */\n    isStoryboard(storyboardId) {\n        return (this.codebaseId === STORYBOARD_TOP_CONSTANT &&\n            (!storyboardId || this.storyboardId === storyboardId));\n    }\n    /**\n     * @returns if this element is inside a storyboard and known in the codebase\n     */\n    isKnownElement() {\n        return (!this.isEmpty() &&\n            Boolean(this.codebaseId) &&\n            this.codebaseId !== STORYBOARD_TOP_CONSTANT);\n    }\n    isParentOf(other) {\n        if (!other) {\n            return false;\n        }\n        if (this.isStoryboard()) {\n            return (this.storyboardId === other.storyboardId &&\n                this.uniquePath !== other.uniquePath);\n        }\n        return (this.storyboardId === other.storyboardId &&\n            this.uniquePath !== other.uniquePath &&\n            Boolean(this.uniquePath) &&\n            Boolean(other.uniquePath) &&\n            other.uniquePath.startsWith(this.uniquePath));\n    }\n    isSiblingOf(other) {\n        if (!other || !this.uniquePath || !other.uniquePath) {\n            return false;\n        }\n        if (this.isEqual(other)) {\n            return false;\n        }\n        if (this.isStoryboard()) {\n            return other.isStoryboard();\n        }\n        const pathUntilLastSegment = this.uniquePath\n            .split('-')\n            .slice(0, -1)\n            .join('-');\n        const otherPathUntilLastSegment = other.uniquePath\n            .split('-')\n            .slice(0, -1)\n            .join('-');\n        return (this.storyboardId === other.storyboardId &&\n            this.uniquePath !== other.uniquePath &&\n            Boolean(pathUntilLastSegment) &&\n            Boolean(otherPathUntilLastSegment) &&\n            pathUntilLastSegment === otherPathUntilLastSegment);\n    }\n}\nexports.TempoElement = TempoElement;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdGVtcG8tZGV2dG9vbHMvZGlzdC9jaGFubmVsTWVzc2FnaW5nL3RlbXBvRWxlbWVudC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLGdCQUFnQixHQUFHLGtCQUFrQixHQUFHLGdCQUFnQjtBQUN2RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxzeWFoaVxcT25lRHJpdmVcXNiz2LfYrSDYp9mE2YXZg9iq2KhcXEdhc3NpbVxcaGVhZHNob3RtYWtlcmFpcHJvXFxub2RlX21vZHVsZXNcXHRlbXBvLWRldnRvb2xzXFxkaXN0XFxjaGFubmVsTWVzc2FnaW5nXFx0ZW1wb0VsZW1lbnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlRlbXBvRWxlbWVudCA9IHZvaWQgMDtcbi8vIE1hdGNoZXMgdGhlIGludGVyZmFjZSBpbiB0ZW1wbyB3ZWJcbmNvbnN0IFNUT1JZQk9BUkRfVE9QX0NPTlNUQU5UID0gJ1NUT1JZQk9BUkQtVE9QLUNPTlNUQU5UJztcbi8qKlxuICogVXNlZCB0byB1bmlxdWVseSBpZGVudGlmeSBhbiBlbGVtZW50IGluIHRoZSBET00gb3IgYSBjb21wb25lbnQgaW4gdGhlIG5hdiB0cmVlLlxuICpcbiAqIENyZWF0ZWQgd2hlbiBidWlsZGluZyB0aGUgbmF2IHRyZWVcbiAqL1xuY2xhc3MgVGVtcG9FbGVtZW50IHtcbiAgICAvKipcbiAgICAgKiBJZiBjb2RlYmFzZSBJRCBpcyB1bmRlZmluZWQgdGhlbiBpdCBkb2Vzbid0IGV4aXN0IGluIG91ciBjb2RlYmFzZSwgYnV0IGlzIHN0aWxsIGEgdmFsaWQgbG9va3VwXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoY29kZWJhc2VJZCwgc3Rvcnlib2FyZElkLCB1bmlxdWVQYXRoKSB7XG4gICAgICAgIGlmIChjb2RlYmFzZUlkICYmIC9bXjAtOWEtekEtWi1fXS8udGVzdChjb2RlYmFzZUlkKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDb2RlYmFzZSBJRCBjb250YWlucyBpbnZhbGlkIGNoYXJzIDonICsgY29kZWJhc2VJZCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0b3J5Ym9hcmRJZCAmJiAvW14wLTlhLXpBLVotX10vLnRlc3Qoc3Rvcnlib2FyZElkKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTdG9yeWJvYXJkIElEIGNvbnRhaW5zIGludmFsaWQgY2hhcnMgOicgKyBjb2RlYmFzZUlkKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNvZGViYXNlSWQgPSBjb2RlYmFzZUlkIHx8ICcnO1xuICAgICAgICB0aGlzLnN0b3J5Ym9hcmRJZCA9IHN0b3J5Ym9hcmRJZDtcbiAgICAgICAgdGhpcy51bmlxdWVQYXRoID0gdW5pcXVlUGF0aDtcbiAgICAgICAgdGhpcy5jYWNoZWRLZXkgPSBudWxsO1xuICAgIH1cbiAgICBpc0VxdWFsKG90aGVyKSB7XG4gICAgICAgIHJldHVybiAodGhpcy5jb2RlYmFzZUlkID09PSBvdGhlci5jb2RlYmFzZUlkICYmXG4gICAgICAgICAgICB0aGlzLnN0b3J5Ym9hcmRJZCA9PT0gb3RoZXIuc3Rvcnlib2FyZElkICYmXG4gICAgICAgICAgICB0aGlzLnVuaXF1ZVBhdGggPT09IG90aGVyLnVuaXF1ZVBhdGgpO1xuICAgIH1cbiAgICBnZXRLZXkoKSB7XG4gICAgICAgIGlmICh0aGlzLmNhY2hlZEtleSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2FjaGVkS2V5O1xuICAgICAgICB9XG4gICAgICAgIC8vIEFsc28gc3RhcnQgaXQgd2l0aCBURV8gc2luY2UgaXQgaGFzIHRvIHN0YXJ0IHdpdGggYSBuYW1lXG4gICAgICAgIHRoaXMuY2FjaGVkS2V5ID0gYFRFXyR7dGhpcy5jb2RlYmFzZUlkfV8ke3RoaXMuc3Rvcnlib2FyZElkfV8ke3RoaXMudW5pcXVlUGF0aH1gO1xuICAgICAgICByZXR1cm4gdGhpcy5jYWNoZWRLZXk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE5vdGUsIGNvZGViYXNlIElEIGlzIGFsbG93ZWQgdG8gYmUgZW1wdHkgYnV0IG5vdCB0aGUgc3Rvcnlib2FyZCBJRCBvciB1bmlxdWUgcGF0aFxuICAgICAqL1xuICAgIGlzRW1wdHkoKSB7XG4gICAgICAgIGlmICh0aGlzLnN0b3J5Ym9hcmRJZCAmJiB0aGlzLnVuaXF1ZVBhdGgpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21LZXkoa2V5KSB7XG4gICAgICAgIGlmICgha2V5KSB7XG4gICAgICAgICAgICByZXR1cm4gVGVtcG9FbGVtZW50LmVtcHR5KCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQWNjb3VudCBmb3IgdGhlIFRFXyBwcmVmaXhcbiAgICAgICAgY29uc3QgW18sIGNvZGViYXNlSWQsIHN0b3J5Ym9hcmRJZCwgdW5pcXVlUGF0aF0gPSBrZXkuc3BsaXQoJ18nKTtcbiAgICAgICAgaWYgKCFzdG9yeWJvYXJkSWQgfHwgIXVuaXF1ZVBhdGgpIHtcbiAgICAgICAgICAgIHJldHVybiBUZW1wb0VsZW1lbnQuZW1wdHkoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IFRlbXBvRWxlbWVudChjb2RlYmFzZUlkLCBzdG9yeWJvYXJkSWQsIHVuaXF1ZVBhdGgpO1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbU90aGVyRWxlbWVudChvdGhlcikge1xuICAgICAgICByZXR1cm4gbmV3IFRlbXBvRWxlbWVudChvdGhlci5jb2RlYmFzZUlkLCBvdGhlci5zdG9yeWJvYXJkSWQsIG90aGVyLnVuaXF1ZVBhdGgpO1xuICAgIH1cbiAgICBzdGF0aWMgZW1wdHkoKSB7XG4gICAgICAgIHJldHVybiBuZXcgVGVtcG9FbGVtZW50KCcnLCAnJywgJycpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgdGVtcG8gZWxlbWVudCB0aGF0IGNhbiBiZSB1c2VkIHRvIHJlcHJlc2VudCB0aGUgc3Rvcnlib2FyZCBpdHNlbGZcbiAgICAgKi9cbiAgICBzdGF0aWMgZm9yU3Rvcnlib2FyZChzdG9yeWJvYXJkSWQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBUZW1wb0VsZW1lbnQoU1RPUllCT0FSRF9UT1BfQ09OU1RBTlQsIHN0b3J5Ym9hcmRJZCwgJzAnKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSWYgdGhlIHN0b3J5Ym9hcmRJZCBpcyBwYXNzZWQgaW4gaXQgY2hlY2tzIGlmIGl0IGlzIGVxdWFsIHRvIHRoaXMgcGFydGljdWxhciBzdG9yeWJvYXJkXG4gICAgICovXG4gICAgaXNTdG9yeWJvYXJkKHN0b3J5Ym9hcmRJZCkge1xuICAgICAgICByZXR1cm4gKHRoaXMuY29kZWJhc2VJZCA9PT0gU1RPUllCT0FSRF9UT1BfQ09OU1RBTlQgJiZcbiAgICAgICAgICAgICghc3Rvcnlib2FyZElkIHx8IHRoaXMuc3Rvcnlib2FyZElkID09PSBzdG9yeWJvYXJkSWQpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHJldHVybnMgaWYgdGhpcyBlbGVtZW50IGlzIGluc2lkZSBhIHN0b3J5Ym9hcmQgYW5kIGtub3duIGluIHRoZSBjb2RlYmFzZVxuICAgICAqL1xuICAgIGlzS25vd25FbGVtZW50KCkge1xuICAgICAgICByZXR1cm4gKCF0aGlzLmlzRW1wdHkoKSAmJlxuICAgICAgICAgICAgQm9vbGVhbih0aGlzLmNvZGViYXNlSWQpICYmXG4gICAgICAgICAgICB0aGlzLmNvZGViYXNlSWQgIT09IFNUT1JZQk9BUkRfVE9QX0NPTlNUQU5UKTtcbiAgICB9XG4gICAgaXNQYXJlbnRPZihvdGhlcikge1xuICAgICAgICBpZiAoIW90aGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuaXNTdG9yeWJvYXJkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiAodGhpcy5zdG9yeWJvYXJkSWQgPT09IG90aGVyLnN0b3J5Ym9hcmRJZCAmJlxuICAgICAgICAgICAgICAgIHRoaXMudW5pcXVlUGF0aCAhPT0gb3RoZXIudW5pcXVlUGF0aCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICh0aGlzLnN0b3J5Ym9hcmRJZCA9PT0gb3RoZXIuc3Rvcnlib2FyZElkICYmXG4gICAgICAgICAgICB0aGlzLnVuaXF1ZVBhdGggIT09IG90aGVyLnVuaXF1ZVBhdGggJiZcbiAgICAgICAgICAgIEJvb2xlYW4odGhpcy51bmlxdWVQYXRoKSAmJlxuICAgICAgICAgICAgQm9vbGVhbihvdGhlci51bmlxdWVQYXRoKSAmJlxuICAgICAgICAgICAgb3RoZXIudW5pcXVlUGF0aC5zdGFydHNXaXRoKHRoaXMudW5pcXVlUGF0aCkpO1xuICAgIH1cbiAgICBpc1NpYmxpbmdPZihvdGhlcikge1xuICAgICAgICBpZiAoIW90aGVyIHx8ICF0aGlzLnVuaXF1ZVBhdGggfHwgIW90aGVyLnVuaXF1ZVBhdGgpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5pc0VxdWFsKG90aGVyKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmlzU3Rvcnlib2FyZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gb3RoZXIuaXNTdG9yeWJvYXJkKCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcGF0aFVudGlsTGFzdFNlZ21lbnQgPSB0aGlzLnVuaXF1ZVBhdGhcbiAgICAgICAgICAgIC5zcGxpdCgnLScpXG4gICAgICAgICAgICAuc2xpY2UoMCwgLTEpXG4gICAgICAgICAgICAuam9pbignLScpO1xuICAgICAgICBjb25zdCBvdGhlclBhdGhVbnRpbExhc3RTZWdtZW50ID0gb3RoZXIudW5pcXVlUGF0aFxuICAgICAgICAgICAgLnNwbGl0KCctJylcbiAgICAgICAgICAgIC5zbGljZSgwLCAtMSlcbiAgICAgICAgICAgIC5qb2luKCctJyk7XG4gICAgICAgIHJldHVybiAodGhpcy5zdG9yeWJvYXJkSWQgPT09IG90aGVyLnN0b3J5Ym9hcmRJZCAmJlxuICAgICAgICAgICAgdGhpcy51bmlxdWVQYXRoICE9PSBvdGhlci51bmlxdWVQYXRoICYmXG4gICAgICAgICAgICBCb29sZWFuKHBhdGhVbnRpbExhc3RTZWdtZW50KSAmJlxuICAgICAgICAgICAgQm9vbGVhbihvdGhlclBhdGhVbnRpbExhc3RTZWdtZW50KSAmJlxuICAgICAgICAgICAgcGF0aFVudGlsTGFzdFNlZ21lbnQgPT09IG90aGVyUGF0aFVudGlsTGFzdFNlZ21lbnQpO1xuICAgIH1cbn1cbmV4cG9ydHMuVGVtcG9FbGVtZW50ID0gVGVtcG9FbGVtZW50O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/tempo-devtools/dist/channelMessaging/tempoElement.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/tempo-devtools/dist/index.js":
/*!***************************************************!*\
  !*** ./node_modules/tempo-devtools/dist/index.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/// <reference path=\"./tempo-routes.d.ts\" />\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TempoDevtools = void 0;\nvar TempoDevtools_js_1 = __webpack_require__(/*! ./TempoDevtools.js */ \"(ssr)/./node_modules/tempo-devtools/dist/TempoDevtools.js\");\nObject.defineProperty(exports, \"TempoDevtools\", ({ enumerable: true, get: function () { return TempoDevtools_js_1.TempoDevtools; } }));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdGVtcG8tZGV2dG9vbHMvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHFCQUFxQjtBQUNyQix5QkFBeUIsbUJBQU8sQ0FBQyxxRkFBb0I7QUFDckQsaURBQWdELEVBQUUscUNBQXFDLDRDQUE0QyxFQUFDIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXHN5YWhpXFxPbmVEcml2ZVxc2LPYt9itINin2YTZhdmD2KrYqFxcR2Fzc2ltXFxoZWFkc2hvdG1ha2VyYWlwcm9cXG5vZGVfbW9kdWxlc1xcdGVtcG8tZGV2dG9vbHNcXGRpc3RcXGluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vdGVtcG8tcm91dGVzLmQudHNcIiAvPlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5UZW1wb0RldnRvb2xzID0gdm9pZCAwO1xudmFyIFRlbXBvRGV2dG9vbHNfanNfMSA9IHJlcXVpcmUoXCIuL1RlbXBvRGV2dG9vbHMuanNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJUZW1wb0RldnRvb2xzXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBUZW1wb0RldnRvb2xzX2pzXzEuVGVtcG9EZXZ0b29sczsgfSB9KTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/tempo-devtools/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/tempo-devtools/dist/posthog.js":
/*!*****************************************************!*\
  !*** ./node_modules/tempo-devtools/dist/posthog.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst PostHog = {\n    init: () => {\n        !(function (t, e) {\n            var o, n, p, r;\n            e.__SV ||\n                ((window.posthog = e),\n                    (e._i = []),\n                    (e.init = function (i, s, a) {\n                        function g(t, e) {\n                            var o = e.split('.');\n                            2 == o.length && ((t = t[o[0]]), (e = o[1])),\n                                (t[e] = function () {\n                                    t.push([e].concat(Array.prototype.slice.call(arguments, 0)));\n                                });\n                        }\n                        ((p = t.createElement('script')).type = 'text/javascript'),\n                            (p.async = !0),\n                            (p.src = s.api_host + '/static/array.js'),\n                            (r = t.getElementsByTagName('script')[0]).parentNode.insertBefore(p, r);\n                        var u = e;\n                        for (void 0 !== a ? (u = e[a] = []) : (a = 'posthog'),\n                            u.people = u.people || [],\n                            u.toString = function (t) {\n                                var e = 'posthog';\n                                return ('posthog' !== a && (e += '.' + a), t || (e += ' (stub)'), e);\n                            },\n                            u.people.toString = function () {\n                                return u.toString(1) + '.people (stub)';\n                            },\n                            o =\n                                'capture identify alias people.set people.set_once set_config register register_once unregister opt_out_capturing has_opted_out_capturing opt_in_capturing reset isFeatureEnabled onFeatureFlags getFeatureFlag getFeatureFlagPayload reloadFeatureFlags group updateEarlyAccessFeatureEnrollment getEarlyAccessFeatures getActiveMatchingSurveys getSurveys getNextSurveyStep onSessionId'.split(' '),\n                            n = 0; n < o.length; n++)\n                            g(u, o[n]);\n                        e._i.push([i, s, a]);\n                    }),\n                    (e.__SV = 1));\n        })(document, window.posthog || []);\n        posthog.init('phc_jjpEvBVV0R2mp44ePAL8Yt4jdtX5HW1lc493rkpUwwa', {\n            api_host: 'https://us.i.posthog.com',\n            person_profiles: 'identified_only',\n            session_recording: {\n                recordCrossOriginIframes: true,\n                maskAllInputs: false,\n                maskInputOptions: {\n                    password: true,\n                },\n            },\n        });\n    },\n};\nexports[\"default\"] = PostHog;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdGVtcG8tZGV2dG9vbHMvZGlzdC9wb3N0aG9nLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0I7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QjtBQUNBO0FBQ0EsbUNBQW1DLGNBQWM7QUFDakQ7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYixTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ0Esa0JBQWUiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcc3lhaGlcXE9uZURyaXZlXFzYs9i32K0g2KfZhNmF2YPYqtioXFxHYXNzaW1cXGhlYWRzaG90bWFrZXJhaXByb1xcbm9kZV9tb2R1bGVzXFx0ZW1wby1kZXZ0b29sc1xcZGlzdFxccG9zdGhvZy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IFBvc3RIb2cgPSB7XG4gICAgaW5pdDogKCkgPT4ge1xuICAgICAgICAhKGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgICB2YXIgbywgbiwgcCwgcjtcbiAgICAgICAgICAgIGUuX19TViB8fFxuICAgICAgICAgICAgICAgICgod2luZG93LnBvc3Rob2cgPSBlKSxcbiAgICAgICAgICAgICAgICAgICAgKGUuX2kgPSBbXSksXG4gICAgICAgICAgICAgICAgICAgIChlLmluaXQgPSBmdW5jdGlvbiAoaSwgcywgYSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gZyh0LCBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG8gPSBlLnNwbGl0KCcuJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgMiA9PSBvLmxlbmd0aCAmJiAoKHQgPSB0W29bMF1dKSwgKGUgPSBvWzFdKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICh0W2VdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5wdXNoKFtlXS5jb25jYXQoQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICgocCA9IHQuY3JlYXRlRWxlbWVudCgnc2NyaXB0JykpLnR5cGUgPSAndGV4dC9qYXZhc2NyaXB0JyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKHAuYXN5bmMgPSAhMCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKHAuc3JjID0gcy5hcGlfaG9zdCArICcvc3RhdGljL2FycmF5LmpzJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKHIgPSB0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzY3JpcHQnKVswXSkucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUocCwgcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdSA9IGU7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZvaWQgMCAhPT0gYSA/ICh1ID0gZVthXSA9IFtdKSA6IChhID0gJ3Bvc3Rob2cnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1LnBlb3BsZSA9IHUucGVvcGxlIHx8IFtdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHUudG9TdHJpbmcgPSBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZSA9ICdwb3N0aG9nJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICgncG9zdGhvZycgIT09IGEgJiYgKGUgKz0gJy4nICsgYSksIHQgfHwgKGUgKz0gJyAoc3R1YiknKSwgZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1LnBlb3BsZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHUudG9TdHJpbmcoMSkgKyAnLnBlb3BsZSAoc3R1YiknO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbyA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjYXB0dXJlIGlkZW50aWZ5IGFsaWFzIHBlb3BsZS5zZXQgcGVvcGxlLnNldF9vbmNlIHNldF9jb25maWcgcmVnaXN0ZXIgcmVnaXN0ZXJfb25jZSB1bnJlZ2lzdGVyIG9wdF9vdXRfY2FwdHVyaW5nIGhhc19vcHRlZF9vdXRfY2FwdHVyaW5nIG9wdF9pbl9jYXB0dXJpbmcgcmVzZXQgaXNGZWF0dXJlRW5hYmxlZCBvbkZlYXR1cmVGbGFncyBnZXRGZWF0dXJlRmxhZyBnZXRGZWF0dXJlRmxhZ1BheWxvYWQgcmVsb2FkRmVhdHVyZUZsYWdzIGdyb3VwIHVwZGF0ZUVhcmx5QWNjZXNzRmVhdHVyZUVucm9sbG1lbnQgZ2V0RWFybHlBY2Nlc3NGZWF0dXJlcyBnZXRBY3RpdmVNYXRjaGluZ1N1cnZleXMgZ2V0U3VydmV5cyBnZXROZXh0U3VydmV5U3RlcCBvblNlc3Npb25JZCcuc3BsaXQoJyAnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuID0gMDsgbiA8IG8ubGVuZ3RoOyBuKyspXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZyh1LCBvW25dKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGUuX2kucHVzaChbaSwgcywgYV0pO1xuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgKGUuX19TViA9IDEpKTtcbiAgICAgICAgfSkoZG9jdW1lbnQsIHdpbmRvdy5wb3N0aG9nIHx8IFtdKTtcbiAgICAgICAgcG9zdGhvZy5pbml0KCdwaGNfampwRXZCVlYwUjJtcDQ0ZVBBTDhZdDRqZHRYNUhXMWxjNDkzcmtwVXd3YScsIHtcbiAgICAgICAgICAgIGFwaV9ob3N0OiAnaHR0cHM6Ly91cy5pLnBvc3Rob2cuY29tJyxcbiAgICAgICAgICAgIHBlcnNvbl9wcm9maWxlczogJ2lkZW50aWZpZWRfb25seScsXG4gICAgICAgICAgICBzZXNzaW9uX3JlY29yZGluZzoge1xuICAgICAgICAgICAgICAgIHJlY29yZENyb3NzT3JpZ2luSWZyYW1lczogdHJ1ZSxcbiAgICAgICAgICAgICAgICBtYXNrQWxsSW5wdXRzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBtYXNrSW5wdXRPcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgICAgIHBhc3N3b3JkOiB0cnVlLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICB9LFxufTtcbmV4cG9ydHMuZGVmYXVsdCA9IFBvc3RIb2c7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/tempo-devtools/dist/posthog.js\n");

/***/ })

};
;